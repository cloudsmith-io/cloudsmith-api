---
swagger: "2.0"
info:
  description: "The API to the Cloudsmith Service"
  version: "v1"
  title: "Cloudsmith API"
  termsOfService: "https://help.cloudsmith.io/docs/terms-and-conditions"
  contact:
    name: "Cloudsmith Support"
    url: "https://help.cloudsmith.io"
    email: "support@cloudsmith.io"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
host: "api.cloudsmith.io"
basePath: "/v1"
schemes:
- "https"
paths:
  /badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/:
    get:
      tags:
      - "badges"
      summary: "Get latest package version for a package or package group."
      description: "Get latest package version for a package or package group."
      operationId: "badges_version_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "package_format"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "PackageFormat"
      - name: "package_name"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "PackageName"
      - name: "package_version"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "PackageVersion"
      - name: "package_identifiers"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "PackageIdentifiers"
      - name: "badge_token"
        in: "query"
        description: "Badge token to authenticate for private packages"
        required: false
        type: "string"
        x-exportParamName: "BadgeToken"
        x-optionalDataType: "String"
      - name: "cacheSeconds"
        in: "query"
        description: "Override the shields.io badge cacheSeconds value."
        required: false
        type: "string"
        x-exportParamName: "CacheSeconds"
        x-optionalDataType: "String"
      - name: "color"
        in: "query"
        description: "Override the shields.io badge color value."
        required: false
        type: "string"
        x-exportParamName: "Color"
        x-optionalDataType: "String"
      - name: "label"
        in: "query"
        description: "Override the shields.io badge label value."
        required: false
        type: "string"
        x-exportParamName: "Label"
        x-optionalDataType: "String"
      - name: "labelColor"
        in: "query"
        description: "Override the shields.io badge labelColor value."
        required: false
        type: "string"
        x-exportParamName: "LabelColor"
        x-optionalDataType: "String"
      - name: "logoColor"
        in: "query"
        description: "Override the shields.io badge logoColor value."
        required: false
        type: "string"
        x-exportParamName: "LogoColor"
        x-optionalDataType: "String"
      - name: "logoWidth"
        in: "query"
        description: "Override the shields.io badge logoWidth value."
        required: false
        type: "string"
        x-exportParamName: "LogoWidth"
        x-optionalDataType: "String"
      - name: "render"
        in: "query"
        description: "If true, badge will be rendered"
        required: false
        type: "boolean"
        x-exportParamName: "Render"
        x-optionalDataType: "Bool"
      - name: "shields"
        in: "query"
        description: "If true, a shields response will be generated"
        required: false
        type: "boolean"
        x-exportParamName: "Shields"
        x-optionalDataType: "Bool"
      - name: "show_latest"
        in: "query"
        description: "If true, for latest version badges a '(latest)' suffix is added"
        required: false
        type: "boolean"
        x-exportParamName: "ShowLatest"
        x-optionalDataType: "Bool"
      - name: "style"
        in: "query"
        description: "Override the shields.io badge style value."
        required: false
        type: "string"
        x-exportParamName: "Style"
        x-optionalDataType: "String"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema: {}
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /distros/:
    get:
      tags:
      - "distros"
      summary: "Get a list of all supported distributions."
      description: "Get a list of all supported distributions."
      operationId: "distros_list"
      parameters: []
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Available package formats retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Distribution"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /distros/{slug}/:
    get:
      tags:
      - "distros"
      summary: "View for viewing/listing distributions."
      description: "View for viewing/listing distributions."
      operationId: "distros_read"
      parameters:
      - name: "slug"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Slug"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Distribution"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/:
    get:
      tags:
      - "entitlements"
      summary: "Get a list of all entitlements in a repository."
      description: "Get a list of all entitlements in a repository."
      operationId: "entitlements_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the list of entitlement tokens"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepositoryToken"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    post:
      tags:
      - "entitlements"
      summary: "Create a specific entitlement in a repository."
      description: "Create a specific entitlement in a repository."
      operationId: "entitlements_create"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/EntitlementsCreate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Created the specified entitlement"
          schema:
            $ref: "#/definitions/RepositoryToken"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/sync/:
    post:
      tags:
      - "entitlements"
      summary: "Synchronise tokens from a source repository."
      description: "Synchronise tokens from a source repository."
      operationId: "entitlements_sync"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/EntitlementsSync"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "The tokens have been synchronised from the source repository"
          schema:
            $ref: "#/definitions/RepositoryTokenSync"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/{identifier}/:
    get:
      tags:
      - "entitlements"
      summary: "Get a specific entitlement in a repository."
      description: "Get a specific entitlement in a repository."
      operationId: "entitlements_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the specified entitlement"
          schema:
            $ref: "#/definitions/RepositoryToken"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    delete:
      tags:
      - "entitlements"
      summary: "Delete a specific entitlement in a repository."
      description: "Delete a specific entitlement in a repository."
      operationId: "entitlements_delete"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Soft-deleted the specified entitlement token successfully"
        "400":
          description: "The entitlement cannot be deleted"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    patch:
      tags:
      - "entitlements"
      summary: "Update a specific entitlement in a repository."
      description: "Update a specific entitlement in a repository."
      operationId: "entitlements_partial_update"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/EntitlementsPartialUpdate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Updated the specified entitlement"
          schema:
            $ref: "#/definitions/RepositoryToken"
        "400":
          description: "The entitlement cannot be edited"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/{identifier}/disable/:
    post:
      tags:
      - "entitlements"
      summary: "Disable an entitlement token in a repository."
      description: "Disable an entitlement token in a repository."
      operationId: "entitlements_disable"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "The entitlement token has been disabled"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/{identifier}/enable/:
    post:
      tags:
      - "entitlements"
      summary: "Enable an entitlement token in a repository."
      description: "Enable an entitlement token in a repository."
      operationId: "entitlements_enable"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "The entitlement token has been enabled"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/{identifier}/refresh/:
    post:
      tags:
      - "entitlements"
      summary: "Refresh an entitlement token in a repository."
      description: "Refresh an entitlement token in a repository."
      operationId: "entitlements_refresh"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/EntitlementsRefresh"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "The entitlement token has been refreshed"
          schema:
            $ref: "#/definitions/RepositoryTokenRefresh"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /entitlements/{owner}/{repo}/{identifier}/reset/:
    post:
      tags:
      - "entitlements"
      summary: "Reset the statistics for an entitlement token in a repository."
      description: "Reset the statistics for an entitlement token in a repository."
      operationId: "entitlements_reset"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - name: "show_tokens"
        in: "query"
        description: "Show entitlement token strings in results"
        required: false
        type: "boolean"
        x-exportParamName: "ShowTokens"
        x-optionalDataType: "Bool"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "The entitlement token statistics have been reset"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /files/{owner}/{repo}/:
    post:
      tags:
      - "files"
      summary: "Request URL(s) to upload new package file upload(s) to."
      description: "Request URL(s) to upload new package file upload(s) to."
      operationId: "files_create"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/FilesCreate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "202":
          description: "The upload request was accepted"
          schema:
            $ref: "#/definitions/PackageFileUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /files/{owner}/{repo}/validate/:
    post:
      tags:
      - "files"
      summary: "Validate parameters used for create."
      description: "Validate parameters used for create."
      operationId: "files_validate"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/FilesValidate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /files/{owner}/{repo}/{identifier}/abort/:
    post:
      tags:
      - "files"
      summary: "Abort a multipart file upload."
      description: "Abort a multipart file upload."
      operationId: "files_abort"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/FilesAbort"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "The multipart upload was aborted successfully"
        "400":
          description: "The multipart upload could not be aborted"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner), repository or upload file not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /files/{owner}/{repo}/{identifier}/complete/:
    post:
      tags:
      - "files"
      summary: "Complete a multipart file upload."
      description: "Complete a multipart file upload."
      operationId: "files_complete"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/FilesComplete"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "The multipart upload was completed successfully"
          schema:
            $ref: "#/definitions/PackageFileUpload"
        "400":
          description: "The multipart upload could not be completed"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner), repository or upload file not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /files/{owner}/{repo}/{identifier}/info/:
    get:
      tags:
      - "files"
      summary: "Get upload information for a multipart file upload."
      description: "Get upload information for a multipart file upload."
      operationId: "files_info"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Information for multipart uploaded retrieved successfully"
          schema:
            $ref: "#/definitions/PackageFilePartsUpload"
        "400":
          description: "The provided upload file was not a multipart upload"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner), repository or upload file not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /formats/:
    get:
      tags:
      - "formats"
      summary: "Get a list of all supported package formats."
      description: "Get a list of all supported package formats."
      operationId: "formats_list"
      parameters: []
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Available package formats retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Format"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /formats/{slug}/:
    get:
      tags:
      - "formats"
      summary: "Get a specific supported package format."
      description: "Get a specific supported package format."
      operationId: "formats_read"
      parameters:
      - name: "slug"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Slug"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Format"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /metrics/entitlements/{owner}/:
    get:
      tags:
      - "metrics"
      summary: "View for listing entitlement token metrics, across an account."
      description: "View for listing entitlement token metrics, across an account."
      operationId: "metrics_entitlements_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "finish"
        in: "query"
        description: "Include metrics upto and including this UTC date or UTC datetime.\
          \ For example '2020-12-31' or '2021-12-13T00:00:00Z'."
        required: false
        type: "string"
        x-exportParamName: "Finish"
        x-optionalDataType: "String"
      - name: "start"
        in: "query"
        description: "Include metrics from and including this UTC date or UTC datetime.\
          \ For example '2020-12-31' or '2021-12-13T00:00:00Z'."
        required: false
        type: "string"
        x-exportParamName: "Start"
        x-optionalDataType: "String"
      - name: "tokens"
        in: "query"
        description: "A comma seperated list of tokens (slug perm) to include in the\
          \ results."
        required: false
        type: "string"
        x-exportParamName: "Tokens"
        x-optionalDataType: "String"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the metrics for entitlements"
          schema:
            $ref: "#/definitions/EntitlementUsageMetrics"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /metrics/entitlements/{owner}/{repo}/:
    get:
      tags:
      - "metrics"
      summary: "View for listing entitlement token metrics, for a repository."
      description: "View for listing entitlement token metrics, for a repository."
      operationId: "metrics_entitlements_list_0"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "finish"
        in: "query"
        description: "Include metrics upto and including this UTC date or UTC datetime.\
          \ For example '2020-12-31' or '2021-12-13T00:00:00Z'."
        required: false
        type: "string"
        x-exportParamName: "Finish"
        x-optionalDataType: "String"
      - name: "start"
        in: "query"
        description: "Include metrics from and including this UTC date or UTC datetime.\
          \ For example '2020-12-31' or '2021-12-13T00:00:00Z'."
        required: false
        type: "string"
        x-exportParamName: "Start"
        x-optionalDataType: "String"
      - name: "tokens"
        in: "query"
        description: "A comma seperated list of tokens (slug perm) to include in the\
          \ results."
        required: false
        type: "string"
        x-exportParamName: "Tokens"
        x-optionalDataType: "String"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the metrics for entitlements"
          schema:
            $ref: "#/definitions/EntitlementUsageMetrics"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /metrics/packages/{owner}/{repo}/:
    get:
      tags:
      - "metrics"
      summary: "View for listing package usage metrics, for a repository."
      description: "View for listing package usage metrics, for a repository."
      operationId: "metrics_packages_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "finish"
        in: "query"
        description: "Include metrics upto and including this UTC date or UTC datetime.\
          \ For example '2020-12-31' or '2021-12-13T00:00:00Z'."
        required: false
        type: "string"
        x-exportParamName: "Finish"
        x-optionalDataType: "String"
      - name: "packages"
        in: "query"
        description: "A comma seperated list of packages (slug perm) to include in\
          \ the results."
        required: false
        type: "string"
        x-exportParamName: "Packages"
        x-optionalDataType: "String"
      - name: "start"
        in: "query"
        description: "Include metrics from and including this UTC date or UTC datetime.\
          \ For example '2020-12-31' or '2021-12-13T00:00:00Z'."
        required: false
        type: "string"
        x-exportParamName: "Start"
        x-optionalDataType: "String"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the metrics for packages"
          schema:
            $ref: "#/definitions/PackageUsageMetrics"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /namespaces/:
    get:
      tags:
      - "namespaces"
      summary: "Get a list of all namespaces the user belongs to."
      description: "Get a list of all namespaces the user belongs to."
      operationId: "namespaces_list"
      parameters:
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Namespace"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /namespaces/{slug}/:
    get:
      tags:
      - "namespaces"
      summary: "Views for working with namespaces."
      description: "Views for working with namespaces."
      operationId: "namespaces_read"
      parameters:
      - name: "slug"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Slug"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Namespace"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /orgs/:
    get:
      tags:
      - "orgs"
      summary: "Get a list of all the organizations you are associated with."
      description: "Get a list of all the organizations you are associated with."
      operationId: "orgs_list"
      parameters:
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Organization"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /orgs/{org}/:
    get:
      tags:
      - "orgs"
      summary: "Get the details for the specific organization."
      description: "Get the details for the specific organization."
      operationId: "orgs_read"
      parameters:
      - name: "org"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Org"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Organization"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /orgs/{org}/members/:
    get:
      tags:
      - "orgs"
      summary: "Get the details for all organization members."
      description: "Get the details for all organization members."
      operationId: "orgs_members_list"
      parameters:
      - name: "org"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Org"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/OrganizationMembership"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /orgs/{org}/members/{member}/:
    get:
      tags:
      - "orgs"
      summary: "Get the details for a specific organization member."
      description: "Get the details for a specific organization member."
      operationId: "orgs_members_read"
      parameters:
      - name: "org"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Org"
      - name: "member"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Member"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OrganizationMembership"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /orgs/{org}/members/{member}/remove/:
    get:
      tags:
      - "orgs"
      summary: "Removes a member from the organization."
      description: "Removes a member from the organization."
      operationId: "orgs_members_remove"
      parameters:
      - name: "org"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Org"
      - name: "member"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Member"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OrganizationMembership"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/:
    get:
      tags:
      - "packages"
      summary: "Get a list of all packages associated with repository."
      description: "Get a list of all packages associated with repository."
      operationId: "packages_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "A search term for querying names, filenames, versions, distributions,\
          \ architectures, formats or statuses of packages."
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "sort"
        in: "query"
        description: "A field for sorting objects in ascending or descending order."
        required: false
        type: "string"
        x-exportParamName: "Sort"
        x-optionalDataType: "String"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the list of packages"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Package"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/alpine/:
    post:
      tags:
      - "packages"
      summary: "Create a new Alpine package"
      description: "Create a new Alpine package"
      operationId: "packages_upload_alpine"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadAlpine"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/cargo/:
    post:
      tags:
      - "packages"
      summary: "Create a new Cargo package"
      description: "Create a new Cargo package"
      operationId: "packages_upload_cargo"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadCargo"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/cocoapods/:
    post:
      tags:
      - "packages"
      summary: "Create a new CocoaPods package"
      description: "Create a new CocoaPods package"
      operationId: "packages_upload_cocoapods"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadCocoapods"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/composer/:
    post:
      tags:
      - "packages"
      summary: "Create a new Composer package"
      description: "Create a new Composer package"
      operationId: "packages_upload_composer"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadComposer"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/conan/:
    post:
      tags:
      - "packages"
      summary: "Create a new Conan package"
      description: "Create a new Conan package"
      operationId: "packages_upload_conan"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadConan"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/ConanPackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/conda/:
    post:
      tags:
      - "packages"
      summary: "Create a new Conda package"
      description: "Create a new Conda package"
      operationId: "packages_upload_conda"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadConda"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/cran/:
    post:
      tags:
      - "packages"
      summary: "Create a new CRAN package"
      description: "Create a new CRAN package"
      operationId: "packages_upload_cran"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadCran"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/dart/:
    post:
      tags:
      - "packages"
      summary: "Create a new Dart package"
      description: "Create a new Dart package"
      operationId: "packages_upload_dart"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadDart"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/deb/:
    post:
      tags:
      - "packages"
      summary: "Create a new Debian package"
      description: "Create a new Debian package"
      operationId: "packages_upload_deb"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadDeb"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/docker/:
    post:
      tags:
      - "packages"
      summary: "Create a new Docker package"
      description: "Create a new Docker package"
      operationId: "packages_upload_docker"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadDocker"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/go/:
    post:
      tags:
      - "packages"
      summary: "Create a new Go package"
      description: "Create a new Go package"
      operationId: "packages_upload_go"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadGo"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/helm/:
    post:
      tags:
      - "packages"
      summary: "Create a new Helm package"
      description: "Create a new Helm package"
      operationId: "packages_upload_helm"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadHelm"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/luarocks/:
    post:
      tags:
      - "packages"
      summary: "Create a new LuaRocks package"
      description: "Create a new LuaRocks package"
      operationId: "packages_upload_luarocks"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadLuarocks"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/maven/:
    post:
      tags:
      - "packages"
      summary: "Create a new Maven package"
      description: "Create a new Maven package"
      operationId: "packages_upload_maven"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadMaven"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/MavenPackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/npm/:
    post:
      tags:
      - "packages"
      summary: "Create a new npm package"
      description: "Create a new npm package"
      operationId: "packages_upload_npm"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadNpm"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/nuget/:
    post:
      tags:
      - "packages"
      summary: "Create a new NuGet package"
      description: "Create a new NuGet package"
      operationId: "packages_upload_nuget"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadNuget"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/p2/:
    post:
      tags:
      - "packages"
      summary: "Create a new P2 package"
      description: "Create a new P2 package"
      operationId: "packages_upload_p2"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadP2"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/python/:
    post:
      tags:
      - "packages"
      summary: "Create a new Python package"
      description: "Create a new Python package"
      operationId: "packages_upload_python"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadPython"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/raw/:
    post:
      tags:
      - "packages"
      summary: "Create a new Raw package"
      description: "Create a new Raw package"
      operationId: "packages_upload_raw"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadRaw"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/RawPackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/rpm/:
    post:
      tags:
      - "packages"
      summary: "Create a new RedHat package"
      description: "Create a new RedHat package"
      operationId: "packages_upload_rpm"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadRpm"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/ruby/:
    post:
      tags:
      - "packages"
      summary: "Create a new Ruby package"
      description: "Create a new Ruby package"
      operationId: "packages_upload_ruby"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadRuby"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/terraform/:
    post:
      tags:
      - "packages"
      summary: "Create a new Terraform package"
      description: "Create a new Terraform package"
      operationId: "packages_upload_terraform"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadTerraform"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/AlpinePackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/upload/vagrant/:
    post:
      tags:
      - "packages"
      summary: "Create a new Vagrant package"
      description: "Create a new Vagrant package"
      operationId: "packages_upload_vagrant"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesUploadVagrant"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Upload acknowledged and queued for synchronisation"
          schema:
            $ref: "#/definitions/VagrantPackageUpload"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/alpine/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Alpine package"
      description: "Validate parameters for create Alpine package"
      operationId: "packages_validate-upload_alpine"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadAlpine"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/cargo/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Cargo package"
      description: "Validate parameters for create Cargo package"
      operationId: "packages_validate-upload_cargo"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadCargo"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/cocoapods/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create CocoaPods package"
      description: "Validate parameters for create CocoaPods package"
      operationId: "packages_validate-upload_cocoapods"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadCocoapods"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/composer/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Composer package"
      description: "Validate parameters for create Composer package"
      operationId: "packages_validate-upload_composer"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadComposer"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/conan/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Conan package"
      description: "Validate parameters for create Conan package"
      operationId: "packages_validate-upload_conan"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadConan"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/conda/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Conda package"
      description: "Validate parameters for create Conda package"
      operationId: "packages_validate-upload_conda"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadConda"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/cran/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create CRAN package"
      description: "Validate parameters for create CRAN package"
      operationId: "packages_validate-upload_cran"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadCran"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/dart/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Dart package"
      description: "Validate parameters for create Dart package"
      operationId: "packages_validate-upload_dart"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadDart"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/deb/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Debian package"
      description: "Validate parameters for create Debian package"
      operationId: "packages_validate-upload_deb"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadDeb"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/docker/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Docker package"
      description: "Validate parameters for create Docker package"
      operationId: "packages_validate-upload_docker"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadDocker"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/go/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Go package"
      description: "Validate parameters for create Go package"
      operationId: "packages_validate-upload_go"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadGo"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/helm/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Helm package"
      description: "Validate parameters for create Helm package"
      operationId: "packages_validate-upload_helm"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadHelm"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/luarocks/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create LuaRocks package"
      description: "Validate parameters for create LuaRocks package"
      operationId: "packages_validate-upload_luarocks"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadLuarocks"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/maven/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Maven package"
      description: "Validate parameters for create Maven package"
      operationId: "packages_validate-upload_maven"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadMaven"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/npm/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create npm package"
      description: "Validate parameters for create npm package"
      operationId: "packages_validate-upload_npm"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadNpm"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/nuget/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create NuGet package"
      description: "Validate parameters for create NuGet package"
      operationId: "packages_validate-upload_nuget"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadNuget"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/p2/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create P2 package"
      description: "Validate parameters for create P2 package"
      operationId: "packages_validate-upload_p2"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadP2"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/python/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Python package"
      description: "Validate parameters for create Python package"
      operationId: "packages_validate-upload_python"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadPython"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/raw/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Raw package"
      description: "Validate parameters for create Raw package"
      operationId: "packages_validate-upload_raw"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadRaw"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/rpm/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create RedHat package"
      description: "Validate parameters for create RedHat package"
      operationId: "packages_validate-upload_rpm"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadRpm"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/ruby/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Ruby package"
      description: "Validate parameters for create Ruby package"
      operationId: "packages_validate-upload_ruby"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadRuby"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/terraform/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Terraform package"
      description: "Validate parameters for create Terraform package"
      operationId: "packages_validate-upload_terraform"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadTerraform"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/validate-upload/vagrant/:
    post:
      tags:
      - "packages"
      summary: "Validate parameters for create Vagrant package"
      description: "Validate parameters for create Vagrant package"
      operationId: "packages_validate-upload_vagrant"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesValidateuploadVagrant"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Validation was successful, parameters are OK"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Namespace (owner) or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/:
    get:
      tags:
      - "packages"
      summary: "Get a specific package in a repository."
      description: "Get a specific package in a repository."
      operationId: "packages_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the specified package successfully"
          schema:
            $ref: "#/definitions/Package"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    delete:
      tags:
      - "packages"
      summary: "Delete a specific package in a repository."
      description: "Delete a specific package in a repository."
      operationId: "packages_delete"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Deleted the specified package successfully"
        "400":
          description: "The package cannot be deleted"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/copy/:
    post:
      tags:
      - "packages"
      summary: "Copy a package to another repository."
      description: "Copy a package to another repository."
      operationId: "packages_copy"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesCopy"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Copied specified package to destination repository"
          schema:
            $ref: "#/definitions/PackageCopy"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/dependencies/:
    get:
      tags:
      - "packages"
      summary: "Get the direct (non-transitive) dependencies list for a package."
      description: "Get the direct (non-transitive) dependencies list for a package."
      operationId: "packages_dependencies"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved direct dependencies for specified package"
          schema:
            $ref: "#/definitions/PackageDependencies"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/move/:
    post:
      tags:
      - "packages"
      summary: "Move a package to another repository."
      description: "Move a package to another repository."
      operationId: "packages_move"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesMove"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Moved specified package to destination repository"
          schema:
            $ref: "#/definitions/PackageMove"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/resync/:
    post:
      tags:
      - "packages"
      summary: "Schedule a package for resynchronisation."
      description: "Schedule a package for resynchronisation."
      operationId: "packages_resync"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Scheduled the package for resynchronisation"
          schema:
            $ref: "#/definitions/Package"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/scan/:
    post:
      tags:
      - "packages"
      summary: "Schedule a package for scanning."
      description: "Schedule a package for scanning."
      operationId: "packages_scan"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Scheduled the package for scanning"
          schema:
            $ref: "#/definitions/Package"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/status/:
    get:
      tags:
      - "packages"
      summary: "Get the synchronisation status for a package."
      description: "Get the synchronisation status for a package."
      operationId: "packages_status"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved status for specified package"
          schema:
            $ref: "#/definitions/PackageStatus"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /packages/{owner}/{repo}/{identifier}/tag/:
    post:
      tags:
      - "packages"
      summary: "Add/Replace/Remove tags for a package."
      description: "Add/Replace/Remove tags for a package."
      operationId: "packages_tag"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/PackagesTag"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Modified tags for the package"
          schema:
            $ref: "#/definitions/Package"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /quota/history/{owner}/:
    get:
      tags:
      - "quota"
      summary: "Quota history for a given namespace."
      description: "Quota history for a given namespace."
      operationId: "quota_history_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/QuotaHistory"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /quota/oss/history/{owner}/:
    get:
      tags:
      - "quota"
      summary: "Open-source Quota history for a given namespace."
      description: "Open-source Quota history for a given namespace."
      operationId: "quota_oss_history_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/QuotaHistory"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /quota/oss/{owner}/:
    get:
      tags:
      - "quota"
      summary: "Open-source Quota usage for a given namespace."
      description: "Open-source Quota usage for a given namespace."
      operationId: "quota_oss_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Quota"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /quota/{owner}/:
    get:
      tags:
      - "quota"
      summary: "Quota usage for a given namespace."
      description: "Quota usage for a given namespace."
      operationId: "quota_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Quota"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /rates/limits/:
    get:
      tags:
      - "rates"
      summary: "Endpoint to check rate limits for current user."
      description: "Endpoint to check rate limits for current user."
      operationId: "rates_limits_list"
      parameters: []
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Rate check was successful"
          schema:
            $ref: "#/definitions/ResourcesRateCheck"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /repos/:
    get:
      tags:
      - "repos"
      summary: "Get a list of all repositories associated with current user."
      description: "Get a list of all repositories associated with current user."
      operationId: "repos_all_list"
      parameters:
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the list of repositories"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /repos/{owner}/:
    get:
      tags:
      - "repos"
      summary: "Get a list of all repositories within a namespace."
      description: "Get a list of all repositories within a namespace."
      operationId: "repos_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the list of repositories"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Repository"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    post:
      tags:
      - "repos"
      summary: "Create a new repository in a given namespace."
      description: "Create a new repository in a given namespace."
      operationId: "repos_create"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/ReposCreate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "The repository was created"
          schema:
            $ref: "#/definitions/Repository"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /repos/{owner}/{identifier}/:
    get:
      tags:
      - "repos"
      summary: "Get a specific repository."
      description: "Get a specific repository."
      operationId: "repos_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the specified repository"
          schema:
            $ref: "#/definitions/Repository"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    delete:
      tags:
      - "repos"
      summary: "Delete a repository in a given namespace."
      description: "Delete a repository in a given namespace."
      operationId: "repos_delete"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "The repository has been scheduled for deletion"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Unable to find repository with that name in the provided namespace"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    patch:
      tags:
      - "repos"
      summary: "Update details about a repository in a given namespace."
      description: "Update details about a repository in a given namespace."
      operationId: "repos_partial_update"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/ReposPartialUpdate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "The repository was updated"
          schema:
            $ref: "#/definitions/Repository"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Unable to find repository with that name in the provided namespace"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /status/check/basic/:
    get:
      tags:
      - "status"
      summary: "Endpoint to check basic API connectivity."
      description: "Endpoint to check basic API connectivity."
      operationId: "status_check_basic"
      parameters: []
      security: []
      responses:
        "200":
          description: "Status check was successful"
          schema:
            $ref: "#/definitions/StatusBasic"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /storage-regions/:
    get:
      tags:
      - "storage-regions"
      summary: "Get a list of all available storage regions."
      description: "Get a list of all available storage regions."
      operationId: "storage-regions_list"
      parameters: []
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Available storage regions retrieved"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/StorageRegion"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /storage-regions/{slug}/:
    get:
      tags:
      - "storage-regions"
      summary: "Get a specific storage region."
      description: "Get a specific storage region."
      operationId: "storage-regions_read"
      parameters:
      - name: "slug"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Slug"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/StorageRegion"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /user/self/:
    get:
      tags:
      - "user"
      summary: "Provide a brief for the current user (if any)."
      description: "Provide a brief for the current user (if any)."
      operationId: "user_self"
      parameters: []
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved brief for the current user"
          schema:
            $ref: "#/definitions/UserBrief"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /user/token/:
    post:
      tags:
      - "user"
      summary: "Retrieve the API key/token for the authenticated user."
      description: "Retrieve the API key/token for the authenticated user."
      operationId: "user_token_create"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/UserTokenCreate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Retrieved/created user API token/key"
          schema:
            $ref: "#/definitions/UserAuthToken"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "403":
          description: "Locked out"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Failed to authenticate"
          schema:
            $ref: "#/definitions/Status"
  /users/profile/{slug}/:
    get:
      tags:
      - "users"
      summary: "Provide a brief for the specified user (if any)."
      description: "Provide a brief for the specified user (if any)."
      operationId: "users_profile_read"
      parameters:
      - name: "slug"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Slug"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved details for the specified user (or current user,\
            \ if none was specified)"
          schema:
            $ref: "#/definitions/UserProfile"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /vulnerabilities/{owner}/:
    get:
      tags:
      - "vulnerabilities"
      summary: "Lists scan results for a specific namespace."
      description: "Lists scan results for a specific namespace."
      operationId: "vulnerabilities_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VulnerabilityScanResultsList"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /vulnerabilities/{owner}/{repo}/:
    get:
      tags:
      - "vulnerabilities"
      summary: "Lists scan results for a specific repository."
      description: "Lists scan results for a specific repository."
      operationId: "vulnerabilities_list_0"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VulnerabilityScanResultsList"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /vulnerabilities/{owner}/{repo}/{package}/:
    get:
      tags:
      - "vulnerabilities"
      summary: "Lists scan results for a specific package."
      description: "Lists scan results for a specific package."
      operationId: "vulnerabilities_list_1"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "package"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Package_"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VulnerabilityScanResultsList"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /vulnerabilities/{owner}/{repo}/{package}/{scan_id}/:
    get:
      tags:
      - "vulnerabilities"
      summary: "Returns a Scan Result."
      description: "Returns a Scan Result."
      operationId: "vulnerabilities_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "package"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Package_"
      - name: "scan_id"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "ScanId"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VulnerabilityScanResults"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /webhooks/{owner}/{repo}/:
    get:
      tags:
      - "webhooks"
      summary: "Get a list of all webhooks in a repository."
      description: "Get a list of all webhooks in a repository."
      operationId: "webhooks_list"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "page"
        in: "query"
        description: "A page number within the paginated result set."
        required: false
        type: "integer"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "page_size"
        in: "query"
        description: "Number of results to return per page."
        required: false
        type: "integer"
        x-exportParamName: "PageSize"
        x-optionalDataType: "Int32"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Retrieved the list of webhooks"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/RepositoryWebhook"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    post:
      tags:
      - "webhooks"
      summary: "Create a specific webhook in a repository."
      description: "Create a specific webhook in a repository."
      operationId: "webhooks_create"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/WebhooksCreate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "201":
          description: "Created the specified webhook"
          schema:
            $ref: "#/definitions/RepositoryWebhook"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
  /webhooks/{owner}/{repo}/{identifier}/:
    get:
      tags:
      - "webhooks"
      summary: "Views for working with repository webhooks."
      description: "Views for working with repository webhooks."
      operationId: "webhooks_read"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RepositoryWebhook"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    delete:
      tags:
      - "webhooks"
      summary: "Delete a specific webhook in a repository."
      description: "Delete a specific webhook in a repository."
      operationId: "webhooks_delete"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "204":
          description: "Deleted the specified webhook successfully"
        "400":
          description: "The webhook cannot be deleted"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
    patch:
      tags:
      - "webhooks"
      summary: "Update a specific webhook in a repository."
      description: "Update a specific webhook in a repository."
      operationId: "webhooks_partial_update"
      consumes:
      - "application/json"
      parameters:
      - name: "owner"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Owner"
      - name: "repo"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Repo"
      - name: "identifier"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Identifier"
      - in: "body"
        name: "data"
        required: false
        schema:
          $ref: "#/definitions/WebhooksPartialUpdate"
        x-exportParamName: "Data"
      security:
      - token: []
      - apikey: []
      - csrf_token: []
      responses:
        "200":
          description: "Updated the specified webhook"
          schema:
            $ref: "#/definitions/RepositoryWebhook"
        "400":
          description: "Request could not be processed (see detail)"
          schema:
            $ref: "#/definitions/Status"
        "404":
          description: "Owner namespace or repository not found"
          schema:
            $ref: "#/definitions/Status"
        "422":
          description: "Missing or invalid parameters (see detail)"
          schema:
            $ref: "#/definitions/Status"
securityDefinitions:
  apikey:
    type: "apiKey"
    name: "X-Api-Key"
    in: "header"
  basic:
    type: "basic"
definitions:
  OrganizationMembership:
    type: "object"
    properties:
      email:
        type: "string"
        description: ""
      has_two_factor:
        type: "boolean"
        description: ""
      joined_at:
        type: "string"
        description: ""
      last_login_at:
        type: "string"
        description: ""
      role:
        type: "string"
        description: ""
      user:
        type: "string"
        description: ""
      user_id:
        type: "string"
        description: ""
      user_name:
        type: "string"
        description: ""
      user_url:
        type: "string"
        description: ""
      visibility:
        type: "string"
        description: ""
    example:
      joined_at: "joined_at"
      last_login_at: "last_login_at"
      role: "role"
      visibility: "visibility"
      user_id: "user_id"
      user_name: "user_name"
      user_url: "user_url"
      user: "user"
      email: "email"
      has_two_factor: true
  PackagesUploadConan:
    type: "object"
    required:
    - "info_file"
    - "manifest_file"
    - "metadata_file"
    - "package_file"
    properties:
      conan_channel:
        type: "string"
        example: "alpha"
        description: "Conan channel."
      conan_prefix:
        type: "string"
        example: "my-repository"
        description: "Conan prefix (User)."
      info_file:
        type: "string"
        example: "y1234456789b"
        description: "The info file is an python file containing the package metadata."
      manifest_file:
        type: "string"
        example: "y1234456789c"
        description: "The info file is an python file containing the package metadata."
      metadata_file:
        type: "string"
        example: "y1234456789a"
        description: "The conan file is an python file containing the package metadata."
      name:
        type: "string"
        example: "conan_package.tgz"
        description: "The name of this package."
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      version:
        type: "string"
        example: "1.0.0"
        description: "The raw version for this package."
    title: "PackagesUploadConan"
    example:
      republish: true
      name: "conan_package.tgz"
      metadata_file: "y1234456789a"
      package_file: "x123456789a"
      conan_prefix: "my-repository"
      version: "1.0.0"
      conan_channel: "alpha"
      info_file: "y1234456789b"
      manifest_file: "y1234456789c"
      tags: "tags"
  ConanPackageUpload:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      conan_channel:
        type: "string"
        example: "alpha"
        description: "Conan channel."
      conan_prefix:
        type: "string"
        example: "my-repository"
        description: "Conan prefix (User)."
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        example: "conan_package.tgz"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: ""
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        example: "1.0.0"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "1.0.0"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "conan_package.tgz"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      conan_prefix: "my-repository"
      num_files: 1
      conan_channel: "alpha"
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  VulnerabilityScanResultsList:
    type: "object"
    required:
    - "identifier"
    - "package"
    - "scan_id"
    properties:
      created_at:
        type: "string"
        example: "2020-01-01T12:00:00.000000Z"
        description: "The time this scan result was stored."
      has_vulnerabilities:
        type: "boolean"
        example: true
        description: "Do the results contain any known vulnerabilities?"
      identifier:
        type: "string"
        example: "HKmoU6OHbyj4ha3u"
        description: ""
      max_severity:
        type: "string"
        example: "HIGH"
        description: ""
      num_vulnerabilities:
        type: "integer"
        example: 2
        description: ""
      package:
        type: "object"
        example:
          identifier: "XEtJh5CTzcr3"
          name: "insecure-image"
          version: "452fcef2bd33e962aa77c2adc65eb022c566c3e01759c432f7c2f9ec838a6b05"
        description: ""
        properties: {}
      scan_id:
        type: "integer"
        example: 1
        description: ""
    example:
      identifier: "HKmoU6OHbyj4ha3u"
      max_severity: "HIGH"
      package:
        identifier: "XEtJh5CTzcr3"
        name: "insecure-image"
        version: "452fcef2bd33e962aa77c2adc65eb022c566c3e01759c432f7c2f9ec838a6b05"
      has_vulnerabilities: true
      created_at: "2020-01-01T12:00:00.000000Z"
      num_vulnerabilities: 2
      scan_id: 1
  repos_gpg_keys:
    type: "object"
    properties:
      active:
        type: "boolean"
        description: "If selected this is the active key for this repository."
      comment:
        type: "string"
        description: ""
      created_at:
        type: "string"
        description: ""
      default:
        type: "boolean"
        description: "If selected this is the default key for this repository."
      fingerprint:
        type: "string"
        description: "The long identifier used by GPG for this key."
      fingerprint_short:
        type: "string"
        description: ""
      public_key:
        type: "string"
        description: "The public key given to repository users."
    example:
      public_key: "public_key"
      default: true
      fingerprint: "fingerprint"
      active: true
      created_at: "created_at"
      comment: "comment"
      fingerprint_short: "fingerprint_short"
  PackagesUploadNpm:
    type: "object"
    required:
    - "package_file"
    properties:
      npm_dist_tag:
        type: "string"
        example: "latest"
        description: "The default npm dist-tag for this package/version - This will\
          \ replace any other package/version if they are using the same tag."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadNpm"
    example:
      republish: true
      npm_dist_tag: "latest"
      package_file: "y123456789"
      tags: "tags"
  PackagesValidateuploadConda:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadConda"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  Status:
    type: "object"
    required:
    - "detail"
    properties:
      detail:
        type: "string"
        description: "An extended message for the response."
  PackagesValidateuploadNpm:
    type: "object"
    required:
    - "package_file"
    properties:
      npm_dist_tag:
        type: "string"
        example: "latest"
        description: "The default npm dist-tag for this package/version - This will\
          \ replace any other package/version if they are using the same tag."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadNpm"
    example:
      republish: true
      npm_dist_tag: "latest"
      package_file: "y123456789"
      tags: "tags"
  PackagesUploadPython:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadPython"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  PackagesValidateuploadDart:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadDart"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  PackagesUploadTerraform:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "z123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadTerraform"
    example:
      republish: true
      package_file: "z123456789a"
      tags: "tags"
  PackagesValidateuploadRpm:
    type: "object"
    required:
    - "distribution"
    - "package_file"
    properties:
      distribution:
        type: "string"
        example: "el/7"
        description: "The distribution to store the package for."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadRpm"
    example:
      republish: true
      distribution: "el/7"
      package_file: "y123456789"
      tags: "tags"
  PackagesUploadRpm:
    type: "object"
    required:
    - "distribution"
    - "package_file"
    properties:
      distribution:
        type: "string"
        example: "el/7"
        description: "The distribution to store the package for."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadRpm"
    example:
      republish: true
      distribution: "el/7"
      package_file: "y123456789"
      tags: "tags"
  Namespace:
    type: "object"
    properties:
      name:
        type: "string"
        description: ""
      slug:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      type_name:
        type: "string"
        description: ""
    example:
      type_name: "type_name"
      name: "name"
      slug_perm: "slug_perm"
      slug: "slug"
  EntitlementUsageMetrics:
    type: "object"
    required:
    - "tokens"
    properties:
      tokens:
        type: "object"
        example:
          active: 1
          bandwidth:
            average:
              display: "11 B"
              units: "bytes"
              value: 11
            highest:
              display: "11 B"
              units: "bytes"
              value: 11
            lowest:
              display: "11 B"
              units: "bytes"
              value: 11
            total:
              display: "11 B"
              units: "bytes"
              value: 11
          downloads:
            average:
              value: 5
            highest:
              value: 5
            lowest:
              value: 5
            total:
              value: 5
          inactive: 0
          total: 0
        description: ""
        properties: {}
    example:
      tokens:
        active: 1
        bandwidth:
          average:
            display: "11 B"
            units: "bytes"
            value: 11
          highest:
            display: "11 B"
            units: "bytes"
            value: 11
          lowest:
            display: "11 B"
            units: "bytes"
            value: 11
          total:
            display: "11 B"
            units: "bytes"
            value: 11
        downloads:
          average:
            value: 5
          highest:
            value: 5
          lowest:
            value: 5
          total:
            value: 5
        inactive: 0
        total: 0
  PackageCopy:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: "The repository the package will be copied to."
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags:
        type: "object"
        description: "All tags on the package, grouped by tag type. This includes\
          \ immutable tags, but doesn't distinguish them from mutable. To see which\
          \ tags are immutable specifically, see the tags_immutable field."
        properties: {}
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "version"
      tags: "{}"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "name"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 1
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  Distribution:
    type: "object"
    required:
    - "name"
    properties:
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      name:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      slug:
        type: "string"
        description: "The slug identifier for this distribution"
      variants:
        type: "string"
        description: ""
      versions:
        type: "array"
        description: "A list of the versions for this distribution"
        title: "VersionsList"
        items:
          $ref: "#/definitions/distros_versions"
    example:
      format_url: "format_url"
      versions:
      - name: "name"
        slug: "slug"
      - name: "name"
        slug: "slug"
      format: "format"
      name: "name"
      variants: "variants"
      self_url: "self_url"
      slug: "slug"
  PackagesUploadDeb:
    type: "object"
    required:
    - "distribution"
    - "package_file"
    properties:
      changes_file:
        type: "string"
        example: "y123456789"
        description: "The changes archive containing the changes made to the source\
          \ and debian packaging files"
      distribution:
        type: "string"
        example: "ubuntu/xenial"
        description: "The distribution to store the package for."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      sources_file:
        type: "string"
        example: "y123456789"
        description: "The sources archive containing the source code for the binary"
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadDeb"
    example:
      sources_file: "y123456789"
      republish: true
      changes_file: "y123456789"
      distribution: "ubuntu/xenial"
      package_file: "y123456789"
      tags: "tags"
  PackagesUploadHelm:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadHelm"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  PackagesValidateuploadDeb:
    type: "object"
    required:
    - "distribution"
    - "package_file"
    properties:
      changes_file:
        type: "string"
        example: "y123456789"
        description: "The changes archive containing the changes made to the source\
          \ and debian packaging files"
      distribution:
        type: "string"
        example: "ubuntu/xenial"
        description: "The distribution to store the package for."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      sources_file:
        type: "string"
        example: "y123456789"
        description: "The sources archive containing the source code for the binary"
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadDeb"
    example:
      sources_file: "y123456789"
      republish: true
      changes_file: "y123456789"
      distribution: "ubuntu/xenial"
      package_file: "y123456789"
      tags: "tags"
  Package:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: ""
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags:
        type: "object"
        description: "All tags on the package, grouped by tag type. This includes\
          \ immutable tags, but doesn't distinguish them from mutable. To see which\
          \ tags are immutable specifically, see the tags_immutable field."
        properties: {}
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "version"
      tags: "{}"
      license: "license"
      filename: "filename"
      size: 2
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "name"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 5
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 7
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  UserTokenCreate:
    type: "object"
    properties:
      email:
        type: "string"
        description: "Email address to authenticate with"
      password:
        type: "string"
        description: "Password to authenticate with"
    title: "UserTokenCreate"
    example:
      password: "password"
      email: "email"
  PackagesValidateuploadConan:
    type: "object"
    required:
    - "info_file"
    - "manifest_file"
    - "metadata_file"
    - "package_file"
    properties:
      conan_channel:
        type: "string"
        example: "alpha"
        description: "Conan channel."
      conan_prefix:
        type: "string"
        example: "my-repository"
        description: "Conan prefix (User)."
      info_file:
        type: "string"
        example: "y1234456789b"
        description: "The info file is an python file containing the package metadata."
      manifest_file:
        type: "string"
        example: "y1234456789c"
        description: "The info file is an python file containing the package metadata."
      metadata_file:
        type: "string"
        example: "y1234456789a"
        description: "The conan file is an python file containing the package metadata."
      name:
        type: "string"
        example: "conan_package.tgz"
        description: "The name of this package."
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      version:
        type: "string"
        example: "1.0.0"
        description: "The raw version for this package."
    title: "PackagesValidate-uploadConan"
    example:
      republish: true
      name: "conan_package.tgz"
      metadata_file: "y1234456789a"
      package_file: "x123456789a"
      conan_prefix: "my-repository"
      version: "1.0.0"
      conan_channel: "alpha"
      info_file: "y1234456789b"
      manifest_file: "y1234456789c"
      tags: "tags"
  Organization:
    type: "object"
    properties:
      country:
        type: "string"
        description: ""
      created_at:
        type: "string"
        description: ""
      location:
        type: "string"
        description: "The city/town/area your organization is based in."
      name:
        type: "string"
        description: "A descriptive name for your organization."
      slug:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      tagline:
        type: "string"
        description: "A short public descriptive for your organization."
    example:
      country: "country"
      name: "name"
      created_at: "created_at"
      tagline: "tagline"
      location: "location"
      slug_perm: "slug_perm"
      slug: "slug"
  QuotaHistory:
    type: "object"
    required:
    - "history"
    properties:
      history:
        type: "array"
        example:
        - days: 30
          display:
            downloaded:
              limit: "2 TB"
              percentage: "0.0%"
              used: "0 B"
            storage_used:
              limit: "1 TB"
              percentage: "0.109%"
              used: "1.1 GB"
            uploaded:
              limit: "Unlimited"
              percentage: "∞"
              used: "0 B"
          end: "2020-10-10 12:35:23+00:00"
          plan: "Package (Velocity)"
          raw:
            downloaded:
              limit: 2199023255552
              percentage: 0.0
              used: 0
            storage_used:
              limit: 1099511627776
              percentage: 0.109
              used: 1197653687
            uploaded:
              limit: ""
              percentage: 0.0
              used: 0
          start: "2020-09-10 12:35:23+00:00"
        description: ""
        title: "HistoryList"
        items:
          $ref: "#/definitions/QuotaHistory_history"
    example:
      history:
      - days: 30
        display:
          downloaded:
            limit: "2 TB"
            percentage: "0.0%"
            used: "0 B"
          storage_used:
            limit: "1 TB"
            percentage: "0.109%"
            used: "1.1 GB"
          uploaded:
            limit: "Unlimited"
            percentage: "∞"
            used: "0 B"
        end: "2020-10-10 12:35:23+00:00"
        plan: "Package (Velocity)"
        raw:
          downloaded:
            limit: 2199023255552
            percentage: 0.0
            used: 0
          storage_used:
            limit: 1099511627776
            percentage: 0.109
            used: 1197653687
          uploaded:
            limit: ""
            percentage: 0.0
            used: 0
        start: "2020-09-10 12:35:23+00:00"
  PackagesValidateuploadPython:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadPython"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  VagrantPackageUpload:
    type: "object"
    required:
    - "name"
    - "provider"
    - "version"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        example: "tcl"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      provider:
        type: "string"
        example: "virtualbox"
        description: "The virtual machine provider for the box."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: ""
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        example: "1.0"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "1.0"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "tcl"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 1
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      provider: "virtualbox"
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  PackageStatus:
    type: "object"
    properties:
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      self_url:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
    example:
      status_str: "status_str"
      sync_progress: 0
      is_sync_awaiting: true
      is_sync_completed: true
      self_url: "self_url"
      is_sync_in_flight: true
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage_updated_at: "stage_updated_at"
      stage: "stage"
      sync_finished_at: "sync_finished_at"
      is_sync_failed: true
      status_reason: "status_reason"
      status: "status"
      status_updated_at: "status_updated_at"
  PackagesValidateuploadP2:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadP2"
    example:
      republish: true
      package_file: "package_file"
      tags: "tags"
  PackagesUploadAlpine:
    type: "object"
    required:
    - "distribution"
    - "package_file"
    properties:
      distribution:
        type: "string"
        example: "alpine/v3.8"
        description: "The distribution to store the package for."
      package_file:
        type: "string"
        example: "a123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadAlpine"
    example:
      republish: true
      distribution: "alpine/v3.8"
      package_file: "a123456789"
      tags: "tags"
  VulnerabilityScanResults:
    type: "object"
    required:
    - "identifier"
    - "package"
    - "scan"
    - "scan_id"
    properties:
      created_at:
        type: "string"
        example: "2020-01-01T12:00:00.000000Z"
        description: "The time this scan result was stored."
      has_vulnerabilities:
        type: "boolean"
        example: true
        description: "Do the results contain any known vulnerabilities?"
      identifier:
        type: "string"
        example: "HKmoU6OHbyj4ha3u"
        description: ""
      max_severity:
        type: "string"
        example: "HIGH"
        description: ""
      num_vulnerabilities:
        type: "integer"
        example: 2
        description: ""
      package:
        type: "object"
        example:
          identifier: "XEtJh5CTzcr3"
          name: "insecure-image"
          version: "d391c46c9c1a3b9a4c772213bc07e8d9e283775fddf6c7931f702f65cf7e6469"
        description: ""
        properties: {}
      scan:
        type: "object"
        example:
          results:
          - affected_version: "4.19.67-2+deb10u2"
            description: "A memory leak in the rsi_send_beacon() function in drivers/net/wireless/rsi/rsi_91x_mgmt.c\
              \ in the Linux kernel through 5.3.11 allows attackers to cause a denial\
              \ of service (memory consumption) by triggering rsi_prepare_beacon()\
              \ failures, aka CID-d563131ef23c."
            fixed_version: "4.19.98-1"
            package_name: "linux-libc-dev"
            references:
            - "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19071"
            - "https://github.com/torvalds/linux/commit/d563131ef23cbc756026f839a82598c8445bc45f"
            - "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3PSDE6PTOTVBK2YTKB2TFQP2SUBVSNF/"
            - "https://security.netapp.com/advisory/ntap-20191205-0001/"
            - "https://usn.ubuntu.com/4258-1/"
            - "https://usn.ubuntu.com/usn/usn-4258-1"
            severity: "HIGH"
            severity_source: "debian"
            vulnerability_id: "CVE-2019-19071"
          - affected_version: "5.0-4"
            description: ""
            fixed_version: ""
            package_name: "bash"
            references: []
            severity: "LOW"
            severity_source: "debian"
            vulnerability_id: "TEMP-0841856-B18BAF"
          target: "/oci (debian 10.2)"
          type: "debian"
        description: ""
        properties: {}
      scan_id:
        type: "integer"
        example: 1
        description: ""
    example:
      identifier: "HKmoU6OHbyj4ha3u"
      max_severity: "HIGH"
      package:
        identifier: "XEtJh5CTzcr3"
        name: "insecure-image"
        version: "d391c46c9c1a3b9a4c772213bc07e8d9e283775fddf6c7931f702f65cf7e6469"
      has_vulnerabilities: true
      scan:
        results:
        - affected_version: "4.19.67-2+deb10u2"
          description: "A memory leak in the rsi_send_beacon() function in drivers/net/wireless/rsi/rsi_91x_mgmt.c\
            \ in the Linux kernel through 5.3.11 allows attackers to cause a denial\
            \ of service (memory consumption) by triggering rsi_prepare_beacon() failures,\
            \ aka CID-d563131ef23c."
          fixed_version: "4.19.98-1"
          package_name: "linux-libc-dev"
          references:
          - "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19071"
          - "https://github.com/torvalds/linux/commit/d563131ef23cbc756026f839a82598c8445bc45f"
          - "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3PSDE6PTOTVBK2YTKB2TFQP2SUBVSNF/"
          - "https://security.netapp.com/advisory/ntap-20191205-0001/"
          - "https://usn.ubuntu.com/4258-1/"
          - "https://usn.ubuntu.com/usn/usn-4258-1"
          severity: "HIGH"
          severity_source: "debian"
          vulnerability_id: "CVE-2019-19071"
        - affected_version: "5.0-4"
          description: ""
          fixed_version: ""
          package_name: "bash"
          references: []
          severity: "LOW"
          severity_source: "debian"
          vulnerability_id: "TEMP-0841856-B18BAF"
        target: "/oci (debian 10.2)"
        type: "debian"
      created_at: "2020-01-01T12:00:00.000000Z"
      num_vulnerabilities: 2
      scan_id: 1
  PackagesUploadRaw:
    type: "object"
    required:
    - "package_file"
    properties:
      content_type:
        type: "string"
        description: "A custom content/media (also known as MIME) type to be sent\
          \ when downloading this file. By default Cloudsmith will attempt to detect\
          \ the type, but if you need to override it, you can specify it here."
      description:
        type: "string"
        example: "Everything about packaging files."
        description: "A textual description of this package."
      name:
        type: "string"
        example: "my-package"
        description: "The name of this package."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      summary:
        type: "string"
        example: "My Package File"
        description: "A one-liner synopsis of this package."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      version:
        type: "string"
        example: "1.0"
        description: "The raw version for this package."
    title: "PackagesUploadRaw"
    example:
      summary: "My Package File"
      content_type: "content_type"
      republish: true
      name: "my-package"
      description: "Everything about packaging files."
      package_file: "y123456789"
      version: "1.0"
      tags: "tags"
  PackagesUploadMaven:
    type: "object"
    required:
    - "package_file"
    properties:
      artifact_id:
        type: "string"
        example: "cloudsmith-example"
        description: "The ID of the artifact."
      group_id:
        type: "string"
        example: "io.cloudsmith.example"
        description: "Artifact's group ID."
      javadoc_file:
        type: "string"
        example: "y1234456789c"
        description: "Adds bundled Java documentation to the Maven package"
      package_file:
        type: "string"
        example: "y1234456789a"
        description: "The primary file for the package."
      packaging:
        type: "string"
        description: "Artifact's Maven packaging type."
      pom_file:
        type: "string"
        example: "y1234456789b"
        description: "The POM file is an XML file containing the Maven coordinates."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      sources_file:
        type: "string"
        example: "y1234456789d"
        description: "Adds bundled Java source code to the Maven package."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      tests_file:
        type: "string"
        example: "y1234456789e"
        description: "Adds bundled Java tests to the Maven package."
      version:
        type: "string"
        description: "The raw version for this package."
    title: "PackagesUploadMaven"
    example:
      sources_file: "y1234456789d"
      tests_file: "y1234456789e"
      republish: true
      group_id: "io.cloudsmith.example"
      javadoc_file: "y1234456789c"
      packaging: "packaging"
      artifact_id: "cloudsmith-example"
      package_file: "y1234456789a"
      version: "version"
      pom_file: "y1234456789b"
      tags: "tags"
  ResourcesRateCheck:
    type: "object"
    properties:
      resources:
        type: "object"
        example:
          core:
            interval: 5.123456789
            limit: 3600
            remaining: 3595
            reset: 1646245156
            reset_iso_8601: "2022-03-02T18:19:16.259727+00:00"
            throttled: false
        description: "Rate limit values per resource"
        properties: {}
    example:
      resources:
        core:
          interval: 5.123456789
          limit: 3600
          remaining: 3595
          reset: 1646245156
          reset_iso_8601: "2022-03-02T18:19:16.259727+00:00"
          throttled: false
  UserBrief:
    type: "object"
    properties:
      authenticated:
        type: "boolean"
        example: true
        description: "If true then you're logged in as a user."
      email:
        type: "string"
        example: "user@example.com"
        description: "Your email address that we use to contact you. This is only\
          \ visible to you."
      name:
        type: "string"
        example: "Example User"
        description: "The full name of the user (if any)."
      profile_url:
        type: "string"
        description: "The URL for the full profile of the user."
      self_url:
        type: "string"
        description: ""
      slug:
        type: "string"
        example: "example-user"
        description: ""
      slug_perm:
        type: "string"
        example: "x1y2z3z4y"
        description: ""
    example:
      authenticated: true
      profile_url: "profile_url"
      name: "Example User"
      slug_perm: "x1y2z3z4y"
      email: "user@example.com"
      self_url: "self_url"
      slug: "example-user"
  PackagesValidateuploadCocoapods:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "z123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadCocoapods"
    example:
      republish: true
      package_file: "z123456789"
      tags: "tags"
  PackagesUploadNuget:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y1234456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      symbols_file:
        type: "string"
        example: "y1234456789b"
        description: "Attaches a symbols file to the package."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadNuget"
    example:
      republish: true
      symbols_file: "y1234456789b"
      package_file: "y1234456789a"
      tags: "tags"
  PackagesUploadVagrant:
    type: "object"
    required:
    - "name"
    - "package_file"
    - "provider"
    - "version"
    properties:
      name:
        type: "string"
        example: "tcl"
        description: "The name of this package."
      package_file:
        type: "string"
        example: "y123456789x"
        description: "The primary file for the package."
      provider:
        type: "string"
        example: "virtualbox"
        description: "The virtual machine provider for the box."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      version:
        type: "string"
        example: "1.0"
        description: "The raw version for this package."
    title: "PackagesUploadVagrant"
    example:
      republish: true
      provider: "virtualbox"
      name: "tcl"
      package_file: "y123456789x"
      version: "1.0"
      tags: "tags"
  RepositoryTokenSync_tokens:
    type: "object"
    properties:
      clients:
        type: "integer"
        description: ""
      created_at:
        type: "string"
        description: "The datetime the token was updated at."
      created_by:
        type: "string"
        description: ""
      created_by_url:
        type: "string"
        description: ""
      default:
        type: "boolean"
        description: "If selected this is the default token for this repository."
      disable_url:
        type: "string"
        description: ""
      downloads:
        type: "integer"
        description: ""
      enable_url:
        type: "string"
        description: ""
      eula_accepted:
        type: "object"
        description: ""
        properties: {}
      eula_accepted_at:
        type: "string"
        description: "The datetime the EULA was accepted at."
      eula_accepted_from:
        type: "string"
        description: ""
      eula_required:
        type: "boolean"
        description: "If checked, a EULA acceptance is required for this token."
      has_limits:
        type: "boolean"
        description: ""
      identifier:
        type: "integer"
        description: ""
      is_active:
        type: "boolean"
        description: "If enabled, the token will allow downloads based on configured\
          \ restrictions (if any)."
      is_limited:
        type: "boolean"
        description: ""
      limit_bandwidth:
        type: "integer"
        description: "The maximum download bandwidth allowed for the token. Values\
          \ are expressed as the selected unit of bandwidth. Please note that since\
          \ downloads are calculated asynchronously (after the download happens),\
          \ the limit may not be imposed immediately but at a later point. "
      limit_bandwidth_unit:
        type: "string"
        description: ""
      limit_date_range_from:
        type: "string"
        description: "The starting date/time the token is allowed to be used from."
      limit_date_range_to:
        type: "string"
        description: "The ending date/time the token is allowed to be used until."
      limit_num_clients:
        type: "integer"
        description: "The maximum number of unique clients allowed for the token.\
          \ Please note that since clients are calculated asynchronously (after the\
          \ download happens), the limit may not be imposed immediately but at a later\
          \ point."
      limit_num_downloads:
        type: "integer"
        description: "The maximum number of downloads allowed for the token. Please\
          \ note that since downloads are calculated asynchronously (after the download\
          \ happens), the limit may not be imposed immediately but at a later point."
      limit_package_query:
        type: "string"
        description: "The package-based search query to apply to restrict downloads\
          \ to. This uses the same syntax as the standard search used for repositories,\
          \ and also supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. This will still allow access to non-package files, such\
          \ as metadata."
      limit_path_query:
        type: "string"
        description: "The path-based search query to apply to restrict downloads to.\
          \ This supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. The path evaluated does not include the domain name, the\
          \ namespace, the entitlement code used, the package format, etc. and it\
          \ always starts with a forward slash."
      metadata:
        type: "string"
        description: ""
      name:
        type: "string"
        description: ""
      refresh_url:
        type: "string"
        description: ""
      reset_url:
        type: "string"
        description: ""
      scheduled_reset_at:
        type: "string"
        description: "The time at which the scheduled reset period has elapsed and\
          \ the token limits were automatically reset to zero."
      scheduled_reset_period:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      token:
        type: "string"
        description: ""
      updated_at:
        type: "string"
        description: "The datetime the token was updated at."
      updated_by:
        type: "string"
        description: ""
      updated_by_url:
        type: "string"
        description: ""
      usage:
        type: "string"
        description: ""
      user:
        type: "string"
        description: ""
      user_url:
        type: "string"
        description: ""
    example:
      limit_date_range_to: "limit_date_range_to"
      metadata: "metadata"
      clients: 0
      limit_bandwidth_unit: "limit_bandwidth_unit"
      scheduled_reset_at: "scheduled_reset_at"
      usage: "usage"
      limit_bandwidth: 5
      created_at: "created_at"
      limit_num_clients: 5
      eula_accepted_at: "eula_accepted_at"
      limit_package_query: "limit_package_query"
      limit_path_query: "limit_path_query"
      default: true
      updated_at: "updated_at"
      downloads: 6
      user_url: "user_url"
      limit_date_range_from: "limit_date_range_from"
      reset_url: "reset_url"
      limit_num_downloads: 2
      eula_required: true
      refresh_url: "refresh_url"
      scheduled_reset_period: "scheduled_reset_period"
      identifier: 1
      is_active: true
      eula_accepted: "{}"
      eula_accepted_from: "eula_accepted_from"
      created_by_url: "created_by_url"
      is_limited: true
      slug_perm: "slug_perm"
      created_by: "created_by"
      enable_url: "enable_url"
      self_url: "self_url"
      token: "token"
      updated_by_url: "updated_by_url"
      disable_url: "disable_url"
      name: "name"
      updated_by: "updated_by"
      has_limits: true
      user: "user"
  PackagesValidateuploadComposer:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadComposer"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  EntitlementsRefresh:
    type: "object"
    properties:
      eula_required:
        type: "boolean"
        description: "If checked, a EULA acceptance is required for this token."
      is_active:
        type: "boolean"
        description: "If enabled, the token will allow downloads based on configured\
          \ restrictions (if any)."
      limit_bandwidth:
        type: "integer"
        description: "The maximum download bandwidth allowed for the token. Values\
          \ are expressed as the selected unit of bandwidth. Please note that since\
          \ downloads are calculated asynchronously (after the download happens),\
          \ the limit may not be imposed immediately but at a later point. "
      limit_bandwidth_unit:
        type: "string"
        description: "None"
      limit_date_range_from:
        type: "string"
        description: "The starting date/time the token is allowed to be used from."
      limit_date_range_to:
        type: "string"
        description: "The ending date/time the token is allowed to be used until."
      limit_num_clients:
        type: "integer"
        description: "The maximum number of unique clients allowed for the token.\
          \ Please note that since clients are calculated asynchronously (after the\
          \ download happens), the limit may not be imposed immediately but at a later\
          \ point."
      limit_num_downloads:
        type: "integer"
        description: "The maximum number of downloads allowed for the token. Please\
          \ note that since downloads are calculated asynchronously (after the download\
          \ happens), the limit may not be imposed immediately but at a later point."
      limit_package_query:
        type: "string"
        description: "The package-based search query to apply to restrict downloads\
          \ to. This uses the same syntax as the standard search used for repositories,\
          \ and also supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. This will still allow access to non-package files, such\
          \ as metadata."
      limit_path_query:
        type: "string"
        description: "The path-based search query to apply to restrict downloads to.\
          \ This supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. The path evaluated does not include the domain name, the\
          \ namespace, the entitlement code used, the package format, etc. and it\
          \ always starts with a forward slash."
      metadata:
        type: "object"
        description: "None"
        properties: {}
      scheduled_reset_at:
        type: "string"
        description: "The time at which the scheduled reset period has elapsed and\
          \ the token limits were automatically reset to zero."
      scheduled_reset_period:
        type: "string"
        description: "None"
      token:
        type: "string"
        description: "None"
    title: "EntitlementsRefresh"
    example:
      limit_date_range_to: "limit_date_range_to"
      metadata: "{}"
      is_active: true
      limit_bandwidth_unit: "limit_bandwidth_unit"
      scheduled_reset_at: "scheduled_reset_at"
      limit_bandwidth: 0
      limit_num_clients: 6
      limit_package_query: "limit_package_query"
      limit_path_query: "limit_path_query"
      token: "token"
      limit_date_range_from: "limit_date_range_from"
      limit_num_downloads: 1
      eula_required: true
      scheduled_reset_period: "scheduled_reset_period"
  PackagesValidateuploadRuby:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadRuby"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  PackageFilePartsUpload:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The identifier for the file to use uploading parts."
      upload_querystring:
        type: "string"
        description: "The querystring to use for the next-step PUT upload."
      upload_url:
        type: "string"
        description: "The URL to use for the next-step PUT upload"
    example:
      identifier: "identifier"
      upload_querystring: "upload_querystring"
      upload_url: "upload_url"
  Repository:
    type: "object"
    required:
    - "name"
    properties:
      cdn_url:
        type: "string"
        description: "Base URL from which packages and other artifacts are downloaded."
      created_at:
        type: "string"
        description: ""
      deleted_at:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A description of the repository's purpose/contents."
      gpg_keys:
        type: "array"
        description: ""
        title: "Gpg keysList"
        items:
          $ref: "#/definitions/repos_gpg_keys"
      index_files:
        type: "boolean"
        description: "If checked, files contained in packages will be indexed, which\
          \ increase the synchronisation time required for packages. Note that it\
          \ is recommended you keep this enabled unless the synchronisation time is\
          \ significantly impacted."
      is_open_source:
        type: "boolean"
        description: ""
      is_private:
        type: "boolean"
        description: ""
      is_public:
        type: "boolean"
        description: ""
      name:
        type: "string"
        description: "A descriptive name for the repository."
      namespace:
        type: "string"
        description: "Namespace to which this repository belongs."
      namespace_url:
        type: "string"
        description: "API endpoint where data about this namespace can be retrieved."
      num_downloads:
        type: "integer"
        description: "The number of downloads for packages in the repository."
      package_count:
        type: "integer"
        description: "The number of packages in the repository."
      package_group_count:
        type: "integer"
        description: "The number of groups in the repository."
      repository_type:
        type: "string"
        description: "The repository type changes how it is accessed and billed. Private\
          \ repositories can only be used on paid plans, but are visible only to you\
          \ or authorised delegates. Open-Source repositories are always visible to\
          \ everyone and are restricted by licensing, but are free to use and come\
          \ with generous bandwidth/storage. You can only select Open-Source at repository\
          \ creation time."
      repository_type_str:
        type: "string"
        description: "The repository type changes how it is accessed and billed. Private\
          \ repositories can only be used on paid plans, but are visible only to you\
          \ or authorised delegates. Public repositories are free to use on all plans\
          \ and visible to all Cloudsmith users."
      self_html_url:
        type: "string"
        description: "Website URL for this repository."
      self_url:
        type: "string"
        description: "API endpoint where data about this repository can be retrieved."
      size:
        type: "integer"
        description: "The calculated size of the repository."
      size_str:
        type: "string"
        description: "The calculated size of the repository (human readable)."
      slug:
        type: "string"
        description: "The slug identifies the repository in URIs."
      slug_perm:
        type: "string"
        description: "The slug_perm immutably identifies the repository. It will never\
          \ change once a repository has been created."
      storage_region:
        type: "string"
        description: "The Cloudsmith region in which package files are stored."
    example:
      is_private: true
      created_at: "created_at"
      description: "description"
      namespace_url: "namespace_url"
      self_html_url: "self_html_url"
      slug_perm: "slug_perm"
      deleted_at: "deleted_at"
      index_files: true
      num_downloads: 0
      repository_type: "repository_type"
      self_url: "self_url"
      package_count: 6
      storage_region: "storage_region"
      size_str: "size_str"
      package_group_count: 1
      size: 5
      cdn_url: "cdn_url"
      repository_type_str: "repository_type_str"
      gpg_keys:
      - public_key: "public_key"
        default: true
        fingerprint: "fingerprint"
        active: true
        created_at: "created_at"
        comment: "comment"
        fingerprint_short: "fingerprint_short"
      - public_key: "public_key"
        default: true
        fingerprint: "fingerprint"
        active: true
        created_at: "created_at"
        comment: "comment"
        fingerprint_short: "fingerprint_short"
      is_open_source: true
      is_public: true
      name: "name"
      namespace: "namespace"
      slug: "slug"
  PackageUsageMetrics:
    type: "object"
    required:
    - "packages"
    properties:
      packages:
        type: "object"
        example:
          active: 1
          bandwidth:
            average:
              display: "11 B"
              units: "bytes"
              value: 11
            highest:
              display: "11 B"
              units: "bytes"
              value: 11
            lowest:
              display: "11 B"
              units: "bytes"
              value: 11
            total:
              display: "11 B"
              units: "bytes"
              value: 11
          downloads:
            average:
              value: 5
            highest:
              value: 5
            lowest:
              value: 5
            total:
              value: 5
          inactive: 0
          total: 0
        description: ""
        properties: {}
    example:
      packages:
        active: 1
        bandwidth:
          average:
            display: "11 B"
            units: "bytes"
            value: 11
          highest:
            display: "11 B"
            units: "bytes"
            value: 11
          lowest:
            display: "11 B"
            units: "bytes"
            value: 11
          total:
            display: "11 B"
            units: "bytes"
            value: 11
        downloads:
          average:
            value: 5
          highest:
            value: 5
          lowest:
            value: 5
          total:
            value: 5
        inactive: 0
        total: 0
  ReposCreate:
    type: "object"
    required:
    - "name"
    properties:
      description:
        type: "string"
        description: "A description of the repository's purpose/contents."
      index_files:
        type: "boolean"
        description: "If checked, files contained in packages will be indexed, which\
          \ increase the synchronisation time required for packages. Note that it\
          \ is recommended you keep this enabled unless the synchronisation time is\
          \ significantly impacted."
      name:
        type: "string"
        description: "A descriptive name for the repository."
      repository_type_str:
        type: "string"
        description: "The repository type changes how it is accessed and billed. Private\
          \ repositories can only be used on paid plans, but are visible only to you\
          \ or authorised delegates. Public repositories are free to use on all plans\
          \ and visible to all Cloudsmith users."
      slug:
        type: "string"
        description: "The slug identifies the repository in URIs."
      storage_region:
        type: "string"
        description: "The Cloudsmith region in which package files are stored."
    title: "ReposCreate"
    example:
      storage_region: "storage_region"
      repository_type_str: "repository_type_str"
      name: "name"
      description: "description"
      index_files: true
      slug: "slug"
  formats_distributions:
    type: "object"
    properties:
      name:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      slug:
        type: "string"
        description: "The slug identifier for this distribution"
      variants:
        type: "string"
        description: ""
    example:
      name: "name"
      variants: "variants"
      self_url: "self_url"
      slug: "slug"
  PackagesValidateuploadDocker:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadDocker"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  PackageDependencies:
    type: "object"
    required:
    - "dependencies"
    properties:
      dependencies:
        type: "array"
        description: ""
        title: "DependenciesList"
        items:
          $ref: "#/definitions/PackageDependencies_dependencies"
    example:
      dependencies:
      - dep_type: "dep_type"
        name: "name"
        version: "version"
        operator: "operator"
      - dep_type: "dep_type"
        name: "name"
        version: "version"
        operator: "operator"
  PackageMove:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: "The repository the package will be moved to."
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags:
        type: "object"
        description: "All tags on the package, grouped by tag type. This includes\
          \ immutable tags, but doesn't distinguish them from mutable. To see which\
          \ tags are immutable specifically, see the tags_immutable field."
        properties: {}
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "version"
      tags: "{}"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "name"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 1
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  FilesValidate:
    type: "object"
    required:
    - "filename"
    properties:
      filename:
        type: "string"
        description: "Filename for the package file upload."
      md5_checksum:
        type: "string"
        description: "MD5 checksum for a POST-based package file upload."
      method:
        type: "string"
        description: "The method to use for package file upload."
      sha256_checksum:
        type: "string"
        description: "SHA256 checksum for a PUT-based package file upload."
    title: "FilesValidate"
    example:
      sha256_checksum: "sha256_checksum"
      filename: "filename"
      method: "method"
      md5_checksum: "md5_checksum"
  AlpinePackageUpload:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: ""
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "version"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "name"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 1
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  PackagesValidateuploadCran:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadCran"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  PackagesMove:
    type: "object"
    required:
    - "destination"
    properties:
      destination:
        type: "string"
        description: "None"
    title: "PackagesMove"
    example:
      destination: "destination"
  PackagesUploadP2:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadP2"
    example:
      republish: true
      package_file: "package_file"
      tags: "tags"
  PackagesUploadRuby:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadRuby"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  webhooksownerrepo_templates:
    type: "object"
    properties:
      event:
        type: "string"
        description: ""
      template:
        type: "string"
        description: ""
    example:
      template: "template"
      event: "event"
  PackagesUploadDocker:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadDocker"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  packagesownerrepo_architectures:
    type: "object"
    properties:
      description:
        type: "string"
        description: ""
      name:
        type: "string"
        description: ""
    example:
      name: "name"
      description: "description"
  StatusBasic:
    type: "object"
    properties:
      detail:
        type: "string"
        example: "Cloudsmith API is operational."
        description: "The message describing the state of the API."
      version:
        type: "string"
        example: "1.33.7"
        description: "The current version for the Cloudsmith service."
    example:
      detail: "Cloudsmith API is operational."
      version: "1.33.7"
  ReposPartialUpdate:
    type: "object"
    properties:
      description:
        type: "string"
        description: "A description of the repository's purpose/contents."
      index_files:
        type: "boolean"
        description: "If checked, files contained in packages will be indexed, which\
          \ increase the synchronisation time required for packages. Note that it\
          \ is recommended you keep this enabled unless the synchronisation time is\
          \ significantly impacted."
      name:
        type: "string"
        description: "A descriptive name for the repository."
      repository_type_str:
        type: "string"
        description: "The repository type changes how it is accessed and billed. Private\
          \ repositories can only be used on paid plans, but are visible only to you\
          \ or authorised delegates. Public repositories are free to use on all plans\
          \ and visible to all Cloudsmith users."
      slug:
        type: "string"
        description: "The slug identifies the repository in URIs."
    title: "ReposPartialUpdate"
    example:
      repository_type_str: "repository_type_str"
      name: "name"
      description: "description"
      index_files: true
      slug: "slug"
  PackagesUploadCran:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadCran"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  RawPackageUpload:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        example: "Everything about packaging files."
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        example: "my-package"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: ""
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        example: "My Package File"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        example: "1.0"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "1.0"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "my-package"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 1
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "Everything about packaging files."
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "My Package File"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  UserAuthToken:
    type: "object"
    properties:
      token:
        type: "string"
        example: "y4682jh19cqf0b2ty4682jh19cqf0b2t"
        description: "API token for the authenticated user"
    example:
      token: "y4682jh19cqf0b2ty4682jh19cqf0b2t"
  PackagesUploadComposer:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadComposer"
    example:
      republish: true
      package_file: "y123456789"
      tags: "tags"
  PackagesValidateuploadGo:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadGo"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  FilesCreate:
    type: "object"
    required:
    - "filename"
    properties:
      filename:
        type: "string"
        description: "Filename for the package file upload."
      md5_checksum:
        type: "string"
        description: "MD5 checksum for a POST-based package file upload."
      method:
        type: "string"
        description: "The method to use for package file upload."
      sha256_checksum:
        type: "string"
        description: "SHA256 checksum for a PUT-based package file upload."
    title: "FilesCreate"
    example:
      sha256_checksum: "sha256_checksum"
      filename: "filename"
      method: "method"
      md5_checksum: "md5_checksum"
  PackagesUploadGo:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadGo"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  FilesComplete:
    type: "object"
    required:
    - "filename"
    properties:
      filename:
        type: "string"
        description: "Filename for the package file upload."
      md5_checksum:
        type: "string"
        description: "MD5 checksum for a POST-based package file upload."
      method:
        type: "string"
        description: "The method to use for package file upload."
      sha256_checksum:
        type: "string"
        description: "SHA256 checksum for a PUT-based package file upload."
    title: "FilesComplete"
    example:
      sha256_checksum: "sha256_checksum"
      filename: "filename"
      method: "method"
      md5_checksum: "md5_checksum"
  packagesownerrepo_files:
    type: "object"
    properties:
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      downloads:
        type: "integer"
        description: ""
      filename:
        type: "string"
        description: ""
      is_downloadable:
        type: "boolean"
        description: ""
      is_primary:
        type: "boolean"
        description: ""
      is_synchronised:
        type: "boolean"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the file."
      slug_perm:
        type: "string"
        description: ""
      tag:
        type: "string"
        description: "Freeform descriptor that describes what the file is."
    example:
      checksum_sha512: "checksum_sha512"
      checksum_sha1: "checksum_sha1"
      checksum_sha256: "checksum_sha256"
      is_primary: true
      checksum_md5: "checksum_md5"
      slug_perm: "slug_perm"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      downloads: 1
      is_synchronised: true
      is_downloadable: true
      signature_url: "signature_url"
      tag: "tag"
  PackagesUploadCargo:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadCargo"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  PackagesValidateuploadMaven:
    type: "object"
    required:
    - "package_file"
    properties:
      artifact_id:
        type: "string"
        example: "cloudsmith-example"
        description: "The ID of the artifact."
      group_id:
        type: "string"
        example: "io.cloudsmith.example"
        description: "Artifact's group ID."
      javadoc_file:
        type: "string"
        example: "y1234456789c"
        description: "Adds bundled Java documentation to the Maven package"
      package_file:
        type: "string"
        example: "y1234456789a"
        description: "The primary file for the package."
      packaging:
        type: "string"
        description: "Artifact's Maven packaging type."
      pom_file:
        type: "string"
        example: "y1234456789b"
        description: "The POM file is an XML file containing the Maven coordinates."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      sources_file:
        type: "string"
        example: "y1234456789d"
        description: "Adds bundled Java source code to the Maven package."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      tests_file:
        type: "string"
        example: "y1234456789e"
        description: "Adds bundled Java tests to the Maven package."
      version:
        type: "string"
        description: "The raw version for this package."
    title: "PackagesValidate-uploadMaven"
    example:
      sources_file: "y1234456789d"
      tests_file: "y1234456789e"
      republish: true
      group_id: "io.cloudsmith.example"
      javadoc_file: "y1234456789c"
      packaging: "packaging"
      artifact_id: "cloudsmith-example"
      package_file: "y1234456789a"
      version: "version"
      pom_file: "y1234456789b"
      tags: "tags"
  PackagesUploadLuarocks:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadLuarocks"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  EntitlementsPartialUpdate:
    type: "object"
    properties:
      eula_required:
        type: "boolean"
        description: "If checked, a EULA acceptance is required for this token."
      is_active:
        type: "boolean"
        description: "If enabled, the token will allow downloads based on configured\
          \ restrictions (if any)."
      limit_bandwidth:
        type: "integer"
        description: "The maximum download bandwidth allowed for the token. Values\
          \ are expressed as the selected unit of bandwidth. Please note that since\
          \ downloads are calculated asynchronously (after the download happens),\
          \ the limit may not be imposed immediately but at a later point. "
      limit_bandwidth_unit:
        type: "string"
        description: "None"
      limit_date_range_from:
        type: "string"
        description: "The starting date/time the token is allowed to be used from."
      limit_date_range_to:
        type: "string"
        description: "The ending date/time the token is allowed to be used until."
      limit_num_clients:
        type: "integer"
        description: "The maximum number of unique clients allowed for the token.\
          \ Please note that since clients are calculated asynchronously (after the\
          \ download happens), the limit may not be imposed immediately but at a later\
          \ point."
      limit_num_downloads:
        type: "integer"
        description: "The maximum number of downloads allowed for the token. Please\
          \ note that since downloads are calculated asynchronously (after the download\
          \ happens), the limit may not be imposed immediately but at a later point."
      limit_package_query:
        type: "string"
        description: "The package-based search query to apply to restrict downloads\
          \ to. This uses the same syntax as the standard search used for repositories,\
          \ and also supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. This will still allow access to non-package files, such\
          \ as metadata."
      limit_path_query:
        type: "string"
        description: "The path-based search query to apply to restrict downloads to.\
          \ This supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. The path evaluated does not include the domain name, the\
          \ namespace, the entitlement code used, the package format, etc. and it\
          \ always starts with a forward slash."
      metadata:
        type: "object"
        description: "None"
        properties: {}
      name:
        type: "string"
        description: "None"
      scheduled_reset_at:
        type: "string"
        description: "The time at which the scheduled reset period has elapsed and\
          \ the token limits were automatically reset to zero."
      scheduled_reset_period:
        type: "string"
        description: "None"
      token:
        type: "string"
        description: "None"
    title: "EntitlementsPartialUpdate"
    example:
      limit_date_range_to: "limit_date_range_to"
      metadata: "{}"
      is_active: true
      limit_bandwidth_unit: "limit_bandwidth_unit"
      scheduled_reset_at: "scheduled_reset_at"
      limit_bandwidth: 0
      limit_num_clients: 6
      limit_package_query: "limit_package_query"
      limit_path_query: "limit_path_query"
      token: "token"
      name: "name"
      limit_date_range_from: "limit_date_range_from"
      limit_num_downloads: 1
      eula_required: true
      scheduled_reset_period: "scheduled_reset_period"
  MavenPackageUpload:
    type: "object"
    properties:
      architectures:
        type: "array"
        description: ""
        title: "ArchitecturesList"
        items:
          $ref: "#/definitions/packagesownerrepo_architectures"
      artifact_id:
        type: "string"
        example: "cloudsmith-example"
        description: "The ID of the artifact."
      cdn_url:
        type: "string"
        description: ""
      checksum_md5:
        type: "string"
        description: ""
      checksum_sha1:
        type: "string"
        description: ""
      checksum_sha256:
        type: "string"
        description: ""
      checksum_sha512:
        type: "string"
        description: ""
      dependencies_checksum_md5:
        type: "string"
        description: "A checksum of all of the package's dependencies."
      dependencies_url:
        type: "string"
        description: ""
      description:
        type: "string"
        description: "A textual description of this package."
      distro:
        type: "object"
        description: ""
        properties: {}
      distro_version:
        type: "object"
        description: ""
        properties: {}
      downloads:
        type: "integer"
        description: ""
      epoch:
        type: "integer"
        description: "The epoch of the package version (if any)."
      extension:
        type: "string"
        description: ""
      filename:
        type: "string"
        description: ""
      files:
        type: "array"
        description: ""
        title: "FilesList"
        items:
          $ref: "#/definitions/packagesownerrepo_files"
      format:
        type: "string"
        description: ""
      format_url:
        type: "string"
        description: ""
      group_id:
        type: "string"
        example: "io.cloudsmith.example"
        description: "Artifact's group ID."
      identifier_perm:
        type: "string"
        description: "Unique and permanent identifier for the package."
      indexed:
        type: "boolean"
        description: ""
      is_sync_awaiting:
        type: "boolean"
        description: ""
      is_sync_completed:
        type: "boolean"
        description: ""
      is_sync_failed:
        type: "boolean"
        description: ""
      is_sync_in_flight:
        type: "boolean"
        description: ""
      is_sync_in_progress:
        type: "boolean"
        description: ""
      license:
        type: "string"
        description: "The license of this package."
      name:
        type: "string"
        description: "The name of this package."
      namespace:
        type: "string"
        description: ""
      namespace_url:
        type: "string"
        description: ""
      num_files:
        type: "integer"
        description: ""
      package_type:
        type: "string"
        description: "The type of package contents."
      packaging:
        type: "string"
        description: "Artifact's Maven packaging type."
      release:
        type: "string"
        description: "The release of the package version (if any)."
      repository:
        type: "string"
        description: ""
      repository_url:
        type: "string"
        description: ""
      security_scan_completed_at:
        type: "string"
        description: "The datetime the security scanning was completed."
      security_scan_started_at:
        type: "string"
        description: "The datetime the security scanning was started."
      security_scan_status:
        type: "string"
        description: ""
      security_scan_status_updated_at:
        type: "string"
        description: "The datetime the security scanning status was updated."
      self_html_url:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      signature_url:
        type: "string"
        description: ""
      size:
        type: "integer"
        description: "The calculated size of the package."
      slug:
        type: "string"
        description: "The public unique identifier for the package."
      slug_perm:
        type: "string"
        description: ""
      stage:
        type: "string"
        description: "The synchronisation (in progress) stage of the package."
      stage_str:
        type: "string"
        description: ""
      stage_updated_at:
        type: "string"
        description: "The datetime the package stage was updated at."
      status:
        type: "string"
        description: "The synchronisation status of the package."
      status_reason:
        type: "string"
        description: "A textual description for the synchronous status reason (if\
          \ any"
      status_str:
        type: "string"
        description: ""
      status_updated_at:
        type: "string"
        description: "The datetime the package status was updated at."
      status_url:
        type: "string"
        description: ""
      subtype:
        type: "string"
        description: ""
      summary:
        type: "string"
        description: "A one-liner synopsis of this package."
      sync_finished_at:
        type: "string"
        description: "The datetime the package sync was finished at."
      sync_progress:
        type: "integer"
        description: "Synchronisation progress (from 0-100)"
      tags_immutable:
        type: "object"
        description: "All immutable tags on the package, grouped by tag type. Immutable\
          \ tags cannot be (easily) deleted."
        properties: {}
      type_display:
        type: "string"
        description: ""
      uploaded_at:
        type: "string"
        description: "The date this package was uploaded."
      uploader:
        type: "string"
        description: ""
      uploader_url:
        type: "string"
        description: ""
      version:
        type: "string"
        description: "The raw version for this package."
      version_orig:
        type: "string"
        description: ""
      vulnerability_scan_results_url:
        type: "string"
        description: ""
    example:
      architectures:
      - name: "name"
        description: "description"
      - name: "name"
        description: "description"
      security_scan_status_updated_at: "security_scan_status_updated_at"
      checksum_sha256: "checksum_sha256"
      release: "release"
      artifact_id: "cloudsmith-example"
      package_type: "package_type"
      repository: "repository"
      identifier_perm: "identifier_perm"
      stage_updated_at: "stage_updated_at"
      tags_immutable: "{}"
      slug: "slug"
      security_scan_started_at: "security_scan_started_at"
      security_scan_status: "security_scan_status"
      indexed: true
      format: "format"
      status_str: "status_str"
      version_orig: "version_orig"
      namespace_url: "namespace_url"
      slug_perm: "slug_perm"
      version: "version"
      license: "license"
      filename: "filename"
      size: 5
      cdn_url: "cdn_url"
      uploaded_at: "uploaded_at"
      name: "name"
      sync_finished_at: "sync_finished_at"
      files:
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      - checksum_sha512: "checksum_sha512"
        checksum_sha1: "checksum_sha1"
        checksum_sha256: "checksum_sha256"
        is_primary: true
        checksum_md5: "checksum_md5"
        slug_perm: "slug_perm"
        filename: "filename"
        size: 5
        cdn_url: "cdn_url"
        downloads: 1
        is_synchronised: true
        is_downloadable: true
        signature_url: "signature_url"
        tag: "tag"
      num_files: 1
      status: "status"
      checksum_sha512: "checksum_sha512"
      distro: "{}"
      extension: "extension"
      description: "description"
      epoch: 6
      is_sync_completed: true
      distro_version: "{}"
      type_display: "type_display"
      vulnerability_scan_results_url: "vulnerability_scan_results_url"
      dependencies_checksum_md5: "dependencies_checksum_md5"
      downloads: 0
      subtype: "subtype"
      uploader: "uploader"
      signature_url: "signature_url"
      repository_url: "repository_url"
      status_reason: "status_reason"
      status_updated_at: "status_updated_at"
      summary: "summary"
      checksum_sha1: "checksum_sha1"
      checksum_md5: "checksum_md5"
      sync_progress: 5
      is_sync_awaiting: true
      packaging: "packaging"
      uploader_url: "uploader_url"
      self_html_url: "self_html_url"
      self_url: "self_url"
      status_url: "status_url"
      is_sync_in_flight: true
      security_scan_completed_at: "security_scan_completed_at"
      is_sync_in_progress: true
      stage_str: "stage_str"
      stage: "stage"
      format_url: "format_url"
      group_id: "io.cloudsmith.example"
      dependencies_url: "dependencies_url"
      namespace: "namespace"
      is_sync_failed: true
  PackagesValidateuploadLuarocks:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadLuarocks"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  UserProfile:
    type: "object"
    required:
    - "first_name"
    - "last_name"
    properties:
      company:
        type: "string"
        description: ""
      first_name:
        type: "string"
        description: ""
      job_title:
        type: "string"
        description: ""
      joined_at:
        type: "string"
        description: ""
      last_name:
        type: "string"
        description: ""
      name:
        type: "string"
        description: ""
      slug:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      tagline:
        type: "string"
        description: "Your tagline is a sentence about you. Make it funny. Make it\
          \ professional. Either way, it's public and it represents who you are."
      url:
        type: "string"
        description: ""
    example:
      joined_at: "joined_at"
      name: "name"
      last_name: "last_name"
      tagline: "tagline"
      company: "company"
      slug_perm: "slug_perm"
      first_name: "first_name"
      job_title: "job_title"
      slug: "slug"
      url: "url"
  PackageFileUpload:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "The identifier for the file to use when creating packages"
      upload_fields:
        type: "object"
        description: "The dictionary of fields that must be sent with POST uploads"
        properties: {}
      upload_headers:
        type: "object"
        description: "The dictionary of headers that must be sent with uploads"
        properties: {}
      upload_querystring:
        type: "string"
        description: "The querystring to use for the next-step POST or PUT upload"
      upload_url:
        type: "string"
        description: "The URL to use for the next-step POST or PUT upload"
    example:
      identifier: "identifier"
      upload_fields: "{}"
      upload_querystring: "upload_querystring"
      upload_headers: "{}"
      upload_url: "upload_url"
  RepositoryWebhook:
    type: "object"
    required:
    - "events"
    - "target_url"
    - "templates"
    properties:
      created_at:
        type: "string"
        description: ""
      created_by:
        type: "string"
        description: ""
      created_by_url:
        type: "string"
        description: ""
      disable_reason:
        type: "string"
        description: ""
      disable_reason_str:
        type: "string"
        description: ""
      events:
        type: "array"
        description: ""
        title: "EventsList"
        items:
          type: "string"
          description: ""
      identifier:
        type: "integer"
        description: ""
      is_active:
        type: "boolean"
        description: "If enabled, the webhook will trigger on events and send payloads\
          \ to the configured target URL."
      is_last_response_bad:
        type: "boolean"
        description: ""
      last_response_status:
        type: "integer"
        description: ""
      last_response_status_str:
        type: "string"
        description: ""
      num_sent:
        type: "integer"
        description: ""
      package_query:
        type: "string"
        description: "The package-based search query for webhooks to fire. This uses\
          \ the same syntax as the standard search used for repositories, and also\
          \ supports boolean logic operators such as OR/AND/NOT and parentheses for\
          \ grouping. If a package does not match, the webhook will not fire."
      request_body_format:
        type: "string"
        description: "The format of the payloads for webhook requests."
      request_body_format_str:
        type: "string"
        description: ""
      request_body_template_format:
        type: "string"
        description: "The format of the payloads for webhook requests."
      request_body_template_format_str:
        type: "string"
        description: ""
      request_content_type:
        type: "string"
        description: "The value that will be sent for the 'Content Type' header. "
      secret_header:
        type: "string"
        description: "The header to send the predefined secret in. This must be unique\
          \ from existing headers or it won't be sent. You can use this as a form\
          \ of authentication on the endpoint side."
      self_url:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      target_url:
        type: "string"
        description: "The destination URL that webhook payloads will be POST'ed to."
      templates:
        type: "array"
        description: ""
        title: "TemplatesList"
        items:
          $ref: "#/definitions/webhooksownerrepo_templates"
      updated_at:
        type: "string"
        description: ""
      updated_by:
        type: "string"
        description: ""
      updated_by_url:
        type: "string"
        description: ""
      verify_ssl:
        type: "boolean"
        description: "If enabled, SSL certificates is verified when webhooks are sent.\
          \ It's recommended to leave this enabled as not verifying the integrity\
          \ of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM)\
          \ attacks."
    example:
      is_last_response_bad: true
      last_response_status_str: "last_response_status_str"
      target_url: "target_url"
      created_at: "created_at"
      last_response_status: 6
      request_body_template_format_str: "request_body_template_format_str"
      request_content_type: "request_content_type"
      updated_at: "updated_at"
      request_body_format_str: "request_body_format_str"
      num_sent: 1
      request_body_template_format: "request_body_template_format"
      events:
      - "events"
      - "events"
      disable_reason_str: "disable_reason_str"
      identifier: 0
      package_query: "package_query"
      is_active: true
      disable_reason: "disable_reason"
      created_by_url: "created_by_url"
      templates:
      - template: "template"
        event: "event"
      - template: "template"
        event: "event"
      request_body_format: "request_body_format"
      slug_perm: "slug_perm"
      created_by: "created_by"
      self_url: "self_url"
      updated_by_url: "updated_by_url"
      verify_ssl: true
      secret_header: "secret_header"
      updated_by: "updated_by"
  PackagesValidateuploadAlpine:
    type: "object"
    required:
    - "distribution"
    - "package_file"
    properties:
      distribution:
        type: "string"
        example: "alpine/v3.8"
        description: "The distribution to store the package for."
      package_file:
        type: "string"
        example: "a123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadAlpine"
    example:
      republish: true
      distribution: "alpine/v3.8"
      package_file: "a123456789"
      tags: "tags"
  PackagesCopy:
    type: "object"
    required:
    - "destination"
    properties:
      destination:
        type: "string"
        description: "None"
      republish:
        type: "boolean"
        description: "If true, the package will overwrite any others with the same\
          \ attributes (e.g. same version); otherwise, it will be flagged as a duplicate."
    title: "PackagesCopy"
    example:
      republish: true
      destination: "destination"
  WebhooksCreate:
    type: "object"
    required:
    - "events"
    - "target_url"
    - "templates"
    properties:
      events:
        type: "array"
        description: "None"
        title: "EventsList"
        items:
          type: "string"
          description: ""
      is_active:
        type: "boolean"
        description: "If enabled, the webhook will trigger on events and send payloads\
          \ to the configured target URL."
      package_query:
        type: "string"
        description: "The package-based search query for webhooks to fire. This uses\
          \ the same syntax as the standard search used for repositories, and also\
          \ supports boolean logic operators such as OR/AND/NOT and parentheses for\
          \ grouping. If a package does not match, the webhook will not fire."
      request_body_format:
        type: "string"
        description: "The format of the payloads for webhook requests."
      request_body_template_format:
        type: "string"
        description: "The format of the payloads for webhook requests."
      request_content_type:
        type: "string"
        description: "The value that will be sent for the 'Content Type' header. "
      secret_header:
        type: "string"
        description: "The header to send the predefined secret in. This must be unique\
          \ from existing headers or it won't be sent. You can use this as a form\
          \ of authentication on the endpoint side."
      secret_value:
        type: "string"
        description: "The value for the predefined secret (note: this is treated as\
          \ a passphrase and is encrypted when we store it). You can use this as a\
          \ form of authentication on the endpoint side."
      signature_key:
        type: "string"
        description: "The value for the signature key - This is used to generate an\
          \ HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature\
          \ header so that you can ensure that the request wasn't modified by a malicious\
          \ party (note: this is treated as a passphrase and is encrypted when we\
          \ store it)."
      target_url:
        type: "string"
        description: "The destination URL that webhook payloads will be POST'ed to."
      templates:
        type: "array"
        description: "None"
        title: "TemplatesList"
        items:
          $ref: "#/definitions/webhooksownerrepo_templates"
      verify_ssl:
        type: "boolean"
        description: "If enabled, SSL certificates is verified when webhooks are sent.\
          \ It's recommended to leave this enabled as not verifying the integrity\
          \ of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM)\
          \ attacks."
    title: "WebhooksCreate"
    example:
      package_query: "package_query"
      request_content_type: "request_content_type"
      is_active: true
      verify_ssl: true
      signature_key: "signature_key"
      target_url: "target_url"
      templates:
      - template: "template"
        event: "event"
      - template: "template"
        event: "event"
      secret_header: "secret_header"
      secret_value: "secret_value"
      request_body_format: "request_body_format"
      request_body_template_format: "request_body_template_format"
      events:
      - "events"
      - "events"
  StorageRegion:
    type: "object"
    required:
    - "label"
    - "slug"
    properties:
      label:
        type: "string"
        description: "Name of the storage region"
      slug:
        type: "string"
        description: "Slug for the storage region"
    example:
      label: "label"
      slug: "slug"
  QuotaHistory_history:
    type: "object"
    properties:
      days:
        type: "integer"
        description: ""
      display:
        type: "object"
        description: ""
        properties: {}
      end:
        type: "string"
        description: ""
      plan:
        type: "string"
        description: ""
      raw:
        type: "object"
        description: ""
        properties: {}
      start:
        type: "string"
        description: ""
  PackagesUploadConda:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadConda"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  Format:
    type: "object"
    required:
    - "description"
    - "extensions"
    - "name"
    - "premium"
    - "slug"
    - "supports"
    properties:
      description:
        type: "string"
        description: "Description of the package format"
      distributions:
        type: "array"
        description: "The distributions supported by this package format"
        title: "DistributionsList"
        items:
          $ref: "#/definitions/formats_distributions"
      extensions:
        type: "array"
        description: "A non-exhaustive list of extensions supported"
        title: "ExtensionsList"
        items:
          type: "string"
          description: ""
      name:
        type: "string"
        description: "Name for the package format"
      premium:
        type: "boolean"
        description: "If true the package format is a premium-only feature"
      premium_plan_id:
        type: "string"
        description: "The minimum plan id required for this package format"
      premium_plan_name:
        type: "string"
        description: "The minimum plan name required for this package format"
      slug:
        type: "string"
        description: "Slug for the package format"
      supports:
        type: "object"
        description: "A set of what the package format supports"
        properties: {}
    example:
      extensions:
      - "extensions"
      - "extensions"
      premium: true
      name: "name"
      description: "description"
      supports: "{}"
      premium_plan_name: "premium_plan_name"
      distributions:
      - name: "name"
        variants: "variants"
        self_url: "self_url"
        slug: "slug"
      - name: "name"
        variants: "variants"
        self_url: "self_url"
        slug: "slug"
      premium_plan_id: "premium_plan_id"
      slug: "slug"
  WebhooksPartialUpdate:
    type: "object"
    properties:
      events:
        type: "array"
        description: "None"
        title: "EventsList"
        items:
          type: "string"
          description: ""
      is_active:
        type: "boolean"
        description: "If enabled, the webhook will trigger on events and send payloads\
          \ to the configured target URL."
      package_query:
        type: "string"
        description: "The package-based search query for webhooks to fire. This uses\
          \ the same syntax as the standard search used for repositories, and also\
          \ supports boolean logic operators such as OR/AND/NOT and parentheses for\
          \ grouping. If a package does not match, the webhook will not fire."
      request_body_format:
        type: "string"
        description: "The format of the payloads for webhook requests."
      request_body_template_format:
        type: "string"
        description: "The format of the payloads for webhook requests."
      request_content_type:
        type: "string"
        description: "The value that will be sent for the 'Content Type' header. "
      secret_header:
        type: "string"
        description: "The header to send the predefined secret in. This must be unique\
          \ from existing headers or it won't be sent. You can use this as a form\
          \ of authentication on the endpoint side."
      secret_value:
        type: "string"
        description: "The value for the predefined secret (note: this is treated as\
          \ a passphrase and is encrypted when we store it). You can use this as a\
          \ form of authentication on the endpoint side."
      signature_key:
        type: "string"
        description: "The value for the signature key - This is used to generate an\
          \ HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature\
          \ header so that you can ensure that the request wasn't modified by a malicious\
          \ party (note: this is treated as a passphrase and is encrypted when we\
          \ store it)."
      target_url:
        type: "string"
        description: "The destination URL that webhook payloads will be POST'ed to."
      templates:
        type: "array"
        description: "None"
        title: "TemplatesList"
        items:
          $ref: "#/definitions/webhooksownerrepo_templates"
      verify_ssl:
        type: "boolean"
        description: "If enabled, SSL certificates is verified when webhooks are sent.\
          \ It's recommended to leave this enabled as not verifying the integrity\
          \ of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM)\
          \ attacks."
    title: "WebhooksPartialUpdate"
    example:
      package_query: "package_query"
      request_content_type: "request_content_type"
      is_active: true
      verify_ssl: true
      signature_key: "signature_key"
      target_url: "target_url"
      templates:
      - template: "template"
        event: "event"
      - template: "template"
        event: "event"
      secret_header: "secret_header"
      secret_value: "secret_value"
      request_body_format: "request_body_format"
      request_body_template_format: "request_body_template_format"
      events:
      - "events"
      - "events"
  RepositoryToken:
    type: "object"
    required:
    - "name"
    properties:
      clients:
        type: "integer"
        description: ""
      created_at:
        type: "string"
        description: "The datetime the token was updated at."
      created_by:
        type: "string"
        description: ""
      created_by_url:
        type: "string"
        description: ""
      default:
        type: "boolean"
        description: "If selected this is the default token for this repository."
      disable_url:
        type: "string"
        description: ""
      downloads:
        type: "integer"
        description: ""
      enable_url:
        type: "string"
        description: ""
      eula_accepted:
        type: "object"
        description: ""
        properties: {}
      eula_accepted_at:
        type: "string"
        description: "The datetime the EULA was accepted at."
      eula_accepted_from:
        type: "string"
        description: ""
      eula_required:
        type: "boolean"
        description: "If checked, a EULA acceptance is required for this token."
      has_limits:
        type: "boolean"
        description: ""
      identifier:
        type: "integer"
        description: ""
      is_active:
        type: "boolean"
        description: "If enabled, the token will allow downloads based on configured\
          \ restrictions (if any)."
      is_limited:
        type: "boolean"
        description: ""
      limit_bandwidth:
        type: "integer"
        description: "The maximum download bandwidth allowed for the token. Values\
          \ are expressed as the selected unit of bandwidth. Please note that since\
          \ downloads are calculated asynchronously (after the download happens),\
          \ the limit may not be imposed immediately but at a later point. "
      limit_bandwidth_unit:
        type: "string"
        description: ""
      limit_date_range_from:
        type: "string"
        description: "The starting date/time the token is allowed to be used from."
      limit_date_range_to:
        type: "string"
        description: "The ending date/time the token is allowed to be used until."
      limit_num_clients:
        type: "integer"
        description: "The maximum number of unique clients allowed for the token.\
          \ Please note that since clients are calculated asynchronously (after the\
          \ download happens), the limit may not be imposed immediately but at a later\
          \ point."
      limit_num_downloads:
        type: "integer"
        description: "The maximum number of downloads allowed for the token. Please\
          \ note that since downloads are calculated asynchronously (after the download\
          \ happens), the limit may not be imposed immediately but at a later point."
      limit_package_query:
        type: "string"
        description: "The package-based search query to apply to restrict downloads\
          \ to. This uses the same syntax as the standard search used for repositories,\
          \ and also supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. This will still allow access to non-package files, such\
          \ as metadata."
      limit_path_query:
        type: "string"
        description: "The path-based search query to apply to restrict downloads to.\
          \ This supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. The path evaluated does not include the domain name, the\
          \ namespace, the entitlement code used, the package format, etc. and it\
          \ always starts with a forward slash."
      metadata:
        type: "object"
        description: ""
        properties: {}
      name:
        type: "string"
        description: ""
      refresh_url:
        type: "string"
        description: ""
      reset_url:
        type: "string"
        description: ""
      scheduled_reset_at:
        type: "string"
        description: "The time at which the scheduled reset period has elapsed and\
          \ the token limits were automatically reset to zero."
      scheduled_reset_period:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      token:
        type: "string"
        description: ""
      updated_at:
        type: "string"
        description: "The datetime the token was updated at."
      updated_by:
        type: "string"
        description: ""
      updated_by_url:
        type: "string"
        description: ""
      usage:
        type: "string"
        description: ""
      user:
        type: "string"
        description: ""
      user_url:
        type: "string"
        description: ""
    example:
      limit_date_range_to: "limit_date_range_to"
      metadata: "{}"
      clients: 0
      limit_bandwidth_unit: "limit_bandwidth_unit"
      scheduled_reset_at: "scheduled_reset_at"
      usage: "usage"
      limit_bandwidth: 5
      created_at: "created_at"
      limit_num_clients: 5
      eula_accepted_at: "eula_accepted_at"
      limit_package_query: "limit_package_query"
      limit_path_query: "limit_path_query"
      default: true
      updated_at: "updated_at"
      downloads: 6
      user_url: "user_url"
      limit_date_range_from: "limit_date_range_from"
      reset_url: "reset_url"
      limit_num_downloads: 2
      eula_required: true
      refresh_url: "refresh_url"
      scheduled_reset_period: "scheduled_reset_period"
      identifier: 1
      is_active: true
      eula_accepted: "{}"
      eula_accepted_from: "eula_accepted_from"
      created_by_url: "created_by_url"
      is_limited: true
      slug_perm: "slug_perm"
      created_by: "created_by"
      enable_url: "enable_url"
      self_url: "self_url"
      token: "token"
      updated_by_url: "updated_by_url"
      disable_url: "disable_url"
      name: "name"
      updated_by: "updated_by"
      has_limits: true
      user: "user"
  PackagesValidateuploadVagrant:
    type: "object"
    required:
    - "name"
    - "package_file"
    - "provider"
    - "version"
    properties:
      name:
        type: "string"
        example: "tcl"
        description: "The name of this package."
      package_file:
        type: "string"
        example: "y123456789x"
        description: "The primary file for the package."
      provider:
        type: "string"
        example: "virtualbox"
        description: "The virtual machine provider for the box."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      version:
        type: "string"
        example: "1.0"
        description: "The raw version for this package."
    title: "PackagesValidate-uploadVagrant"
    example:
      republish: true
      provider: "virtualbox"
      name: "tcl"
      package_file: "y123456789x"
      version: "1.0"
      tags: "tags"
  PackageDependencies_dependencies:
    type: "object"
    properties:
      dep_type:
        type: "string"
        description: ""
      name:
        type: "string"
        description: "The name of the package dependency."
      operator:
        type: "string"
        description: ""
      version:
        type: "string"
        description: "The raw dependency version (if any)."
    example:
      dep_type: "dep_type"
      name: "name"
      version: "version"
      operator: "operator"
  distros_versions:
    type: "object"
    properties:
      name:
        type: "string"
        description: "The textual name for this version."
      slug:
        type: "string"
        description: "The slug identifier for this version"
    example:
      name: "name"
      slug: "slug"
  PackagesUploadCocoapods:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "z123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadCocoapods"
    example:
      republish: true
      package_file: "z123456789"
      tags: "tags"
  PackagesValidateuploadCargo:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadCargo"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  EntitlementsSync:
    type: "object"
    required:
    - "source"
    properties:
      source:
        type: "string"
        description: "The source repository slug (in the same owner namespace)."
    title: "EntitlementsSync"
    example:
      source: "source"
  EntitlementsCreate:
    type: "object"
    required:
    - "name"
    properties:
      eula_required:
        type: "boolean"
        description: "If checked, a EULA acceptance is required for this token."
      is_active:
        type: "boolean"
        description: "If enabled, the token will allow downloads based on configured\
          \ restrictions (if any)."
      limit_bandwidth:
        type: "integer"
        description: "The maximum download bandwidth allowed for the token. Values\
          \ are expressed as the selected unit of bandwidth. Please note that since\
          \ downloads are calculated asynchronously (after the download happens),\
          \ the limit may not be imposed immediately but at a later point. "
      limit_bandwidth_unit:
        type: "string"
        description: "None"
      limit_date_range_from:
        type: "string"
        description: "The starting date/time the token is allowed to be used from."
      limit_date_range_to:
        type: "string"
        description: "The ending date/time the token is allowed to be used until."
      limit_num_clients:
        type: "integer"
        description: "The maximum number of unique clients allowed for the token.\
          \ Please note that since clients are calculated asynchronously (after the\
          \ download happens), the limit may not be imposed immediately but at a later\
          \ point."
      limit_num_downloads:
        type: "integer"
        description: "The maximum number of downloads allowed for the token. Please\
          \ note that since downloads are calculated asynchronously (after the download\
          \ happens), the limit may not be imposed immediately but at a later point."
      limit_package_query:
        type: "string"
        description: "The package-based search query to apply to restrict downloads\
          \ to. This uses the same syntax as the standard search used for repositories,\
          \ and also supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. This will still allow access to non-package files, such\
          \ as metadata."
      limit_path_query:
        type: "string"
        description: "The path-based search query to apply to restrict downloads to.\
          \ This supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. The path evaluated does not include the domain name, the\
          \ namespace, the entitlement code used, the package format, etc. and it\
          \ always starts with a forward slash."
      metadata:
        type: "object"
        description: "None"
        properties: {}
      name:
        type: "string"
        description: "None"
      scheduled_reset_at:
        type: "string"
        description: "The time at which the scheduled reset period has elapsed and\
          \ the token limits were automatically reset to zero."
      scheduled_reset_period:
        type: "string"
        description: "None"
      token:
        type: "string"
        description: "None"
    title: "EntitlementsCreate"
    example:
      limit_date_range_to: "limit_date_range_to"
      metadata: "{}"
      is_active: true
      limit_bandwidth_unit: "limit_bandwidth_unit"
      scheduled_reset_at: "scheduled_reset_at"
      limit_bandwidth: 0
      limit_num_clients: 6
      limit_package_query: "limit_package_query"
      limit_path_query: "limit_path_query"
      token: "token"
      name: "name"
      limit_date_range_from: "limit_date_range_from"
      limit_num_downloads: 1
      eula_required: true
      scheduled_reset_period: "scheduled_reset_period"
  FilesAbort:
    type: "object"
    required:
    - "filename"
    properties:
      filename:
        type: "string"
        description: "Filename for the package file upload."
      md5_checksum:
        type: "string"
        description: "MD5 checksum for a POST-based package file upload."
      method:
        type: "string"
        description: "The method to use for package file upload."
      sha256_checksum:
        type: "string"
        description: "SHA256 checksum for a PUT-based package file upload."
    title: "FilesAbort"
    example:
      sha256_checksum: "sha256_checksum"
      filename: "filename"
      method: "method"
      md5_checksum: "md5_checksum"
  PackagesValidateuploadNuget:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "y1234456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      symbols_file:
        type: "string"
        example: "y1234456789b"
        description: "Attaches a symbols file to the package."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadNuget"
    example:
      republish: true
      symbols_file: "y1234456789b"
      package_file: "y1234456789a"
      tags: "tags"
  PackagesValidateuploadRaw:
    type: "object"
    required:
    - "package_file"
    properties:
      content_type:
        type: "string"
        description: "A custom content/media (also known as MIME) type to be sent\
          \ when downloading this file. By default Cloudsmith will attempt to detect\
          \ the type, but if you need to override it, you can specify it here."
      description:
        type: "string"
        example: "Everything about packaging files."
        description: "A textual description of this package."
      name:
        type: "string"
        example: "my-package"
        description: "The name of this package."
      package_file:
        type: "string"
        example: "y123456789"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      summary:
        type: "string"
        example: "My Package File"
        description: "A one-liner synopsis of this package."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
      version:
        type: "string"
        example: "1.0"
        description: "The raw version for this package."
    title: "PackagesValidate-uploadRaw"
    example:
      summary: "My Package File"
      content_type: "content_type"
      republish: true
      name: "my-package"
      description: "Everything about packaging files."
      package_file: "y123456789"
      version: "1.0"
      tags: "tags"
  RepositoryTokenSync:
    type: "object"
    properties:
      tokens:
        type: "array"
        description: "The entitlements that have been synchronised."
        title: "TokensList"
        items:
          $ref: "#/definitions/RepositoryTokenSync_tokens"
    example:
      tokens:
      - limit_date_range_to: "limit_date_range_to"
        metadata: "metadata"
        clients: 0
        limit_bandwidth_unit: "limit_bandwidth_unit"
        scheduled_reset_at: "scheduled_reset_at"
        usage: "usage"
        limit_bandwidth: 5
        created_at: "created_at"
        limit_num_clients: 5
        eula_accepted_at: "eula_accepted_at"
        limit_package_query: "limit_package_query"
        limit_path_query: "limit_path_query"
        default: true
        updated_at: "updated_at"
        downloads: 6
        user_url: "user_url"
        limit_date_range_from: "limit_date_range_from"
        reset_url: "reset_url"
        limit_num_downloads: 2
        eula_required: true
        refresh_url: "refresh_url"
        scheduled_reset_period: "scheduled_reset_period"
        identifier: 1
        is_active: true
        eula_accepted: "{}"
        eula_accepted_from: "eula_accepted_from"
        created_by_url: "created_by_url"
        is_limited: true
        slug_perm: "slug_perm"
        created_by: "created_by"
        enable_url: "enable_url"
        self_url: "self_url"
        token: "token"
        updated_by_url: "updated_by_url"
        disable_url: "disable_url"
        name: "name"
        updated_by: "updated_by"
        has_limits: true
        user: "user"
      - limit_date_range_to: "limit_date_range_to"
        metadata: "metadata"
        clients: 0
        limit_bandwidth_unit: "limit_bandwidth_unit"
        scheduled_reset_at: "scheduled_reset_at"
        usage: "usage"
        limit_bandwidth: 5
        created_at: "created_at"
        limit_num_clients: 5
        eula_accepted_at: "eula_accepted_at"
        limit_package_query: "limit_package_query"
        limit_path_query: "limit_path_query"
        default: true
        updated_at: "updated_at"
        downloads: 6
        user_url: "user_url"
        limit_date_range_from: "limit_date_range_from"
        reset_url: "reset_url"
        limit_num_downloads: 2
        eula_required: true
        refresh_url: "refresh_url"
        scheduled_reset_period: "scheduled_reset_period"
        identifier: 1
        is_active: true
        eula_accepted: "{}"
        eula_accepted_from: "eula_accepted_from"
        created_by_url: "created_by_url"
        is_limited: true
        slug_perm: "slug_perm"
        created_by: "created_by"
        enable_url: "enable_url"
        self_url: "self_url"
        token: "token"
        updated_by_url: "updated_by_url"
        disable_url: "disable_url"
        name: "name"
        updated_by: "updated_by"
        has_limits: true
        user: "user"
  PackagesTag:
    type: "object"
    properties:
      action:
        type: "string"
        description: "None"
      is_immutable:
        type: "boolean"
        description: "If true, created tags will be immutable. An immutable flag is\
          \ a tag that cannot be removed from a package."
      tags:
        type: "array"
        description: "A list of tags to apply the action to. Not required for clears."
        title: "TagsList"
        items:
          type: "string"
          description: ""
    title: "PackagesTag"
    example:
      is_immutable: true
      action: "action"
      tags:
      - "tags"
      - "tags"
  PackagesValidateuploadHelm:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadHelm"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
  Quota:
    type: "object"
    required:
    - "usage"
    properties:
      usage:
        type: "object"
        example:
          display:
            bandwidth:
              configured: "60 GB"
              percentage_used: "0.0%"
              plan_limit: "2 TB"
              used: "0 B"
            storage:
              configured: "30 GB"
              percentage_used: "0.109%"
              plan_limit: "1 TB"
              used: "1.1 GB"
          raw:
            bandwidth:
              configured: 64424509440
              percentage_used: 0.0
              plan_limit: 2199023255552
              used: 0
            storage:
              configured: 32212254720
              percentage_used: 0.109
              plan_limit: 1099511627776
              used: 1197653687
        description: ""
        properties: {}
    example:
      usage:
        display:
          bandwidth:
            configured: "60 GB"
            percentage_used: "0.0%"
            plan_limit: "2 TB"
            used: "0 B"
          storage:
            configured: "30 GB"
            percentage_used: "0.109%"
            plan_limit: "1 TB"
            used: "1.1 GB"
        raw:
          bandwidth:
            configured: 64424509440
            percentage_used: 0.0
            plan_limit: 2199023255552
            used: 0
          storage:
            configured: 32212254720
            percentage_used: 0.109
            plan_limit: 1099511627776
            used: 1197653687
  PackagesValidateuploadTerraform:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "z123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesValidate-uploadTerraform"
    example:
      republish: true
      package_file: "z123456789a"
      tags: "tags"
  RepositoryTokenRefresh:
    type: "object"
    properties:
      clients:
        type: "integer"
        description: ""
      created_at:
        type: "string"
        description: "The datetime the token was updated at."
      created_by:
        type: "string"
        description: ""
      created_by_url:
        type: "string"
        description: ""
      default:
        type: "boolean"
        description: "If selected this is the default token for this repository."
      disable_url:
        type: "string"
        description: ""
      downloads:
        type: "integer"
        description: ""
      enable_url:
        type: "string"
        description: ""
      eula_accepted:
        type: "object"
        description: ""
        properties: {}
      eula_accepted_at:
        type: "string"
        description: "The datetime the EULA was accepted at."
      eula_accepted_from:
        type: "string"
        description: ""
      eula_required:
        type: "boolean"
        description: "If checked, a EULA acceptance is required for this token."
      has_limits:
        type: "boolean"
        description: ""
      identifier:
        type: "integer"
        description: ""
      is_active:
        type: "boolean"
        description: "If enabled, the token will allow downloads based on configured\
          \ restrictions (if any)."
      is_limited:
        type: "boolean"
        description: ""
      limit_bandwidth:
        type: "integer"
        description: "The maximum download bandwidth allowed for the token. Values\
          \ are expressed as the selected unit of bandwidth. Please note that since\
          \ downloads are calculated asynchronously (after the download happens),\
          \ the limit may not be imposed immediately but at a later point. "
      limit_bandwidth_unit:
        type: "string"
        description: ""
      limit_date_range_from:
        type: "string"
        description: "The starting date/time the token is allowed to be used from."
      limit_date_range_to:
        type: "string"
        description: "The ending date/time the token is allowed to be used until."
      limit_num_clients:
        type: "integer"
        description: "The maximum number of unique clients allowed for the token.\
          \ Please note that since clients are calculated asynchronously (after the\
          \ download happens), the limit may not be imposed immediately but at a later\
          \ point."
      limit_num_downloads:
        type: "integer"
        description: "The maximum number of downloads allowed for the token. Please\
          \ note that since downloads are calculated asynchronously (after the download\
          \ happens), the limit may not be imposed immediately but at a later point."
      limit_package_query:
        type: "string"
        description: "The package-based search query to apply to restrict downloads\
          \ to. This uses the same syntax as the standard search used for repositories,\
          \ and also supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. This will still allow access to non-package files, such\
          \ as metadata."
      limit_path_query:
        type: "string"
        description: "The path-based search query to apply to restrict downloads to.\
          \ This supports boolean logic operators such as OR/AND/NOT and parentheses\
          \ for grouping. The path evaluated does not include the domain name, the\
          \ namespace, the entitlement code used, the package format, etc. and it\
          \ always starts with a forward slash."
      metadata:
        type: "object"
        description: ""
        properties: {}
      name:
        type: "string"
        description: ""
      refresh_url:
        type: "string"
        description: ""
      reset_url:
        type: "string"
        description: ""
      scheduled_reset_at:
        type: "string"
        description: "The time at which the scheduled reset period has elapsed and\
          \ the token limits were automatically reset to zero."
      scheduled_reset_period:
        type: "string"
        description: ""
      self_url:
        type: "string"
        description: ""
      slug_perm:
        type: "string"
        description: ""
      token:
        type: "string"
        description: ""
      updated_at:
        type: "string"
        description: "The datetime the token was updated at."
      updated_by:
        type: "string"
        description: ""
      updated_by_url:
        type: "string"
        description: ""
      usage:
        type: "string"
        description: ""
      user:
        type: "string"
        description: ""
      user_url:
        type: "string"
        description: ""
    example:
      limit_date_range_to: "limit_date_range_to"
      metadata: "{}"
      clients: 0
      limit_bandwidth_unit: "limit_bandwidth_unit"
      scheduled_reset_at: "scheduled_reset_at"
      usage: "usage"
      limit_bandwidth: 5
      created_at: "created_at"
      limit_num_clients: 5
      eula_accepted_at: "eula_accepted_at"
      limit_package_query: "limit_package_query"
      limit_path_query: "limit_path_query"
      default: true
      updated_at: "updated_at"
      downloads: 6
      user_url: "user_url"
      limit_date_range_from: "limit_date_range_from"
      reset_url: "reset_url"
      limit_num_downloads: 2
      eula_required: true
      refresh_url: "refresh_url"
      scheduled_reset_period: "scheduled_reset_period"
      identifier: 1
      is_active: true
      eula_accepted: "{}"
      eula_accepted_from: "eula_accepted_from"
      created_by_url: "created_by_url"
      is_limited: true
      slug_perm: "slug_perm"
      created_by: "created_by"
      enable_url: "enable_url"
      self_url: "self_url"
      token: "token"
      updated_by_url: "updated_by_url"
      disable_url: "disable_url"
      name: "name"
      updated_by: "updated_by"
      has_limits: true
      user: "user"
  PackagesUploadDart:
    type: "object"
    required:
    - "package_file"
    properties:
      package_file:
        type: "string"
        example: "x123456789a"
        description: "The primary file for the package."
      republish:
        type: "boolean"
        description: "If true, the uploaded package will overwrite any others with\
          \ the same attributes (e.g. same version); otherwise, it will be flagged\
          \ as a duplicate."
      tags:
        type: "string"
        description: "A comma-separated values list of tags to add to the package."
    title: "PackagesUploadDart"
    example:
      republish: true
      package_file: "x123456789a"
      tags: "tags"
externalDocs:
  description: "Find out more info at the Cloudsmith Help Website"
  url: "https://help.cloudsmith.io"
x-readme:
  explorer-enabled: true
  proxy-enabled: false
  samples-enabled: true
