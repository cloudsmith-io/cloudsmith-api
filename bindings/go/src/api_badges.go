
/*
 * Cloudsmith API
 *
 * The API to the Cloudsmith Service
 *
 * API version: v1
 * Contact: support@cloudsmith.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package cloudsmith_api

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type BadgesApiService service

/*
BadgesApiService Get latest package version for a package or package group.
Get latest package version for a package or package group.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param owner 
 * @param repo 
 * @param packageFormat 
 * @param packageName 
 * @param packageVersion 
 * @param packageIdentifiers 
 * @param optional nil or *BadgesApiBadgesVersionListOpts - Optional Parameters:
     * @param "BadgeToken" (optional.String) -  Badge token to authenticate for private packages
     * @param "CacheSeconds" (optional.String) -  Override the shields.io badge cacheSeconds value.
     * @param "Color" (optional.String) -  Override the shields.io badge color value.
     * @param "Label" (optional.String) -  Override the shields.io badge label value.
     * @param "LabelColor" (optional.String) -  Override the shields.io badge labelColor value.
     * @param "LogoColor" (optional.String) -  Override the shields.io badge logoColor value.
     * @param "LogoWidth" (optional.String) -  Override the shields.io badge logoWidth value.
     * @param "Render" (optional.Bool) -  If true, badge will be rendered
     * @param "Shields" (optional.Bool) -  If true, a shields response will be generated
     * @param "ShowLatest" (optional.Bool) -  If true, for latest version badges a &#39;(latest)&#39; suffix is added
     * @param "Style" (optional.String) -  Override the shields.io badge style value.

@return interface{}
*/

type BadgesApiBadgesVersionListOpts struct { 
	BadgeToken optional.String
	CacheSeconds optional.String
	Color optional.String
	Label optional.String
	LabelColor optional.String
	LogoColor optional.String
	LogoWidth optional.String
	Render optional.Bool
	Shields optional.Bool
	ShowLatest optional.Bool
	Style optional.String
}

func (a *BadgesApiService) BadgesVersionList(ctx context.Context, owner string, repo string, packageFormat string, packageName string, packageVersion string, packageIdentifiers string, localVarOptionals *BadgesApiBadgesVersionListOpts) (interface{}, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue interface{}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", fmt.Sprintf("%v", owner), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", fmt.Sprintf("%v", repo), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_format"+"}", fmt.Sprintf("%v", packageFormat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_name"+"}", fmt.Sprintf("%v", packageName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_version"+"}", fmt.Sprintf("%v", packageVersion), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_identifiers"+"}", fmt.Sprintf("%v", packageIdentifiers), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.BadgeToken.IsSet() {
		localVarQueryParams.Add("badge_token", parameterToString(localVarOptionals.BadgeToken.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CacheSeconds.IsSet() {
		localVarQueryParams.Add("cacheSeconds", parameterToString(localVarOptionals.CacheSeconds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Color.IsSet() {
		localVarQueryParams.Add("color", parameterToString(localVarOptionals.Color.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Label.IsSet() {
		localVarQueryParams.Add("label", parameterToString(localVarOptionals.Label.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LabelColor.IsSet() {
		localVarQueryParams.Add("labelColor", parameterToString(localVarOptionals.LabelColor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LogoColor.IsSet() {
		localVarQueryParams.Add("logoColor", parameterToString(localVarOptionals.LogoColor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LogoWidth.IsSet() {
		localVarQueryParams.Add("logoWidth", parameterToString(localVarOptionals.LogoWidth.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Render.IsSet() {
		localVarQueryParams.Add("render", parameterToString(localVarOptionals.Render.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Shields.IsSet() {
		localVarQueryParams.Add("shields", parameterToString(localVarOptionals.Shields.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ShowLatest.IsSet() {
		localVarQueryParams.Add("show_latest", parameterToString(localVarOptionals.ShowLatest.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Style.IsSet() {
		localVarQueryParams.Add("style", parameterToString(localVarOptionals.Style.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["X-Api-Key"] = key
			
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v interface{}
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v Status
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 422 {
			var v Status
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

