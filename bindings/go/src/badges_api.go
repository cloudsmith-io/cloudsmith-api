/* 
 * Cloudsmith API
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package cloudsmith_api

import (
	"net/url"
	"strings"
	"fmt"
)

type BadgesApi struct {
	Configuration *Configuration
}

func NewBadgesApi() *BadgesApi {
	configuration := NewConfiguration()
	return &BadgesApi{
		Configuration: configuration,
	}
}

func NewBadgesApiWithBasePath(basePath string) *BadgesApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &BadgesApi{
		Configuration: configuration,
	}
}

/**
 * Get latest package version for a package or package group.
 * Get latest package version for a package or package group.
 *
 * @param owner 
 * @param repo 
 * @param packageFormat 
 * @param packageName 
 * @param packageVersion 
 * @param packageIdentifiers 
 * @param badgeToken Badge token to authenticate for private packages
 * @param render If true, badge will be rendered
 * @return void
 */
func (a BadgesApi) BadgesVersionList(owner string, repo string, packageFormat string, packageName string, packageVersion string, packageIdentifiers string, badgeToken string, render bool) (*APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", fmt.Sprintf("%v", owner), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", fmt.Sprintf("%v", repo), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_format"+"}", fmt.Sprintf("%v", packageFormat), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_name"+"}", fmt.Sprintf("%v", packageName), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_version"+"}", fmt.Sprintf("%v", packageVersion), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"package_identifiers"+"}", fmt.Sprintf("%v", packageIdentifiers), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(apikey)' required
	// set key with prefix in header
	localVarHeaderParams["X-Api-Key"] = a.Configuration.GetAPIKeyWithPrefix("X-Api-Key")
	// authentication '(basic)' required
	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != ""{
		localVarHeaderParams["Authorization"] =  "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// authentication '(csrf_token)' required
	// set key with prefix in header
	localVarHeaderParams["X-CSRFToken"] = a.Configuration.GetAPIKeyWithPrefix("X-CSRFToken")
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("badge_token", a.Configuration.APIClient.ParameterToString(badgeToken, ""))
	localVarQueryParams.Add("render", a.Configuration.APIClient.ParameterToString(render, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "BadgesVersionList", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return localVarAPIResponse, err
	}
	return localVarAPIResponse, err
}

