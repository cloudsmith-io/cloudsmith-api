/* 
 * Cloudsmith API
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package cloudsmith_api

import (
	"net/url"
	"strings"
	"encoding/json"
	"fmt"
)

type MetricsApi struct {
	Configuration *Configuration
}

func NewMetricsApi() *MetricsApi {
	configuration := NewConfiguration()
	return &MetricsApi{
		Configuration: configuration,
	}
}

func NewMetricsApiWithBasePath(basePath string) *MetricsApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &MetricsApi{
		Configuration: configuration,
	}
}

/**
 * View for listing entitlement token usage as a metric.
 * View for listing entitlement token usage as a metric.
 *
 * @param owner 
 * @param repo 
 * @param page A page number within the paginated result set.
 * @param pageSize Number of results to return per page.
 * @param finish Filter token usage ending before this timestamp. Defaults to now if not supplied.
 * @param start Filter token usage starting from this timestamp (seconds since Jan 01 1970. (UTC)).
 * @param tokens A comma seperated list of tokens (slug perm) to include in the results.
 * @return []EntitlmentTokenMetric
 */
func (a MetricsApi) MetricsEntitlementsUsageList(owner string, repo string, page int32, pageSize int32, finish int32, start int32, tokens string) ([]EntitlmentTokenMetric, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/metrics/{owner}/{repo}/entitlements/usage/"
	localVarPath = strings.Replace(localVarPath, "{"+"owner"+"}", fmt.Sprintf("%v", owner), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repo"+"}", fmt.Sprintf("%v", repo), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(apikey)' required
	// set key with prefix in header
	localVarHeaderParams["X-Api-Key"] = a.Configuration.GetAPIKeyWithPrefix("X-Api-Key")
	// authentication '(csrf_token)' required
	// set key with prefix in header
	localVarHeaderParams["X-CSRFToken"] = a.Configuration.GetAPIKeyWithPrefix("X-CSRFToken")
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("page", a.Configuration.APIClient.ParameterToString(page, ""))
	localVarQueryParams.Add("page_size", a.Configuration.APIClient.ParameterToString(pageSize, ""))
	localVarQueryParams.Add("finish", a.Configuration.APIClient.ParameterToString(finish, ""))
	localVarQueryParams.Add("start", a.Configuration.APIClient.ParameterToString(start, ""))
	localVarQueryParams.Add("tokens", a.Configuration.APIClient.ParameterToString(tokens, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new([]EntitlmentTokenMetric)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "MetricsEntitlementsUsageList", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return *successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return *successPayload, localVarAPIResponse, err
}

