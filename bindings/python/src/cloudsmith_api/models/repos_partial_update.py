# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class ReposPartialUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'index_files': 'bool',
        'name': 'str',
        'repository_type_str': 'str',
        'slug': 'str'
    }

    attribute_map = {
        'description': 'description',
        'index_files': 'index_files',
        'name': 'name',
        'repository_type_str': 'repository_type_str',
        'slug': 'slug'
    }

    def __init__(self, description=None, index_files=None, name=None, repository_type_str=None, slug=None, _configuration=None):  # noqa: E501
        """ReposPartialUpdate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._index_files = None
        self._name = None
        self._repository_type_str = None
        self._slug = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if index_files is not None:
            self.index_files = index_files
        if name is not None:
            self.name = name
        if repository_type_str is not None:
            self.repository_type_str = repository_type_str
        if slug is not None:
            self.slug = slug

    @property
    def description(self):
        """Gets the description of this ReposPartialUpdate.  # noqa: E501

        A description of the repository's purpose/contents.  # noqa: E501

        :return: The description of this ReposPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReposPartialUpdate.

        A description of the repository's purpose/contents.  # noqa: E501

        :param description: The description of this ReposPartialUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def index_files(self):
        """Gets the index_files of this ReposPartialUpdate.  # noqa: E501

        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.  # noqa: E501

        :return: The index_files of this ReposPartialUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._index_files

    @index_files.setter
    def index_files(self, index_files):
        """Sets the index_files of this ReposPartialUpdate.

        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.  # noqa: E501

        :param index_files: The index_files of this ReposPartialUpdate.  # noqa: E501
        :type: bool
        """

        self._index_files = index_files

    @property
    def name(self):
        """Gets the name of this ReposPartialUpdate.  # noqa: E501

        A descriptive name for the repository.  # noqa: E501

        :return: The name of this ReposPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReposPartialUpdate.

        A descriptive name for the repository.  # noqa: E501

        :param name: The name of this ReposPartialUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repository_type_str(self):
        """Gets the repository_type_str of this ReposPartialUpdate.  # noqa: E501

        The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all Cloudsmith users.  # noqa: E501

        :return: The repository_type_str of this ReposPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._repository_type_str

    @repository_type_str.setter
    def repository_type_str(self, repository_type_str):
        """Sets the repository_type_str of this ReposPartialUpdate.

        The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all Cloudsmith users.  # noqa: E501

        :param repository_type_str: The repository_type_str of this ReposPartialUpdate.  # noqa: E501
        :type: str
        """

        self._repository_type_str = repository_type_str

    @property
    def slug(self):
        """Gets the slug of this ReposPartialUpdate.  # noqa: E501

        The slug identifies the repository in URIs.  # noqa: E501

        :return: The slug of this ReposPartialUpdate.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ReposPartialUpdate.

        The slug identifies the repository in URIs.  # noqa: E501

        :param slug: The slug of this ReposPartialUpdate.  # noqa: E501
        :type: str
        """

        self._slug = slug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReposPartialUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReposPartialUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReposPartialUpdate):
            return True

        return self.to_dict() != other.to_dict()
