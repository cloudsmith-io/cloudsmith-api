# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PackagesTag(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'is_immutable': 'bool',
        'tags': 'list[str]'
    }

    attribute_map = {
        'action': 'action',
        'is_immutable': 'is_immutable',
        'tags': 'tags'
    }

    def __init__(self, action=None, is_immutable=None, tags=None):
        """
        PackagesTag - a model defined in Swagger
        """

        self._action = None
        self._is_immutable = None
        self._tags = None

        if action is not None:
          self.action = action
        if is_immutable is not None:
          self.is_immutable = is_immutable
        if tags is not None:
          self.tags = tags

    @property
    def action(self):
        """
        Gets the action of this PackagesTag.
        None

        :return: The action of this PackagesTag.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this PackagesTag.
        None

        :param action: The action of this PackagesTag.
        :type: str
        """

        self._action = action

    @property
    def is_immutable(self):
        """
        Gets the is_immutable of this PackagesTag.
        If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.

        :return: The is_immutable of this PackagesTag.
        :rtype: bool
        """
        return self._is_immutable

    @is_immutable.setter
    def is_immutable(self, is_immutable):
        """
        Sets the is_immutable of this PackagesTag.
        If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.

        :param is_immutable: The is_immutable of this PackagesTag.
        :type: bool
        """

        self._is_immutable = is_immutable

    @property
    def tags(self):
        """
        Gets the tags of this PackagesTag.
        A list of tags to apply the action to. Not required for clears.

        :return: The tags of this PackagesTag.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this PackagesTag.
        A list of tags to apply the action to. Not required for clears.

        :param tags: The tags of this PackagesTag.
        :type: list[str]
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PackagesTag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
