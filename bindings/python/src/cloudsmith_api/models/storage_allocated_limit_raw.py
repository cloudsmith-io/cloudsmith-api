# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class StorageAllocatedLimitRaw(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configured': 'int',
        'peak': 'int',
        'percentage_used': 'str',
        'plan_limit': 'int',
        'used': 'int'
    }

    attribute_map = {
        'configured': 'configured',
        'peak': 'peak',
        'percentage_used': 'percentage_used',
        'plan_limit': 'plan_limit',
        'used': 'used'
    }

    def __init__(self, configured=None, peak=None, percentage_used=None, plan_limit=None, used=None, _configuration=None):  # noqa: E501
        """StorageAllocatedLimitRaw - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._configured = None
        self._peak = None
        self._percentage_used = None
        self._plan_limit = None
        self._used = None
        self.discriminator = None

        if configured is not None:
            self.configured = configured
        if peak is not None:
            self.peak = peak
        if percentage_used is not None:
            self.percentage_used = percentage_used
        if plan_limit is not None:
            self.plan_limit = plan_limit
        if used is not None:
            self.used = used

    @property
    def configured(self):
        """Gets the configured of this StorageAllocatedLimitRaw.


        :return: The configured of this StorageAllocatedLimitRaw.
        :rtype: int
        """
        return self._configured

    @configured.setter
    def configured(self, configured):
        """Sets the configured of this StorageAllocatedLimitRaw.


        :param configured: The configured of this StorageAllocatedLimitRaw.
        :type: int
        """

        self._configured = configured

    @property
    def peak(self):
        """Gets the peak of this StorageAllocatedLimitRaw.


        :return: The peak of this StorageAllocatedLimitRaw.
        :rtype: int
        """
        return self._peak

    @peak.setter
    def peak(self, peak):
        """Sets the peak of this StorageAllocatedLimitRaw.


        :param peak: The peak of this StorageAllocatedLimitRaw.
        :type: int
        """

        self._peak = peak

    @property
    def percentage_used(self):
        """Gets the percentage_used of this StorageAllocatedLimitRaw.


        :return: The percentage_used of this StorageAllocatedLimitRaw.
        :rtype: str
        """
        return self._percentage_used

    @percentage_used.setter
    def percentage_used(self, percentage_used):
        """Sets the percentage_used of this StorageAllocatedLimitRaw.


        :param percentage_used: The percentage_used of this StorageAllocatedLimitRaw.
        :type: str
        """

        self._percentage_used = percentage_used

    @property
    def plan_limit(self):
        """Gets the plan_limit of this StorageAllocatedLimitRaw.


        :return: The plan_limit of this StorageAllocatedLimitRaw.
        :rtype: int
        """
        return self._plan_limit

    @plan_limit.setter
    def plan_limit(self, plan_limit):
        """Sets the plan_limit of this StorageAllocatedLimitRaw.


        :param plan_limit: The plan_limit of this StorageAllocatedLimitRaw.
        :type: int
        """

        self._plan_limit = plan_limit

    @property
    def used(self):
        """Gets the used of this StorageAllocatedLimitRaw.


        :return: The used of this StorageAllocatedLimitRaw.
        :rtype: int
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this StorageAllocatedLimitRaw.


        :param used: The used of this StorageAllocatedLimitRaw.
        :type: int
        """

        self._used = used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StorageAllocatedLimitRaw, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageAllocatedLimitRaw):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StorageAllocatedLimitRaw):
            return True

        return self.to_dict() != other.to_dict()

