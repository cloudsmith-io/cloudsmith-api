# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class PackageGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backend_kind': 'int',
        'count': 'int',
        'last_push': 'datetime',
        'name': 'str',
        'num_downloads': 'int',
        'size': 'int'
    }

    attribute_map = {
        'backend_kind': 'backend_kind',
        'count': 'count',
        'last_push': 'last_push',
        'name': 'name',
        'num_downloads': 'num_downloads',
        'size': 'size'
    }

    def __init__(self, backend_kind=None, count=None, last_push=None, name=None, num_downloads=None, size=None, _configuration=None):  # noqa: E501
        """PackageGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._backend_kind = None
        self._count = None
        self._last_push = None
        self._name = None
        self._num_downloads = None
        self._size = None
        self.discriminator = None

        if backend_kind is not None:
            self.backend_kind = backend_kind
        self.count = count
        self.last_push = last_push
        if name is not None:
            self.name = name
        self.num_downloads = num_downloads
        self.size = size

    @property
    def backend_kind(self):
        """Gets the backend_kind of this PackageGroup.


        :return: The backend_kind of this PackageGroup.
        :rtype: int
        """
        return self._backend_kind

    @backend_kind.setter
    def backend_kind(self, backend_kind):
        """Sets the backend_kind of this PackageGroup.


        :param backend_kind: The backend_kind of this PackageGroup.
        :type: int
        """

        self._backend_kind = backend_kind

    @property
    def count(self):
        """Gets the count of this PackageGroup.


        :return: The count of this PackageGroup.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PackageGroup.


        :param count: The count of this PackageGroup.
        :type: int
        """
        if self._configuration.client_side_validation and count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def last_push(self):
        """Gets the last_push of this PackageGroup.


        :return: The last_push of this PackageGroup.
        :rtype: datetime
        """
        return self._last_push

    @last_push.setter
    def last_push(self, last_push):
        """Sets the last_push of this PackageGroup.


        :param last_push: The last_push of this PackageGroup.
        :type: datetime
        """
        if self._configuration.client_side_validation and last_push is None:
            raise ValueError("Invalid value for `last_push`, must not be `None`")  # noqa: E501

        self._last_push = last_push

    @property
    def name(self):
        """Gets the name of this PackageGroup.


        :return: The name of this PackageGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackageGroup.


        :param name: The name of this PackageGroup.
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def num_downloads(self):
        """Gets the num_downloads of this PackageGroup.


        :return: The num_downloads of this PackageGroup.
        :rtype: int
        """
        return self._num_downloads

    @num_downloads.setter
    def num_downloads(self, num_downloads):
        """Sets the num_downloads of this PackageGroup.


        :param num_downloads: The num_downloads of this PackageGroup.
        :type: int
        """
        if self._configuration.client_side_validation and num_downloads is None:
            raise ValueError("Invalid value for `num_downloads`, must not be `None`")  # noqa: E501

        self._num_downloads = num_downloads

    @property
    def size(self):
        """Gets the size of this PackageGroup.


        :return: The size of this PackageGroup.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PackageGroup.


        :param size: The size of this PackageGroup.
        :type: int
        """
        if self._configuration.client_side_validation and size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageGroup):
            return True

        return self.to_dict() != other.to_dict()

