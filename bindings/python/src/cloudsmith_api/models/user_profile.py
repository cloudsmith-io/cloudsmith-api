# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserProfile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'name': 'str',
        'url': 'str',
        'tagline': 'str',
        'company': 'str',
        'joined_at': 'str',
        'slug_perm': 'str',
        'slug': 'str',
        'job_title': 'str'
    }

    attribute_map = {
        'first_name': 'first_name',
        'last_name': 'last_name',
        'name': 'name',
        'url': 'url',
        'tagline': 'tagline',
        'company': 'company',
        'joined_at': 'joined_at',
        'slug_perm': 'slug_perm',
        'slug': 'slug',
        'job_title': 'job_title'
    }

    def __init__(self, first_name=None, last_name=None, name=None, url=None, tagline=None, company=None, joined_at=None, slug_perm=None, slug=None, job_title=None):
        """
        UserProfile - a model defined in Swagger
        """

        self._first_name = None
        self._last_name = None
        self._name = None
        self._url = None
        self._tagline = None
        self._company = None
        self._joined_at = None
        self._slug_perm = None
        self._slug = None
        self._job_title = None

        self.first_name = first_name
        self.last_name = last_name
        if name is not None:
          self.name = name
        if url is not None:
          self.url = url
        if tagline is not None:
          self.tagline = tagline
        if company is not None:
          self.company = company
        if joined_at is not None:
          self.joined_at = joined_at
        if slug_perm is not None:
          self.slug_perm = slug_perm
        if slug is not None:
          self.slug = slug
        if job_title is not None:
          self.job_title = job_title

    @property
    def first_name(self):
        """
        Gets the first_name of this UserProfile.
        

        :return: The first_name of this UserProfile.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this UserProfile.
        

        :param first_name: The first_name of this UserProfile.
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this UserProfile.
        

        :return: The last_name of this UserProfile.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this UserProfile.
        

        :param last_name: The last_name of this UserProfile.
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def name(self):
        """
        Gets the name of this UserProfile.
        

        :return: The name of this UserProfile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserProfile.
        

        :param name: The name of this UserProfile.
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """
        Gets the url of this UserProfile.
        

        :return: The url of this UserProfile.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this UserProfile.
        

        :param url: The url of this UserProfile.
        :type: str
        """

        self._url = url

    @property
    def tagline(self):
        """
        Gets the tagline of this UserProfile.
        Your tagline is a sentence about you. Make it funny. Make it professional. Either way, it's public and it represents who you are.

        :return: The tagline of this UserProfile.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """
        Sets the tagline of this UserProfile.
        Your tagline is a sentence about you. Make it funny. Make it professional. Either way, it's public and it represents who you are.

        :param tagline: The tagline of this UserProfile.
        :type: str
        """

        self._tagline = tagline

    @property
    def company(self):
        """
        Gets the company of this UserProfile.
        

        :return: The company of this UserProfile.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """
        Sets the company of this UserProfile.
        

        :param company: The company of this UserProfile.
        :type: str
        """

        self._company = company

    @property
    def joined_at(self):
        """
        Gets the joined_at of this UserProfile.
        

        :return: The joined_at of this UserProfile.
        :rtype: str
        """
        return self._joined_at

    @joined_at.setter
    def joined_at(self, joined_at):
        """
        Sets the joined_at of this UserProfile.
        

        :param joined_at: The joined_at of this UserProfile.
        :type: str
        """

        self._joined_at = joined_at

    @property
    def slug_perm(self):
        """
        Gets the slug_perm of this UserProfile.
        

        :return: The slug_perm of this UserProfile.
        :rtype: str
        """
        return self._slug_perm

    @slug_perm.setter
    def slug_perm(self, slug_perm):
        """
        Sets the slug_perm of this UserProfile.
        

        :param slug_perm: The slug_perm of this UserProfile.
        :type: str
        """

        self._slug_perm = slug_perm

    @property
    def slug(self):
        """
        Gets the slug of this UserProfile.
        

        :return: The slug of this UserProfile.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this UserProfile.
        

        :param slug: The slug of this UserProfile.
        :type: str
        """

        self._slug = slug

    @property
    def job_title(self):
        """
        Gets the job_title of this UserProfile.
        

        :return: The job_title of this UserProfile.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """
        Sets the job_title of this UserProfile.
        

        :param job_title: The job_title of this UserProfile.
        :type: str
        """

        self._job_title = job_title

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
