# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class RepositoryCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cdn_url': 'str',
        'created_at': 'str',
        'deleted_at': 'str',
        'description': 'str',
        'gpg_keys': 'list[ReposGpgKeys]',
        'index_files': 'bool',
        'is_open_source': 'bool',
        'is_private': 'bool',
        'is_public': 'bool',
        'name': 'str',
        'namespace': 'str',
        'namespace_url': 'str',
        'num_downloads': 'int',
        'package_count': 'int',
        'package_group_count': 'int',
        'repository_type': 'int',
        'repository_type_str': 'str',
        'self_html_url': 'str',
        'self_url': 'str',
        'size': 'int',
        'size_str': 'str',
        'slug': 'str',
        'slug_perm': 'str',
        'storage_region': 'str'
    }

    attribute_map = {
        'cdn_url': 'cdn_url',
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'description': 'description',
        'gpg_keys': 'gpg_keys',
        'index_files': 'index_files',
        'is_open_source': 'is_open_source',
        'is_private': 'is_private',
        'is_public': 'is_public',
        'name': 'name',
        'namespace': 'namespace',
        'namespace_url': 'namespace_url',
        'num_downloads': 'num_downloads',
        'package_count': 'package_count',
        'package_group_count': 'package_group_count',
        'repository_type': 'repository_type',
        'repository_type_str': 'repository_type_str',
        'self_html_url': 'self_html_url',
        'self_url': 'self_url',
        'size': 'size',
        'size_str': 'size_str',
        'slug': 'slug',
        'slug_perm': 'slug_perm',
        'storage_region': 'storage_region'
    }

    def __init__(self, cdn_url=None, created_at=None, deleted_at=None, description=None, gpg_keys=None, index_files=None, is_open_source=None, is_private=None, is_public=None, name=None, namespace=None, namespace_url=None, num_downloads=None, package_count=None, package_group_count=None, repository_type=None, repository_type_str=None, self_html_url=None, self_url=None, size=None, size_str=None, slug=None, slug_perm=None, storage_region=None, _configuration=None):  # noqa: E501
        """RepositoryCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cdn_url = None
        self._created_at = None
        self._deleted_at = None
        self._description = None
        self._gpg_keys = None
        self._index_files = None
        self._is_open_source = None
        self._is_private = None
        self._is_public = None
        self._name = None
        self._namespace = None
        self._namespace_url = None
        self._num_downloads = None
        self._package_count = None
        self._package_group_count = None
        self._repository_type = None
        self._repository_type_str = None
        self._self_html_url = None
        self._self_url = None
        self._size = None
        self._size_str = None
        self._slug = None
        self._slug_perm = None
        self._storage_region = None
        self.discriminator = None

        if cdn_url is not None:
            self.cdn_url = cdn_url
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if gpg_keys is not None:
            self.gpg_keys = gpg_keys
        if index_files is not None:
            self.index_files = index_files
        if is_open_source is not None:
            self.is_open_source = is_open_source
        if is_private is not None:
            self.is_private = is_private
        if is_public is not None:
            self.is_public = is_public
        self.name = name
        if namespace is not None:
            self.namespace = namespace
        if namespace_url is not None:
            self.namespace_url = namespace_url
        if num_downloads is not None:
            self.num_downloads = num_downloads
        if package_count is not None:
            self.package_count = package_count
        if package_group_count is not None:
            self.package_group_count = package_group_count
        if repository_type is not None:
            self.repository_type = repository_type
        if repository_type_str is not None:
            self.repository_type_str = repository_type_str
        if self_html_url is not None:
            self.self_html_url = self_html_url
        if self_url is not None:
            self.self_url = self_url
        if size is not None:
            self.size = size
        if size_str is not None:
            self.size_str = size_str
        if slug is not None:
            self.slug = slug
        if slug_perm is not None:
            self.slug_perm = slug_perm
        if storage_region is not None:
            self.storage_region = storage_region

    @property
    def cdn_url(self):
        """Gets the cdn_url of this RepositoryCreate.  # noqa: E501

        Base URL from which packages and other artifacts are downloaded.  # noqa: E501

        :return: The cdn_url of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._cdn_url

    @cdn_url.setter
    def cdn_url(self, cdn_url):
        """Sets the cdn_url of this RepositoryCreate.

        Base URL from which packages and other artifacts are downloaded.  # noqa: E501

        :param cdn_url: The cdn_url of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._cdn_url = cdn_url

    @property
    def created_at(self):
        """Gets the created_at of this RepositoryCreate.  # noqa: E501

          # noqa: E501

        :return: The created_at of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RepositoryCreate.

          # noqa: E501

        :param created_at: The created_at of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this RepositoryCreate.  # noqa: E501

          # noqa: E501

        :return: The deleted_at of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this RepositoryCreate.

          # noqa: E501

        :param deleted_at: The deleted_at of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this RepositoryCreate.  # noqa: E501

        A description of the repository's purpose/contents.  # noqa: E501

        :return: The description of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RepositoryCreate.

        A description of the repository's purpose/contents.  # noqa: E501

        :param description: The description of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gpg_keys(self):
        """Gets the gpg_keys of this RepositoryCreate.  # noqa: E501

          # noqa: E501

        :return: The gpg_keys of this RepositoryCreate.  # noqa: E501
        :rtype: list[ReposGpgKeys]
        """
        return self._gpg_keys

    @gpg_keys.setter
    def gpg_keys(self, gpg_keys):
        """Sets the gpg_keys of this RepositoryCreate.

          # noqa: E501

        :param gpg_keys: The gpg_keys of this RepositoryCreate.  # noqa: E501
        :type: list[ReposGpgKeys]
        """

        self._gpg_keys = gpg_keys

    @property
    def index_files(self):
        """Gets the index_files of this RepositoryCreate.  # noqa: E501

        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.  # noqa: E501

        :return: The index_files of this RepositoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._index_files

    @index_files.setter
    def index_files(self, index_files):
        """Sets the index_files of this RepositoryCreate.

        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.  # noqa: E501

        :param index_files: The index_files of this RepositoryCreate.  # noqa: E501
        :type: bool
        """

        self._index_files = index_files

    @property
    def is_open_source(self):
        """Gets the is_open_source of this RepositoryCreate.  # noqa: E501

          # noqa: E501

        :return: The is_open_source of this RepositoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_open_source

    @is_open_source.setter
    def is_open_source(self, is_open_source):
        """Sets the is_open_source of this RepositoryCreate.

          # noqa: E501

        :param is_open_source: The is_open_source of this RepositoryCreate.  # noqa: E501
        :type: bool
        """

        self._is_open_source = is_open_source

    @property
    def is_private(self):
        """Gets the is_private of this RepositoryCreate.  # noqa: E501

          # noqa: E501

        :return: The is_private of this RepositoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this RepositoryCreate.

          # noqa: E501

        :param is_private: The is_private of this RepositoryCreate.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def is_public(self):
        """Gets the is_public of this RepositoryCreate.  # noqa: E501

          # noqa: E501

        :return: The is_public of this RepositoryCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this RepositoryCreate.

          # noqa: E501

        :param is_public: The is_public of this RepositoryCreate.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def name(self):
        """Gets the name of this RepositoryCreate.  # noqa: E501

        A descriptive name for the repository.  # noqa: E501

        :return: The name of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryCreate.

        A descriptive name for the repository.  # noqa: E501

        :param name: The name of this RepositoryCreate.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this RepositoryCreate.  # noqa: E501

        Namespace to which this repository belongs.  # noqa: E501

        :return: The namespace of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this RepositoryCreate.

        Namespace to which this repository belongs.  # noqa: E501

        :param namespace: The namespace of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def namespace_url(self):
        """Gets the namespace_url of this RepositoryCreate.  # noqa: E501

        API endpoint where data about this namespace can be retrieved.  # noqa: E501

        :return: The namespace_url of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._namespace_url

    @namespace_url.setter
    def namespace_url(self, namespace_url):
        """Sets the namespace_url of this RepositoryCreate.

        API endpoint where data about this namespace can be retrieved.  # noqa: E501

        :param namespace_url: The namespace_url of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._namespace_url = namespace_url

    @property
    def num_downloads(self):
        """Gets the num_downloads of this RepositoryCreate.  # noqa: E501

        The number of downloads for packages in the repository.  # noqa: E501

        :return: The num_downloads of this RepositoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._num_downloads

    @num_downloads.setter
    def num_downloads(self, num_downloads):
        """Sets the num_downloads of this RepositoryCreate.

        The number of downloads for packages in the repository.  # noqa: E501

        :param num_downloads: The num_downloads of this RepositoryCreate.  # noqa: E501
        :type: int
        """

        self._num_downloads = num_downloads

    @property
    def package_count(self):
        """Gets the package_count of this RepositoryCreate.  # noqa: E501

        The number of packages in the repository.  # noqa: E501

        :return: The package_count of this RepositoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._package_count

    @package_count.setter
    def package_count(self, package_count):
        """Sets the package_count of this RepositoryCreate.

        The number of packages in the repository.  # noqa: E501

        :param package_count: The package_count of this RepositoryCreate.  # noqa: E501
        :type: int
        """

        self._package_count = package_count

    @property
    def package_group_count(self):
        """Gets the package_group_count of this RepositoryCreate.  # noqa: E501

        The number of groups in the repository.  # noqa: E501

        :return: The package_group_count of this RepositoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._package_group_count

    @package_group_count.setter
    def package_group_count(self, package_group_count):
        """Sets the package_group_count of this RepositoryCreate.

        The number of groups in the repository.  # noqa: E501

        :param package_group_count: The package_group_count of this RepositoryCreate.  # noqa: E501
        :type: int
        """

        self._package_group_count = package_group_count

    @property
    def repository_type(self):
        """Gets the repository_type of this RepositoryCreate.  # noqa: E501

        The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.  # noqa: E501

        :return: The repository_type of this RepositoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this RepositoryCreate.

        The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.  # noqa: E501

        :param repository_type: The repository_type of this RepositoryCreate.  # noqa: E501
        :type: int
        """

        self._repository_type = repository_type

    @property
    def repository_type_str(self):
        """Gets the repository_type_str of this RepositoryCreate.  # noqa: E501

                 The repository type changes how it is accessed and billed.         Private repositories can only be used on paid plans, but are visible         only to you or authorised delegates. Public repositories are free to         use on all plans and visible to all Cloudsmith users.           # noqa: E501

        :return: The repository_type_str of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._repository_type_str

    @repository_type_str.setter
    def repository_type_str(self, repository_type_str):
        """Sets the repository_type_str of this RepositoryCreate.

                 The repository type changes how it is accessed and billed.         Private repositories can only be used on paid plans, but are visible         only to you or authorised delegates. Public repositories are free to         use on all plans and visible to all Cloudsmith users.           # noqa: E501

        :param repository_type_str: The repository_type_str of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._repository_type_str = repository_type_str

    @property
    def self_html_url(self):
        """Gets the self_html_url of this RepositoryCreate.  # noqa: E501

        Website URL for this repository.  # noqa: E501

        :return: The self_html_url of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._self_html_url

    @self_html_url.setter
    def self_html_url(self, self_html_url):
        """Sets the self_html_url of this RepositoryCreate.

        Website URL for this repository.  # noqa: E501

        :param self_html_url: The self_html_url of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._self_html_url = self_html_url

    @property
    def self_url(self):
        """Gets the self_url of this RepositoryCreate.  # noqa: E501

        API endpoint where data about this repository can be retrieved.  # noqa: E501

        :return: The self_url of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """Sets the self_url of this RepositoryCreate.

        API endpoint where data about this repository can be retrieved.  # noqa: E501

        :param self_url: The self_url of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._self_url = self_url

    @property
    def size(self):
        """Gets the size of this RepositoryCreate.  # noqa: E501

        The calculated size of the repository.  # noqa: E501

        :return: The size of this RepositoryCreate.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this RepositoryCreate.

        The calculated size of the repository.  # noqa: E501

        :param size: The size of this RepositoryCreate.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def size_str(self):
        """Gets the size_str of this RepositoryCreate.  # noqa: E501

        The calculated size of the repository (human readable).  # noqa: E501

        :return: The size_str of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._size_str

    @size_str.setter
    def size_str(self, size_str):
        """Sets the size_str of this RepositoryCreate.

        The calculated size of the repository (human readable).  # noqa: E501

        :param size_str: The size_str of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._size_str = size_str

    @property
    def slug(self):
        """Gets the slug of this RepositoryCreate.  # noqa: E501

        The slug identifies the repository in URIs.  # noqa: E501

        :return: The slug of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this RepositoryCreate.

        The slug identifies the repository in URIs.  # noqa: E501

        :param slug: The slug of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def slug_perm(self):
        """Gets the slug_perm of this RepositoryCreate.  # noqa: E501

        The slug_perm immutably identifies the repository. It will never change once a repository has been created.  # noqa: E501

        :return: The slug_perm of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._slug_perm

    @slug_perm.setter
    def slug_perm(self, slug_perm):
        """Sets the slug_perm of this RepositoryCreate.

        The slug_perm immutably identifies the repository. It will never change once a repository has been created.  # noqa: E501

        :param slug_perm: The slug_perm of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._slug_perm = slug_perm

    @property
    def storage_region(self):
        """Gets the storage_region of this RepositoryCreate.  # noqa: E501

        The Cloudsmith region in which package files are stored.  # noqa: E501

        :return: The storage_region of this RepositoryCreate.  # noqa: E501
        :rtype: str
        """
        return self._storage_region

    @storage_region.setter
    def storage_region(self, storage_region):
        """Sets the storage_region of this RepositoryCreate.

        The Cloudsmith region in which package files are stored.  # noqa: E501

        :param storage_region: The storage_region of this RepositoryCreate.  # noqa: E501
        :type: str
        """

        self._storage_region = storage_region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryCreate):
            return True

        return self.to_dict() != other.to_dict()
