# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class PackageFileUpload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'upload_fields': 'object',
        'upload_headers': 'object',
        'upload_querystring': 'str',
        'upload_url': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'upload_fields': 'upload_fields',
        'upload_headers': 'upload_headers',
        'upload_querystring': 'upload_querystring',
        'upload_url': 'upload_url'
    }

    def __init__(self, identifier=None, upload_fields=None, upload_headers=None, upload_querystring=None, upload_url=None, _configuration=None):  # noqa: E501
        """PackageFileUpload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._identifier = None
        self._upload_fields = None
        self._upload_headers = None
        self._upload_querystring = None
        self._upload_url = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if upload_fields is not None:
            self.upload_fields = upload_fields
        if upload_headers is not None:
            self.upload_headers = upload_headers
        if upload_querystring is not None:
            self.upload_querystring = upload_querystring
        if upload_url is not None:
            self.upload_url = upload_url

    @property
    def identifier(self):
        """Gets the identifier of this PackageFileUpload.

        The identifier for the file to use when creating packages

        :return: The identifier of this PackageFileUpload.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PackageFileUpload.

        The identifier for the file to use when creating packages

        :param identifier: The identifier of this PackageFileUpload.
        :type: str
        """
        if (self._configuration.client_side_validation and
                identifier is not None and len(identifier) < 1):
            raise ValueError("Invalid value for `identifier`, length must be greater than or equal to `1`")  # noqa: E501

        self._identifier = identifier

    @property
    def upload_fields(self):
        """Gets the upload_fields of this PackageFileUpload.

        The dictionary of fields that must be sent with POST uploads

        :return: The upload_fields of this PackageFileUpload.
        :rtype: object
        """
        return self._upload_fields

    @upload_fields.setter
    def upload_fields(self, upload_fields):
        """Sets the upload_fields of this PackageFileUpload.

        The dictionary of fields that must be sent with POST uploads

        :param upload_fields: The upload_fields of this PackageFileUpload.
        :type: object
        """

        self._upload_fields = upload_fields

    @property
    def upload_headers(self):
        """Gets the upload_headers of this PackageFileUpload.

        The dictionary of headers that must be sent with uploads

        :return: The upload_headers of this PackageFileUpload.
        :rtype: object
        """
        return self._upload_headers

    @upload_headers.setter
    def upload_headers(self, upload_headers):
        """Sets the upload_headers of this PackageFileUpload.

        The dictionary of headers that must be sent with uploads

        :param upload_headers: The upload_headers of this PackageFileUpload.
        :type: object
        """

        self._upload_headers = upload_headers

    @property
    def upload_querystring(self):
        """Gets the upload_querystring of this PackageFileUpload.

        The querystring to use for the next-step POST or PUT upload

        :return: The upload_querystring of this PackageFileUpload.
        :rtype: str
        """
        return self._upload_querystring

    @upload_querystring.setter
    def upload_querystring(self, upload_querystring):
        """Sets the upload_querystring of this PackageFileUpload.

        The querystring to use for the next-step POST or PUT upload

        :param upload_querystring: The upload_querystring of this PackageFileUpload.
        :type: str
        """
        if (self._configuration.client_side_validation and
                upload_querystring is not None and len(upload_querystring) < 1):
            raise ValueError("Invalid value for `upload_querystring`, length must be greater than or equal to `1`")  # noqa: E501

        self._upload_querystring = upload_querystring

    @property
    def upload_url(self):
        """Gets the upload_url of this PackageFileUpload.

        The URL to use for the next-step POST or PUT upload

        :return: The upload_url of this PackageFileUpload.
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this PackageFileUpload.

        The URL to use for the next-step POST or PUT upload

        :param upload_url: The upload_url of this PackageFileUpload.
        :type: str
        """
        if (self._configuration.client_side_validation and
                upload_url is not None and len(upload_url) < 1):
            raise ValueError("Invalid value for `upload_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._upload_url = upload_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageFileUpload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageFileUpload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageFileUpload):
            return True

        return self.to_dict() != other.to_dict()

