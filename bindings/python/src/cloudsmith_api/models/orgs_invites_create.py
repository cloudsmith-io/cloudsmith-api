# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class OrgsInvitesCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'inviter': 'str',
        'role': 'str',
        'slug_perm': 'str',
        'user': 'str'
    }

    attribute_map = {
        'email': 'email',
        'inviter': 'inviter',
        'role': 'role',
        'slug_perm': 'slug_perm',
        'user': 'user'
    }

    def __init__(self, email=None, inviter=None, role=None, slug_perm=None, user=None, _configuration=None):  # noqa: E501
        """OrgsInvitesCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._inviter = None
        self._role = None
        self._slug_perm = None
        self._user = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if inviter is not None:
            self.inviter = inviter
        if role is not None:
            self.role = role
        if slug_perm is not None:
            self.slug_perm = slug_perm
        if user is not None:
            self.user = user

    @property
    def email(self):
        """Gets the email of this OrgsInvitesCreate.

        None

        :return: The email of this OrgsInvitesCreate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrgsInvitesCreate.

        None

        :param email: The email of this OrgsInvitesCreate.
        :type: str
        """

        self._email = email

    @property
    def inviter(self):
        """Gets the inviter of this OrgsInvitesCreate.

        None

        :return: The inviter of this OrgsInvitesCreate.
        :rtype: str
        """
        return self._inviter

    @inviter.setter
    def inviter(self, inviter):
        """Sets the inviter of this OrgsInvitesCreate.

        None

        :param inviter: The inviter of this OrgsInvitesCreate.
        :type: str
        """

        self._inviter = inviter

    @property
    def role(self):
        """Gets the role of this OrgsInvitesCreate.

        None

        :return: The role of this OrgsInvitesCreate.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrgsInvitesCreate.

        None

        :param role: The role of this OrgsInvitesCreate.
        :type: str
        """
        allowed_values = ["Owner", "Manager", "Member", "Collaborator"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role not in allowed_values):
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def slug_perm(self):
        """Gets the slug_perm of this OrgsInvitesCreate.

        None

        :return: The slug_perm of this OrgsInvitesCreate.
        :rtype: str
        """
        return self._slug_perm

    @slug_perm.setter
    def slug_perm(self, slug_perm):
        """Sets the slug_perm of this OrgsInvitesCreate.

        None

        :param slug_perm: The slug_perm of this OrgsInvitesCreate.
        :type: str
        """

        self._slug_perm = slug_perm

    @property
    def user(self):
        """Gets the user of this OrgsInvitesCreate.

        None

        :return: The user of this OrgsInvitesCreate.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OrgsInvitesCreate.

        None

        :param user: The user of this OrgsInvitesCreate.
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgsInvitesCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgsInvitesCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgsInvitesCreate):
            return True

        return self.to_dict() != other.to_dict()

