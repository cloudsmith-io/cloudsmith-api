# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EntitlementTokenMetric(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth_per_token': 'object',
        'totals': 'object'
    }

    attribute_map = {
        'bandwidth_per_token': 'bandwidth_per_token',
        'totals': 'totals'
    }

    def __init__(self, bandwidth_per_token=None, totals=None):
        """
        EntitlementTokenMetric - a model defined in Swagger
        """

        self._bandwidth_per_token = None
        self._totals = None

        self.bandwidth_per_token = bandwidth_per_token
        self.totals = totals

    @property
    def bandwidth_per_token(self):
        """
        Gets the bandwidth_per_token of this EntitlementTokenMetric.
        

        :return: The bandwidth_per_token of this EntitlementTokenMetric.
        :rtype: object
        """
        return self._bandwidth_per_token

    @bandwidth_per_token.setter
    def bandwidth_per_token(self, bandwidth_per_token):
        """
        Sets the bandwidth_per_token of this EntitlementTokenMetric.
        

        :param bandwidth_per_token: The bandwidth_per_token of this EntitlementTokenMetric.
        :type: object
        """
        if bandwidth_per_token is None:
            raise ValueError("Invalid value for `bandwidth_per_token`, must not be `None`")

        self._bandwidth_per_token = bandwidth_per_token

    @property
    def totals(self):
        """
        Gets the totals of this EntitlementTokenMetric.
        

        :return: The totals of this EntitlementTokenMetric.
        :rtype: object
        """
        return self._totals

    @totals.setter
    def totals(self, totals):
        """
        Sets the totals of this EntitlementTokenMetric.
        

        :param totals: The totals of this EntitlementTokenMetric.
        :type: object
        """
        if totals is None:
            raise ValueError("Invalid value for `totals`, must not be `None`")

        self._totals = totals

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EntitlementTokenMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
