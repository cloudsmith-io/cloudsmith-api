# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class OrganizationMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'has_two_factor': 'bool',
        'joined_at': 'datetime',
        'last_login_at': 'datetime',
        'last_login_method': 'str',
        'role': 'str',
        'user': 'str',
        'user_id': 'str',
        'user_name': 'str',
        'user_url': 'str',
        'visibility': 'str'
    }

    attribute_map = {
        'email': 'email',
        'has_two_factor': 'has_two_factor',
        'joined_at': 'joined_at',
        'last_login_at': 'last_login_at',
        'last_login_method': 'last_login_method',
        'role': 'role',
        'user': 'user',
        'user_id': 'user_id',
        'user_name': 'user_name',
        'user_url': 'user_url',
        'visibility': 'visibility'
    }

    def __init__(self, email=None, has_two_factor=None, joined_at=None, last_login_at=None, last_login_method='Unknown', role='Owner', user=None, user_id=None, user_name=None, user_url=None, visibility='Public', _configuration=None):  # noqa: E501
        """OrganizationMembership - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._email = None
        self._has_two_factor = None
        self._joined_at = None
        self._last_login_at = None
        self._last_login_method = None
        self._role = None
        self._user = None
        self._user_id = None
        self._user_name = None
        self._user_url = None
        self._visibility = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if has_two_factor is not None:
            self.has_two_factor = has_two_factor
        if joined_at is not None:
            self.joined_at = joined_at
        if last_login_at is not None:
            self.last_login_at = last_login_at
        if last_login_method is not None:
            self.last_login_method = last_login_method
        if role is not None:
            self.role = role
        if user is not None:
            self.user = user
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name
        if user_url is not None:
            self.user_url = user_url
        if visibility is not None:
            self.visibility = visibility

    @property
    def email(self):
        """Gets the email of this OrganizationMembership.


        :return: The email of this OrganizationMembership.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrganizationMembership.


        :param email: The email of this OrganizationMembership.
        :type: str
        """
        if (self._configuration.client_side_validation and
                email is not None and len(email) < 1):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def has_two_factor(self):
        """Gets the has_two_factor of this OrganizationMembership.


        :return: The has_two_factor of this OrganizationMembership.
        :rtype: bool
        """
        return self._has_two_factor

    @has_two_factor.setter
    def has_two_factor(self, has_two_factor):
        """Sets the has_two_factor of this OrganizationMembership.


        :param has_two_factor: The has_two_factor of this OrganizationMembership.
        :type: bool
        """

        self._has_two_factor = has_two_factor

    @property
    def joined_at(self):
        """Gets the joined_at of this OrganizationMembership.


        :return: The joined_at of this OrganizationMembership.
        :rtype: datetime
        """
        return self._joined_at

    @joined_at.setter
    def joined_at(self, joined_at):
        """Sets the joined_at of this OrganizationMembership.


        :param joined_at: The joined_at of this OrganizationMembership.
        :type: datetime
        """

        self._joined_at = joined_at

    @property
    def last_login_at(self):
        """Gets the last_login_at of this OrganizationMembership.


        :return: The last_login_at of this OrganizationMembership.
        :rtype: datetime
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at):
        """Sets the last_login_at of this OrganizationMembership.


        :param last_login_at: The last_login_at of this OrganizationMembership.
        :type: datetime
        """

        self._last_login_at = last_login_at

    @property
    def last_login_method(self):
        """Gets the last_login_method of this OrganizationMembership.


        :return: The last_login_method of this OrganizationMembership.
        :rtype: str
        """
        return self._last_login_method

    @last_login_method.setter
    def last_login_method(self, last_login_method):
        """Sets the last_login_method of this OrganizationMembership.


        :param last_login_method: The last_login_method of this OrganizationMembership.
        :type: str
        """
        allowed_values = ["Unknown", "Password", "Social", "SAML"]  # noqa: E501
        if (self._configuration.client_side_validation and
                last_login_method not in allowed_values):
            raise ValueError(
                "Invalid value for `last_login_method` ({0}), must be one of {1}"  # noqa: E501
                .format(last_login_method, allowed_values)
            )

        self._last_login_method = last_login_method

    @property
    def role(self):
        """Gets the role of this OrganizationMembership.


        :return: The role of this OrganizationMembership.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationMembership.


        :param role: The role of this OrganizationMembership.
        :type: str
        """
        allowed_values = ["Owner", "Manager", "Member", "Collaborator"]  # noqa: E501
        if (self._configuration.client_side_validation and
                role not in allowed_values):
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user(self):
        """Gets the user of this OrganizationMembership.


        :return: The user of this OrganizationMembership.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OrganizationMembership.


        :param user: The user of this OrganizationMembership.
        :type: str
        """
        if (self._configuration.client_side_validation and
                user is not None and len(user) < 1):
            raise ValueError("Invalid value for `user`, length must be greater than or equal to `1`")  # noqa: E501

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this OrganizationMembership.


        :return: The user_id of this OrganizationMembership.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OrganizationMembership.


        :param user_id: The user_id of this OrganizationMembership.
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_id is not None and len(user_id) < 1):
            raise ValueError("Invalid value for `user_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this OrganizationMembership.


        :return: The user_name of this OrganizationMembership.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this OrganizationMembership.


        :param user_name: The user_name of this OrganizationMembership.
        :type: str
        """
        if (self._configuration.client_side_validation and
                user_name is not None and len(user_name) < 1):
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._user_name = user_name

    @property
    def user_url(self):
        """Gets the user_url of this OrganizationMembership.


        :return: The user_url of this OrganizationMembership.
        :rtype: str
        """
        return self._user_url

    @user_url.setter
    def user_url(self, user_url):
        """Sets the user_url of this OrganizationMembership.


        :param user_url: The user_url of this OrganizationMembership.
        :type: str
        """

        self._user_url = user_url

    @property
    def visibility(self):
        """Gets the visibility of this OrganizationMembership.


        :return: The visibility of this OrganizationMembership.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this OrganizationMembership.


        :param visibility: The visibility of this OrganizationMembership.
        :type: str
        """
        allowed_values = ["Public", "Private"]  # noqa: E501
        if (self._configuration.client_side_validation and
                visibility not in allowed_values):
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"  # noqa: E501
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationMembership):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationMembership):
            return True

        return self.to_dict() != other.to_dict()

