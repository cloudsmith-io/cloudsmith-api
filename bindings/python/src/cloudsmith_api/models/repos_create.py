# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReposCreate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'index_files': 'bool',
        'is_open_source': 'bool',
        'is_private': 'bool',
        'is_public': 'bool',
        'name': 'str',
        'namespace': 'str',
        'repository_type_str': 'str',
        'slug': 'str'
    }

    attribute_map = {
        'description': 'description',
        'index_files': 'index_files',
        'is_open_source': 'is_open_source',
        'is_private': 'is_private',
        'is_public': 'is_public',
        'name': 'name',
        'namespace': 'namespace',
        'repository_type_str': 'repository_type_str',
        'slug': 'slug'
    }

    def __init__(self, description=None, index_files=None, is_open_source=None, is_private=None, is_public=None, name=None, namespace=None, repository_type_str=None, slug=None):
        """
        ReposCreate - a model defined in Swagger
        """

        self._description = None
        self._index_files = None
        self._is_open_source = None
        self._is_private = None
        self._is_public = None
        self._name = None
        self._namespace = None
        self._repository_type_str = None
        self._slug = None

        if description is not None:
          self.description = description
        if index_files is not None:
          self.index_files = index_files
        if is_open_source is not None:
          self.is_open_source = is_open_source
        if is_private is not None:
          self.is_private = is_private
        if is_public is not None:
          self.is_public = is_public
        self.name = name
        self.namespace = namespace
        if repository_type_str is not None:
          self.repository_type_str = repository_type_str
        self.slug = slug

    @property
    def description(self):
        """
        Gets the description of this ReposCreate.
        None

        :return: The description of this ReposCreate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ReposCreate.
        None

        :param description: The description of this ReposCreate.
        :type: str
        """

        self._description = description

    @property
    def index_files(self):
        """
        Gets the index_files of this ReposCreate.
        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.

        :return: The index_files of this ReposCreate.
        :rtype: bool
        """
        return self._index_files

    @index_files.setter
    def index_files(self, index_files):
        """
        Sets the index_files of this ReposCreate.
        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.

        :param index_files: The index_files of this ReposCreate.
        :type: bool
        """

        self._index_files = index_files

    @property
    def is_open_source(self):
        """
        Gets the is_open_source of this ReposCreate.
        None

        :return: The is_open_source of this ReposCreate.
        :rtype: bool
        """
        return self._is_open_source

    @is_open_source.setter
    def is_open_source(self, is_open_source):
        """
        Sets the is_open_source of this ReposCreate.
        None

        :param is_open_source: The is_open_source of this ReposCreate.
        :type: bool
        """

        self._is_open_source = is_open_source

    @property
    def is_private(self):
        """
        Gets the is_private of this ReposCreate.
        None

        :return: The is_private of this ReposCreate.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """
        Sets the is_private of this ReposCreate.
        None

        :param is_private: The is_private of this ReposCreate.
        :type: bool
        """

        self._is_private = is_private

    @property
    def is_public(self):
        """
        Gets the is_public of this ReposCreate.
        None

        :return: The is_public of this ReposCreate.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """
        Sets the is_public of this ReposCreate.
        None

        :param is_public: The is_public of this ReposCreate.
        :type: bool
        """

        self._is_public = is_public

    @property
    def name(self):
        """
        Gets the name of this ReposCreate.
        A descriptive name for the repository.

        :return: The name of this ReposCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ReposCreate.
        A descriptive name for the repository.

        :param name: The name of this ReposCreate.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this ReposCreate.
        None

        :return: The namespace of this ReposCreate.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this ReposCreate.
        None

        :param namespace: The namespace of this ReposCreate.
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def repository_type_str(self):
        """
        Gets the repository_type_str of this ReposCreate.
        None

        :return: The repository_type_str of this ReposCreate.
        :rtype: str
        """
        return self._repository_type_str

    @repository_type_str.setter
    def repository_type_str(self, repository_type_str):
        """
        Sets the repository_type_str of this ReposCreate.
        None

        :param repository_type_str: The repository_type_str of this ReposCreate.
        :type: str
        """

        self._repository_type_str = repository_type_str

    @property
    def slug(self):
        """
        Gets the slug of this ReposCreate.
        None

        :return: The slug of this ReposCreate.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this ReposCreate.
        None

        :param slug: The slug of this ReposCreate.
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReposCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
