# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class PackageLicensePolicyViolationLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_at': 'datetime',
        'package': 'PackageVulnerability',
        'policy': 'NestedLicensePolicy',
        'reasons': 'list[str]'
    }

    attribute_map = {
        'event_at': 'event_at',
        'package': 'package',
        'policy': 'policy',
        'reasons': 'reasons'
    }

    def __init__(self, event_at=None, package=None, policy=None, reasons=None, _configuration=None):  # noqa: E501
        """PackageLicensePolicyViolationLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._event_at = None
        self._package = None
        self._policy = None
        self._reasons = None
        self.discriminator = None

        if event_at is not None:
            self.event_at = event_at
        self.package = package
        self.policy = policy
        self.reasons = reasons

    @property
    def event_at(self):
        """Gets the event_at of this PackageLicensePolicyViolationLog.


        :return: The event_at of this PackageLicensePolicyViolationLog.
        :rtype: datetime
        """
        return self._event_at

    @event_at.setter
    def event_at(self, event_at):
        """Sets the event_at of this PackageLicensePolicyViolationLog.


        :param event_at: The event_at of this PackageLicensePolicyViolationLog.
        :type: datetime
        """

        self._event_at = event_at

    @property
    def package(self):
        """Gets the package of this PackageLicensePolicyViolationLog.


        :return: The package of this PackageLicensePolicyViolationLog.
        :rtype: PackageVulnerability
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this PackageLicensePolicyViolationLog.


        :param package: The package of this PackageLicensePolicyViolationLog.
        :type: PackageVulnerability
        """
        if self._configuration.client_side_validation and package is None:
            raise ValueError("Invalid value for `package`, must not be `None`")  # noqa: E501

        self._package = package

    @property
    def policy(self):
        """Gets the policy of this PackageLicensePolicyViolationLog.


        :return: The policy of this PackageLicensePolicyViolationLog.
        :rtype: NestedLicensePolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PackageLicensePolicyViolationLog.


        :param policy: The policy of this PackageLicensePolicyViolationLog.
        :type: NestedLicensePolicy
        """
        if self._configuration.client_side_validation and policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501

        self._policy = policy

    @property
    def reasons(self):
        """Gets the reasons of this PackageLicensePolicyViolationLog.


        :return: The reasons of this PackageLicensePolicyViolationLog.
        :rtype: list[str]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this PackageLicensePolicyViolationLog.


        :param reasons: The reasons of this PackageLicensePolicyViolationLog.
        :type: list[str]
        """
        if self._configuration.client_side_validation and reasons is None:
            raise ValueError("Invalid value for `reasons`, must not be `None`")  # noqa: E501

        self._reasons = reasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageLicensePolicyViolationLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageLicensePolicyViolationLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageLicensePolicyViolationLog):
            return True

        return self.to_dict() != other.to_dict()

