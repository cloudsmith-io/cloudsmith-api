# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class OrgsSamlgroupsyncCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idp_key': 'str',
        'idp_value': 'str',
        'organization': 'str',
        'role': 'str',
        'team': 'str'
    }

    attribute_map = {
        'idp_key': 'idp_key',
        'idp_value': 'idp_value',
        'organization': 'organization',
        'role': 'role',
        'team': 'team'
    }

    def __init__(self, idp_key=None, idp_value=None, organization=None, role=None, team=None, _configuration=None):  # noqa: E501
        """OrgsSamlgroupsyncCreate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._idp_key = None
        self._idp_value = None
        self._organization = None
        self._role = None
        self._team = None
        self.discriminator = None

        self.idp_key = idp_key
        self.idp_value = idp_value
        self.organization = organization
        if role is not None:
            self.role = role
        self.team = team

    @property
    def idp_key(self):
        """Gets the idp_key of this OrgsSamlgroupsyncCreate.

        None

        :return: The idp_key of this OrgsSamlgroupsyncCreate.
        :rtype: str
        """
        return self._idp_key

    @idp_key.setter
    def idp_key(self, idp_key):
        """Sets the idp_key of this OrgsSamlgroupsyncCreate.

        None

        :param idp_key: The idp_key of this OrgsSamlgroupsyncCreate.
        :type: str
        """
        if self._configuration.client_side_validation and idp_key is None:
            raise ValueError("Invalid value for `idp_key`, must not be `None`")  # noqa: E501

        self._idp_key = idp_key

    @property
    def idp_value(self):
        """Gets the idp_value of this OrgsSamlgroupsyncCreate.

        None

        :return: The idp_value of this OrgsSamlgroupsyncCreate.
        :rtype: str
        """
        return self._idp_value

    @idp_value.setter
    def idp_value(self, idp_value):
        """Sets the idp_value of this OrgsSamlgroupsyncCreate.

        None

        :param idp_value: The idp_value of this OrgsSamlgroupsyncCreate.
        :type: str
        """
        if self._configuration.client_side_validation and idp_value is None:
            raise ValueError("Invalid value for `idp_value`, must not be `None`")  # noqa: E501

        self._idp_value = idp_value

    @property
    def organization(self):
        """Gets the organization of this OrgsSamlgroupsyncCreate.

        None

        :return: The organization of this OrgsSamlgroupsyncCreate.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this OrgsSamlgroupsyncCreate.

        None

        :param organization: The organization of this OrgsSamlgroupsyncCreate.
        :type: str
        """
        if self._configuration.client_side_validation and organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def role(self):
        """Gets the role of this OrgsSamlgroupsyncCreate.

                User role within the team.          A `manager` is capable of adding/removing others to/from the team, and         can set the role of other users and other settings pertaining to the         team.          A 'member' is a normal user that inherits the settings and privileges         assigned to the team.         

        :return: The role of this OrgsSamlgroupsyncCreate.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrgsSamlgroupsyncCreate.

                User role within the team.          A `manager` is capable of adding/removing others to/from the team, and         can set the role of other users and other settings pertaining to the         team.          A 'member' is a normal user that inherits the settings and privileges         assigned to the team.         

        :param role: The role of this OrgsSamlgroupsyncCreate.
        :type: str
        """

        self._role = role

    @property
    def team(self):
        """Gets the team of this OrgsSamlgroupsyncCreate.

        None

        :return: The team of this OrgsSamlgroupsyncCreate.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this OrgsSamlgroupsyncCreate.

        None

        :param team: The team of this OrgsSamlgroupsyncCreate.
        :type: str
        """
        if self._configuration.client_side_validation and team is None:
            raise ValueError("Invalid value for `team`, must not be `None`")  # noqa: E501

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgsSamlgroupsyncCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgsSamlgroupsyncCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgsSamlgroupsyncCreate):
            return True

        return self.to_dict() != other.to_dict()

