# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FilesValidate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'md5_checksum': 'str',
        'filename': 'str'
    }

    attribute_map = {
        'md5_checksum': 'md5_checksum',
        'filename': 'filename'
    }

    def __init__(self, md5_checksum=None, filename=None):
        """
        FilesValidate - a model defined in Swagger
        """

        self._md5_checksum = None
        self._filename = None

        self.md5_checksum = md5_checksum
        self.filename = filename

    @property
    def md5_checksum(self):
        """
        Gets the md5_checksum of this FilesValidate.
        MD5 checksum for the package file upload.

        :return: The md5_checksum of this FilesValidate.
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """
        Sets the md5_checksum of this FilesValidate.
        MD5 checksum for the package file upload.

        :param md5_checksum: The md5_checksum of this FilesValidate.
        :type: str
        """
        if md5_checksum is None:
            raise ValueError("Invalid value for `md5_checksum`, must not be `None`")

        self._md5_checksum = md5_checksum

    @property
    def filename(self):
        """
        Gets the filename of this FilesValidate.
        Filename for the package file upload.

        :return: The filename of this FilesValidate.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this FilesValidate.
        Filename for the package file upload.

        :param filename: The filename of this FilesValidate.
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FilesValidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
