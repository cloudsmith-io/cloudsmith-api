# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class Vulnerability(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_version': 'VulnerabilityScanVersion',
        'description': 'str',
        'fixed_version': 'VulnerabilityScanVersion',
        'package_name': 'str',
        'references': 'list[str]',
        'severity': 'str',
        'severity_source': 'str',
        'title': 'str',
        'vulnerability_id': 'str'
    }

    attribute_map = {
        'affected_version': 'affected_version',
        'description': 'description',
        'fixed_version': 'fixed_version',
        'package_name': 'package_name',
        'references': 'references',
        'severity': 'severity',
        'severity_source': 'severity_source',
        'title': 'title',
        'vulnerability_id': 'vulnerability_id'
    }

    def __init__(self, affected_version=None, description=None, fixed_version=None, package_name=None, references=None, severity='Unknown', severity_source=None, title=None, vulnerability_id=None, _configuration=None):  # noqa: E501
        """Vulnerability - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._affected_version = None
        self._description = None
        self._fixed_version = None
        self._package_name = None
        self._references = None
        self._severity = None
        self._severity_source = None
        self._title = None
        self._vulnerability_id = None
        self.discriminator = None

        self.affected_version = affected_version
        self.description = description
        self.fixed_version = fixed_version
        self.package_name = package_name
        self.references = references
        if severity is not None:
            self.severity = severity
        self.severity_source = severity_source
        self.title = title
        self.vulnerability_id = vulnerability_id

    @property
    def affected_version(self):
        """Gets the affected_version of this Vulnerability.


        :return: The affected_version of this Vulnerability.
        :rtype: VulnerabilityScanVersion
        """
        return self._affected_version

    @affected_version.setter
    def affected_version(self, affected_version):
        """Sets the affected_version of this Vulnerability.


        :param affected_version: The affected_version of this Vulnerability.
        :type: VulnerabilityScanVersion
        """
        if self._configuration.client_side_validation and affected_version is None:
            raise ValueError("Invalid value for `affected_version`, must not be `None`")  # noqa: E501

        self._affected_version = affected_version

    @property
    def description(self):
        """Gets the description of this Vulnerability.


        :return: The description of this Vulnerability.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Vulnerability.


        :param description: The description of this Vulnerability.
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1028):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1028`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def fixed_version(self):
        """Gets the fixed_version of this Vulnerability.


        :return: The fixed_version of this Vulnerability.
        :rtype: VulnerabilityScanVersion
        """
        return self._fixed_version

    @fixed_version.setter
    def fixed_version(self, fixed_version):
        """Sets the fixed_version of this Vulnerability.


        :param fixed_version: The fixed_version of this Vulnerability.
        :type: VulnerabilityScanVersion
        """
        if self._configuration.client_side_validation and fixed_version is None:
            raise ValueError("Invalid value for `fixed_version`, must not be `None`")  # noqa: E501

        self._fixed_version = fixed_version

    @property
    def package_name(self):
        """Gets the package_name of this Vulnerability.


        :return: The package_name of this Vulnerability.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Vulnerability.


        :param package_name: The package_name of this Vulnerability.
        :type: str
        """
        if self._configuration.client_side_validation and package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                package_name is not None and len(package_name) > 128):
            raise ValueError("Invalid value for `package_name`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                package_name is not None and len(package_name) < 1):
            raise ValueError("Invalid value for `package_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._package_name = package_name

    @property
    def references(self):
        """Gets the references of this Vulnerability.


        :return: The references of this Vulnerability.
        :rtype: list[str]
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Vulnerability.


        :param references: The references of this Vulnerability.
        :type: list[str]
        """
        if self._configuration.client_side_validation and references is None:
            raise ValueError("Invalid value for `references`, must not be `None`")  # noqa: E501

        self._references = references

    @property
    def severity(self):
        """Gets the severity of this Vulnerability.


        :return: The severity of this Vulnerability.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Vulnerability.


        :param severity: The severity of this Vulnerability.
        :type: str
        """
        allowed_values = ["Unknown", "Low", "Medium", "High", "Critical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                severity not in allowed_values):
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def severity_source(self):
        """Gets the severity_source of this Vulnerability.


        :return: The severity_source of this Vulnerability.
        :rtype: str
        """
        return self._severity_source

    @severity_source.setter
    def severity_source(self, severity_source):
        """Sets the severity_source of this Vulnerability.


        :param severity_source: The severity_source of this Vulnerability.
        :type: str
        """
        if self._configuration.client_side_validation and severity_source is None:
            raise ValueError("Invalid value for `severity_source`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                severity_source is not None and len(severity_source) > 128):
            raise ValueError("Invalid value for `severity_source`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                severity_source is not None and len(severity_source) < 1):
            raise ValueError("Invalid value for `severity_source`, length must be greater than or equal to `1`")  # noqa: E501

        self._severity_source = severity_source

    @property
    def title(self):
        """Gets the title of this Vulnerability.


        :return: The title of this Vulnerability.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Vulnerability.


        :param title: The title of this Vulnerability.
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 512):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `512`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def vulnerability_id(self):
        """Gets the vulnerability_id of this Vulnerability.


        :return: The vulnerability_id of this Vulnerability.
        :rtype: str
        """
        return self._vulnerability_id

    @vulnerability_id.setter
    def vulnerability_id(self, vulnerability_id):
        """Sets the vulnerability_id of this Vulnerability.


        :param vulnerability_id: The vulnerability_id of this Vulnerability.
        :type: str
        """
        if self._configuration.client_side_validation and vulnerability_id is None:
            raise ValueError("Invalid value for `vulnerability_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vulnerability_id is not None and len(vulnerability_id) > 13):
            raise ValueError("Invalid value for `vulnerability_id`, length must be less than or equal to `13`")  # noqa: E501
        if (self._configuration.client_side_validation and
                vulnerability_id is not None and len(vulnerability_id) < 1):
            raise ValueError("Invalid value for `vulnerability_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._vulnerability_id = vulnerability_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Vulnerability, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Vulnerability):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Vulnerability):
            return True

        return self.to_dict() != other.to_dict()

