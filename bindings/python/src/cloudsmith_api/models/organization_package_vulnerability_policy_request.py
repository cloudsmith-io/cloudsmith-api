# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class OrganizationPackageVulnerabilityPolicyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_unknown_severity': 'bool',
        'description': 'str',
        'min_severity': 'str',
        'name': 'str',
        'on_violation_quarantine': 'bool',
        'package_query_string': 'str'
    }

    attribute_map = {
        'allow_unknown_severity': 'allow_unknown_severity',
        'description': 'description',
        'min_severity': 'min_severity',
        'name': 'name',
        'on_violation_quarantine': 'on_violation_quarantine',
        'package_query_string': 'package_query_string'
    }

    def __init__(self, allow_unknown_severity=None, description=None, min_severity='Critical', name=None, on_violation_quarantine=None, package_query_string=None, _configuration=None):  # noqa: E501
        """OrganizationPackageVulnerabilityPolicyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allow_unknown_severity = None
        self._description = None
        self._min_severity = None
        self._name = None
        self._on_violation_quarantine = None
        self._package_query_string = None
        self.discriminator = None

        if allow_unknown_severity is not None:
            self.allow_unknown_severity = allow_unknown_severity
        if description is not None:
            self.description = description
        if min_severity is not None:
            self.min_severity = min_severity
        self.name = name
        if on_violation_quarantine is not None:
            self.on_violation_quarantine = on_violation_quarantine
        if package_query_string is not None:
            self.package_query_string = package_query_string

    @property
    def allow_unknown_severity(self):
        """Gets the allow_unknown_severity of this OrganizationPackageVulnerabilityPolicyRequest.

        Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.

        :return: The allow_unknown_severity of this OrganizationPackageVulnerabilityPolicyRequest.
        :rtype: bool
        """
        return self._allow_unknown_severity

    @allow_unknown_severity.setter
    def allow_unknown_severity(self, allow_unknown_severity):
        """Sets the allow_unknown_severity of this OrganizationPackageVulnerabilityPolicyRequest.

        Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.

        :param allow_unknown_severity: The allow_unknown_severity of this OrganizationPackageVulnerabilityPolicyRequest.
        :type: bool
        """

        self._allow_unknown_severity = allow_unknown_severity

    @property
    def description(self):
        """Gets the description of this OrganizationPackageVulnerabilityPolicyRequest.


        :return: The description of this OrganizationPackageVulnerabilityPolicyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationPackageVulnerabilityPolicyRequest.


        :param description: The description of this OrganizationPackageVulnerabilityPolicyRequest.
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 250):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501
        if (self._configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def min_severity(self):
        """Gets the min_severity of this OrganizationPackageVulnerabilityPolicyRequest.


        :return: The min_severity of this OrganizationPackageVulnerabilityPolicyRequest.
        :rtype: str
        """
        return self._min_severity

    @min_severity.setter
    def min_severity(self, min_severity):
        """Sets the min_severity of this OrganizationPackageVulnerabilityPolicyRequest.


        :param min_severity: The min_severity of this OrganizationPackageVulnerabilityPolicyRequest.
        :type: str
        """
        allowed_values = ["Low", "Medium", "High", "Critical"]  # noqa: E501
        if (self._configuration.client_side_validation and
                min_severity not in allowed_values):
            raise ValueError(
                "Invalid value for `min_severity` ({0}), must be one of {1}"  # noqa: E501
                .format(min_severity, allowed_values)
            )

        self._min_severity = min_severity

    @property
    def name(self):
        """Gets the name of this OrganizationPackageVulnerabilityPolicyRequest.


        :return: The name of this OrganizationPackageVulnerabilityPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationPackageVulnerabilityPolicyRequest.


        :param name: The name of this OrganizationPackageVulnerabilityPolicyRequest.
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def on_violation_quarantine(self):
        """Gets the on_violation_quarantine of this OrganizationPackageVulnerabilityPolicyRequest.


        :return: The on_violation_quarantine of this OrganizationPackageVulnerabilityPolicyRequest.
        :rtype: bool
        """
        return self._on_violation_quarantine

    @on_violation_quarantine.setter
    def on_violation_quarantine(self, on_violation_quarantine):
        """Sets the on_violation_quarantine of this OrganizationPackageVulnerabilityPolicyRequest.


        :param on_violation_quarantine: The on_violation_quarantine of this OrganizationPackageVulnerabilityPolicyRequest.
        :type: bool
        """

        self._on_violation_quarantine = on_violation_quarantine

    @property
    def package_query_string(self):
        """Gets the package_query_string of this OrganizationPackageVulnerabilityPolicyRequest.


        :return: The package_query_string of this OrganizationPackageVulnerabilityPolicyRequest.
        :rtype: str
        """
        return self._package_query_string

    @package_query_string.setter
    def package_query_string(self, package_query_string):
        """Sets the package_query_string of this OrganizationPackageVulnerabilityPolicyRequest.


        :param package_query_string: The package_query_string of this OrganizationPackageVulnerabilityPolicyRequest.
        :type: str
        """
        if (self._configuration.client_side_validation and
                package_query_string is not None and len(package_query_string) < 1):
            raise ValueError("Invalid value for `package_query_string`, length must be greater than or equal to `1`")  # noqa: E501

        self._package_query_string = package_query_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationPackageVulnerabilityPolicyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationPackageVulnerabilityPolicyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrganizationPackageVulnerabilityPolicyRequest):
            return True

        return self.to_dict() != other.to_dict()

