# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class GeoIpLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'continent': 'str',
        'country': 'str',
        'country_code': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'city': 'city',
        'continent': 'continent',
        'country': 'country',
        'country_code': 'country_code',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'postal_code': 'postal_code'
    }

    def __init__(self, city=None, continent=None, country=None, country_code=None, latitude=None, longitude=None, postal_code=None, _configuration=None):  # noqa: E501
        """GeoIpLocation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._city = None
        self._continent = None
        self._country = None
        self._country_code = None
        self._latitude = None
        self._longitude = None
        self._postal_code = None
        self.discriminator = None

        self.city = city
        self.continent = continent
        self.country = country
        if country_code is not None:
            self.country_code = country_code
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        self.postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this GeoIpLocation.


        :return: The city of this GeoIpLocation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GeoIpLocation.


        :param city: The city of this GeoIpLocation.
        :type: str
        """
        if self._configuration.client_side_validation and city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                city is not None and len(city) < 1):
            raise ValueError("Invalid value for `city`, length must be greater than or equal to `1`")  # noqa: E501

        self._city = city

    @property
    def continent(self):
        """Gets the continent of this GeoIpLocation.


        :return: The continent of this GeoIpLocation.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this GeoIpLocation.


        :param continent: The continent of this GeoIpLocation.
        :type: str
        """
        if self._configuration.client_side_validation and continent is None:
            raise ValueError("Invalid value for `continent`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                continent is not None and len(continent) < 1):
            raise ValueError("Invalid value for `continent`, length must be greater than or equal to `1`")  # noqa: E501

        self._continent = continent

    @property
    def country(self):
        """Gets the country of this GeoIpLocation.


        :return: The country of this GeoIpLocation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GeoIpLocation.


        :param country: The country of this GeoIpLocation.
        :type: str
        """
        if self._configuration.client_side_validation and country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country is not None and len(country) < 1):
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `1`")  # noqa: E501

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this GeoIpLocation.


        :return: The country_code of this GeoIpLocation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GeoIpLocation.


        :param country_code: The country_code of this GeoIpLocation.
        :type: str
        """

        self._country_code = country_code

    @property
    def latitude(self):
        """Gets the latitude of this GeoIpLocation.


        :return: The latitude of this GeoIpLocation.
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this GeoIpLocation.


        :param latitude: The latitude of this GeoIpLocation.
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this GeoIpLocation.


        :return: The longitude of this GeoIpLocation.
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this GeoIpLocation.


        :param longitude: The longitude of this GeoIpLocation.
        :type: str
        """

        self._longitude = longitude

    @property
    def postal_code(self):
        """Gets the postal_code of this GeoIpLocation.


        :return: The postal_code of this GeoIpLocation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this GeoIpLocation.


        :param postal_code: The postal_code of this GeoIpLocation.
        :type: str
        """
        if self._configuration.client_side_validation and postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                postal_code is not None and len(postal_code) < 1):
            raise ValueError("Invalid value for `postal_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeoIpLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeoIpLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GeoIpLocation):
            return True

        return self.to_dict() != other.to_dict()

