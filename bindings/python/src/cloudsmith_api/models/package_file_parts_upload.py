# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PackageFilePartsUpload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'upload_querystring': 'str',
        'upload_url': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'upload_querystring': 'upload_querystring',
        'upload_url': 'upload_url'
    }

    def __init__(self, identifier=None, upload_querystring=None, upload_url=None):
        """
        PackageFilePartsUpload - a model defined in Swagger
        """

        self._identifier = None
        self._upload_querystring = None
        self._upload_url = None

        if identifier is not None:
          self.identifier = identifier
        if upload_querystring is not None:
          self.upload_querystring = upload_querystring
        if upload_url is not None:
          self.upload_url = upload_url

    @property
    def identifier(self):
        """
        Gets the identifier of this PackageFilePartsUpload.
        The identifier for the file to use uploading parts.

        :return: The identifier of this PackageFilePartsUpload.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this PackageFilePartsUpload.
        The identifier for the file to use uploading parts.

        :param identifier: The identifier of this PackageFilePartsUpload.
        :type: str
        """

        self._identifier = identifier

    @property
    def upload_querystring(self):
        """
        Gets the upload_querystring of this PackageFilePartsUpload.
        The querystring to use for the next-step PUT upload.

        :return: The upload_querystring of this PackageFilePartsUpload.
        :rtype: str
        """
        return self._upload_querystring

    @upload_querystring.setter
    def upload_querystring(self, upload_querystring):
        """
        Sets the upload_querystring of this PackageFilePartsUpload.
        The querystring to use for the next-step PUT upload.

        :param upload_querystring: The upload_querystring of this PackageFilePartsUpload.
        :type: str
        """

        self._upload_querystring = upload_querystring

    @property
    def upload_url(self):
        """
        Gets the upload_url of this PackageFilePartsUpload.
        The URL to use for the next-step PUT upload

        :return: The upload_url of this PackageFilePartsUpload.
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """
        Sets the upload_url of this PackageFilePartsUpload.
        The URL to use for the next-step PUT upload

        :param upload_url: The upload_url of this PackageFilePartsUpload.
        :type: str
        """

        self._upload_url = upload_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PackageFilePartsUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
