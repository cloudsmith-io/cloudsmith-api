# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class PackageDenyPolicyRequestPatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'enabled': 'bool',
        'name': 'str',
        'package_query_string': 'str'
    }

    attribute_map = {
        'description': 'description',
        'enabled': 'enabled',
        'name': 'name',
        'package_query_string': 'package_query_string'
    }

    def __init__(self, description=None, enabled=None, name=None, package_query_string=None, _configuration=None):  # noqa: E501
        """PackageDenyPolicyRequestPatch - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._enabled = None
        self._name = None
        self._package_query_string = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if name is not None:
            self.name = name
        if package_query_string is not None:
            self.package_query_string = package_query_string

    @property
    def description(self):
        """Gets the description of this PackageDenyPolicyRequestPatch.


        :return: The description of this PackageDenyPolicyRequestPatch.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PackageDenyPolicyRequestPatch.


        :param description: The description of this PackageDenyPolicyRequestPatch.
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 250):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this PackageDenyPolicyRequestPatch.

        Whether this rule is enabled or disabled.

        :return: The enabled of this PackageDenyPolicyRequestPatch.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PackageDenyPolicyRequestPatch.

        Whether this rule is enabled or disabled.

        :param enabled: The enabled of this PackageDenyPolicyRequestPatch.
        :type: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this PackageDenyPolicyRequestPatch.


        :return: The name of this PackageDenyPolicyRequestPatch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackageDenyPolicyRequestPatch.


        :param name: The name of this PackageDenyPolicyRequestPatch.
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501

        self._name = name

    @property
    def package_query_string(self):
        """Gets the package_query_string of this PackageDenyPolicyRequestPatch.

        Packages that match this query will trigger this deny rule.

        :return: The package_query_string of this PackageDenyPolicyRequestPatch.
        :rtype: str
        """
        return self._package_query_string

    @package_query_string.setter
    def package_query_string(self, package_query_string):
        """Sets the package_query_string of this PackageDenyPolicyRequestPatch.

        Packages that match this query will trigger this deny rule.

        :param package_query_string: The package_query_string of this PackageDenyPolicyRequestPatch.
        :type: str
        """
        if (self._configuration.client_side_validation and
                package_query_string is not None and len(package_query_string) < 1):
            raise ValueError("Invalid value for `package_query_string`, length must be greater than or equal to `1`")  # noqa: E501

        self._package_query_string = package_query_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageDenyPolicyRequestPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageDenyPolicyRequestPatch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PackageDenyPolicyRequestPatch):
            return True

        return self.to_dict() != other.to_dict()

