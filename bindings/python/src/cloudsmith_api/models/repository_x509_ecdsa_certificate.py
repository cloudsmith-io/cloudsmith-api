# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class RepositoryX509EcdsaCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'certificate': 'str',
        'certificate_chain': 'str',
        'certificate_chain_fingerprint': 'str',
        'certificate_chain_fingerprint_short': 'str',
        'certificate_fingerprint': 'str',
        'certificate_fingerprint_short': 'str',
        'created_at': 'datetime',
        'default': 'bool',
        'issuing_status': 'str'
    }

    attribute_map = {
        'active': 'active',
        'certificate': 'certificate',
        'certificate_chain': 'certificate_chain',
        'certificate_chain_fingerprint': 'certificate_chain_fingerprint',
        'certificate_chain_fingerprint_short': 'certificate_chain_fingerprint_short',
        'certificate_fingerprint': 'certificate_fingerprint',
        'certificate_fingerprint_short': 'certificate_fingerprint_short',
        'created_at': 'created_at',
        'default': 'default',
        'issuing_status': 'issuing_status'
    }

    def __init__(self, active=None, certificate=None, certificate_chain=None, certificate_chain_fingerprint=None, certificate_chain_fingerprint_short=None, certificate_fingerprint=None, certificate_fingerprint_short=None, created_at=None, default=None, issuing_status='Certificate is pending to be issued', _configuration=None):  # noqa: E501
        """RepositoryX509EcdsaCertificate - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._certificate = None
        self._certificate_chain = None
        self._certificate_chain_fingerprint = None
        self._certificate_chain_fingerprint_short = None
        self._certificate_fingerprint = None
        self._certificate_fingerprint_short = None
        self._created_at = None
        self._default = None
        self._issuing_status = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if certificate is not None:
            self.certificate = certificate
        if certificate_chain is not None:
            self.certificate_chain = certificate_chain
        if certificate_chain_fingerprint is not None:
            self.certificate_chain_fingerprint = certificate_chain_fingerprint
        if certificate_chain_fingerprint_short is not None:
            self.certificate_chain_fingerprint_short = certificate_chain_fingerprint_short
        if certificate_fingerprint is not None:
            self.certificate_fingerprint = certificate_fingerprint
        if certificate_fingerprint_short is not None:
            self.certificate_fingerprint_short = certificate_fingerprint_short
        if created_at is not None:
            self.created_at = created_at
        if default is not None:
            self.default = default
        if issuing_status is not None:
            self.issuing_status = issuing_status

    @property
    def active(self):
        """Gets the active of this RepositoryX509EcdsaCertificate.

        If selected this is the active key for this repository.

        :return: The active of this RepositoryX509EcdsaCertificate.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RepositoryX509EcdsaCertificate.

        If selected this is the active key for this repository.

        :param active: The active of this RepositoryX509EcdsaCertificate.
        :type: bool
        """

        self._active = active

    @property
    def certificate(self):
        """Gets the certificate of this RepositoryX509EcdsaCertificate.

        The issued certificate.

        :return: The certificate of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this RepositoryX509EcdsaCertificate.

        The issued certificate.

        :param certificate: The certificate of this RepositoryX509EcdsaCertificate.
        :type: str
        """

        self._certificate = certificate

    @property
    def certificate_chain(self):
        """Gets the certificate_chain of this RepositoryX509EcdsaCertificate.

        Base64 encoded CA certificate chain.

        :return: The certificate_chain of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain):
        """Sets the certificate_chain of this RepositoryX509EcdsaCertificate.

        Base64 encoded CA certificate chain.

        :param certificate_chain: The certificate_chain of this RepositoryX509EcdsaCertificate.
        :type: str
        """

        self._certificate_chain = certificate_chain

    @property
    def certificate_chain_fingerprint(self):
        """Gets the certificate_chain_fingerprint of this RepositoryX509EcdsaCertificate.


        :return: The certificate_chain_fingerprint of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._certificate_chain_fingerprint

    @certificate_chain_fingerprint.setter
    def certificate_chain_fingerprint(self, certificate_chain_fingerprint):
        """Sets the certificate_chain_fingerprint of this RepositoryX509EcdsaCertificate.


        :param certificate_chain_fingerprint: The certificate_chain_fingerprint of this RepositoryX509EcdsaCertificate.
        :type: str
        """

        self._certificate_chain_fingerprint = certificate_chain_fingerprint

    @property
    def certificate_chain_fingerprint_short(self):
        """Gets the certificate_chain_fingerprint_short of this RepositoryX509EcdsaCertificate.


        :return: The certificate_chain_fingerprint_short of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._certificate_chain_fingerprint_short

    @certificate_chain_fingerprint_short.setter
    def certificate_chain_fingerprint_short(self, certificate_chain_fingerprint_short):
        """Sets the certificate_chain_fingerprint_short of this RepositoryX509EcdsaCertificate.


        :param certificate_chain_fingerprint_short: The certificate_chain_fingerprint_short of this RepositoryX509EcdsaCertificate.
        :type: str
        """

        self._certificate_chain_fingerprint_short = certificate_chain_fingerprint_short

    @property
    def certificate_fingerprint(self):
        """Gets the certificate_fingerprint of this RepositoryX509EcdsaCertificate.

        The SHA-256 long identifier used

        :return: The certificate_fingerprint of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._certificate_fingerprint

    @certificate_fingerprint.setter
    def certificate_fingerprint(self, certificate_fingerprint):
        """Sets the certificate_fingerprint of this RepositoryX509EcdsaCertificate.

        The SHA-256 long identifier used

        :param certificate_fingerprint: The certificate_fingerprint of this RepositoryX509EcdsaCertificate.
        :type: str
        """

        self._certificate_fingerprint = certificate_fingerprint

    @property
    def certificate_fingerprint_short(self):
        """Gets the certificate_fingerprint_short of this RepositoryX509EcdsaCertificate.


        :return: The certificate_fingerprint_short of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._certificate_fingerprint_short

    @certificate_fingerprint_short.setter
    def certificate_fingerprint_short(self, certificate_fingerprint_short):
        """Sets the certificate_fingerprint_short of this RepositoryX509EcdsaCertificate.


        :param certificate_fingerprint_short: The certificate_fingerprint_short of this RepositoryX509EcdsaCertificate.
        :type: str
        """

        self._certificate_fingerprint_short = certificate_fingerprint_short

    @property
    def created_at(self):
        """Gets the created_at of this RepositoryX509EcdsaCertificate.


        :return: The created_at of this RepositoryX509EcdsaCertificate.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RepositoryX509EcdsaCertificate.


        :param created_at: The created_at of this RepositoryX509EcdsaCertificate.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def default(self):
        """Gets the default of this RepositoryX509EcdsaCertificate.

        If selected this is the default key for this repository.

        :return: The default of this RepositoryX509EcdsaCertificate.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this RepositoryX509EcdsaCertificate.

        If selected this is the default key for this repository.

        :param default: The default of this RepositoryX509EcdsaCertificate.
        :type: bool
        """

        self._default = default

    @property
    def issuing_status(self):
        """Gets the issuing_status of this RepositoryX509EcdsaCertificate.


        :return: The issuing_status of this RepositoryX509EcdsaCertificate.
        :rtype: str
        """
        return self._issuing_status

    @issuing_status.setter
    def issuing_status(self, issuing_status):
        """Sets the issuing_status of this RepositoryX509EcdsaCertificate.


        :param issuing_status: The issuing_status of this RepositoryX509EcdsaCertificate.
        :type: str
        """
        allowed_values = ["Certificate is pending to be issued", "Certificate successfully issued", "Error issuing certificate"]  # noqa: E501
        if (self._configuration.client_side_validation and
                issuing_status not in allowed_values):
            raise ValueError(
                "Invalid value for `issuing_status` ({0}), must be one of {1}"  # noqa: E501
                .format(issuing_status, allowed_values)
            )

        self._issuing_status = issuing_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryX509EcdsaCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryX509EcdsaCertificate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryX509EcdsaCertificate):
            return True

        return self.to_dict() != other.to_dict()

