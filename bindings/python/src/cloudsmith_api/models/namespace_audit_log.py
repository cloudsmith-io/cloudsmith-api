# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class NamespaceAuditLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actor': 'str',
        'actor_ip_address': 'str',
        'actor_kind': 'str',
        'actor_location': 'GeoIpLocation',
        'actor_slug_perm': 'str',
        'actor_url': 'str',
        'context': 'str',
        'event': 'str',
        'event_at': 'datetime',
        'object': 'str',
        'object_kind': 'str',
        'object_slug_perm': 'str',
        'target': 'str',
        'target_kind': 'str',
        'target_slug_perm': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'actor': 'actor',
        'actor_ip_address': 'actor_ip_address',
        'actor_kind': 'actor_kind',
        'actor_location': 'actor_location',
        'actor_slug_perm': 'actor_slug_perm',
        'actor_url': 'actor_url',
        'context': 'context',
        'event': 'event',
        'event_at': 'event_at',
        'object': 'object',
        'object_kind': 'object_kind',
        'object_slug_perm': 'object_slug_perm',
        'target': 'target',
        'target_kind': 'target_kind',
        'target_slug_perm': 'target_slug_perm',
        'uuid': 'uuid'
    }

    def __init__(self, actor=None, actor_ip_address=None, actor_kind=None, actor_location=None, actor_slug_perm=None, actor_url=None, context=None, event=None, event_at=None, object=None, object_kind=None, object_slug_perm=None, target=None, target_kind=None, target_slug_perm=None, uuid=None, _configuration=None):  # noqa: E501
        """NamespaceAuditLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._actor = None
        self._actor_ip_address = None
        self._actor_kind = None
        self._actor_location = None
        self._actor_slug_perm = None
        self._actor_url = None
        self._context = None
        self._event = None
        self._event_at = None
        self._object = None
        self._object_kind = None
        self._object_slug_perm = None
        self._target = None
        self._target_kind = None
        self._target_slug_perm = None
        self._uuid = None
        self.discriminator = None

        self.actor = actor
        self.actor_ip_address = actor_ip_address
        if actor_kind is not None:
            self.actor_kind = actor_kind
        self.actor_location = actor_location
        self.actor_slug_perm = actor_slug_perm
        if actor_url is not None:
            self.actor_url = actor_url
        self.context = context
        self.event = event
        self.event_at = event_at
        self.object = object
        self.object_kind = object_kind
        self.object_slug_perm = object_slug_perm
        self.target = target
        self.target_kind = target_kind
        if target_slug_perm is not None:
            self.target_slug_perm = target_slug_perm
        if uuid is not None:
            self.uuid = uuid

    @property
    def actor(self):
        """Gets the actor of this NamespaceAuditLog.


        :return: The actor of this NamespaceAuditLog.
        :rtype: str
        """
        return self._actor

    @actor.setter
    def actor(self, actor):
        """Sets the actor of this NamespaceAuditLog.


        :param actor: The actor of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and actor is None:
            raise ValueError("Invalid value for `actor`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                actor is not None and len(actor) < 1):
            raise ValueError("Invalid value for `actor`, length must be greater than or equal to `1`")  # noqa: E501

        self._actor = actor

    @property
    def actor_ip_address(self):
        """Gets the actor_ip_address of this NamespaceAuditLog.


        :return: The actor_ip_address of this NamespaceAuditLog.
        :rtype: str
        """
        return self._actor_ip_address

    @actor_ip_address.setter
    def actor_ip_address(self, actor_ip_address):
        """Sets the actor_ip_address of this NamespaceAuditLog.


        :param actor_ip_address: The actor_ip_address of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and actor_ip_address is None:
            raise ValueError("Invalid value for `actor_ip_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                actor_ip_address is not None and len(actor_ip_address) < 1):
            raise ValueError("Invalid value for `actor_ip_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._actor_ip_address = actor_ip_address

    @property
    def actor_kind(self):
        """Gets the actor_kind of this NamespaceAuditLog.


        :return: The actor_kind of this NamespaceAuditLog.
        :rtype: str
        """
        return self._actor_kind

    @actor_kind.setter
    def actor_kind(self, actor_kind):
        """Sets the actor_kind of this NamespaceAuditLog.


        :param actor_kind: The actor_kind of this NamespaceAuditLog.
        :type: str
        """

        self._actor_kind = actor_kind

    @property
    def actor_location(self):
        """Gets the actor_location of this NamespaceAuditLog.


        :return: The actor_location of this NamespaceAuditLog.
        :rtype: GeoIpLocation
        """
        return self._actor_location

    @actor_location.setter
    def actor_location(self, actor_location):
        """Sets the actor_location of this NamespaceAuditLog.


        :param actor_location: The actor_location of this NamespaceAuditLog.
        :type: GeoIpLocation
        """
        if self._configuration.client_side_validation and actor_location is None:
            raise ValueError("Invalid value for `actor_location`, must not be `None`")  # noqa: E501

        self._actor_location = actor_location

    @property
    def actor_slug_perm(self):
        """Gets the actor_slug_perm of this NamespaceAuditLog.


        :return: The actor_slug_perm of this NamespaceAuditLog.
        :rtype: str
        """
        return self._actor_slug_perm

    @actor_slug_perm.setter
    def actor_slug_perm(self, actor_slug_perm):
        """Sets the actor_slug_perm of this NamespaceAuditLog.


        :param actor_slug_perm: The actor_slug_perm of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and actor_slug_perm is None:
            raise ValueError("Invalid value for `actor_slug_perm`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                actor_slug_perm is not None and len(actor_slug_perm) < 1):
            raise ValueError("Invalid value for `actor_slug_perm`, length must be greater than or equal to `1`")  # noqa: E501

        self._actor_slug_perm = actor_slug_perm

    @property
    def actor_url(self):
        """Gets the actor_url of this NamespaceAuditLog.


        :return: The actor_url of this NamespaceAuditLog.
        :rtype: str
        """
        return self._actor_url

    @actor_url.setter
    def actor_url(self, actor_url):
        """Sets the actor_url of this NamespaceAuditLog.


        :param actor_url: The actor_url of this NamespaceAuditLog.
        :type: str
        """

        self._actor_url = actor_url

    @property
    def context(self):
        """Gets the context of this NamespaceAuditLog.


        :return: The context of this NamespaceAuditLog.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this NamespaceAuditLog.


        :param context: The context of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                context is not None and len(context) < 1):
            raise ValueError("Invalid value for `context`, length must be greater than or equal to `1`")  # noqa: E501

        self._context = context

    @property
    def event(self):
        """Gets the event of this NamespaceAuditLog.


        :return: The event of this NamespaceAuditLog.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this NamespaceAuditLog.


        :param event: The event of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event is not None and len(event) < 1):
            raise ValueError("Invalid value for `event`, length must be greater than or equal to `1`")  # noqa: E501

        self._event = event

    @property
    def event_at(self):
        """Gets the event_at of this NamespaceAuditLog.


        :return: The event_at of this NamespaceAuditLog.
        :rtype: datetime
        """
        return self._event_at

    @event_at.setter
    def event_at(self, event_at):
        """Sets the event_at of this NamespaceAuditLog.


        :param event_at: The event_at of this NamespaceAuditLog.
        :type: datetime
        """
        if self._configuration.client_side_validation and event_at is None:
            raise ValueError("Invalid value for `event_at`, must not be `None`")  # noqa: E501

        self._event_at = event_at

    @property
    def object(self):
        """Gets the object of this NamespaceAuditLog.


        :return: The object of this NamespaceAuditLog.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this NamespaceAuditLog.


        :param object: The object of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                object is not None and len(object) < 1):
            raise ValueError("Invalid value for `object`, length must be greater than or equal to `1`")  # noqa: E501

        self._object = object

    @property
    def object_kind(self):
        """Gets the object_kind of this NamespaceAuditLog.


        :return: The object_kind of this NamespaceAuditLog.
        :rtype: str
        """
        return self._object_kind

    @object_kind.setter
    def object_kind(self, object_kind):
        """Sets the object_kind of this NamespaceAuditLog.


        :param object_kind: The object_kind of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and object_kind is None:
            raise ValueError("Invalid value for `object_kind`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                object_kind is not None and len(object_kind) < 1):
            raise ValueError("Invalid value for `object_kind`, length must be greater than or equal to `1`")  # noqa: E501

        self._object_kind = object_kind

    @property
    def object_slug_perm(self):
        """Gets the object_slug_perm of this NamespaceAuditLog.


        :return: The object_slug_perm of this NamespaceAuditLog.
        :rtype: str
        """
        return self._object_slug_perm

    @object_slug_perm.setter
    def object_slug_perm(self, object_slug_perm):
        """Sets the object_slug_perm of this NamespaceAuditLog.


        :param object_slug_perm: The object_slug_perm of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and object_slug_perm is None:
            raise ValueError("Invalid value for `object_slug_perm`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                object_slug_perm is not None and len(object_slug_perm) < 1):
            raise ValueError("Invalid value for `object_slug_perm`, length must be greater than or equal to `1`")  # noqa: E501

        self._object_slug_perm = object_slug_perm

    @property
    def target(self):
        """Gets the target of this NamespaceAuditLog.


        :return: The target of this NamespaceAuditLog.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this NamespaceAuditLog.


        :param target: The target of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target is not None and len(target) < 1):
            raise ValueError("Invalid value for `target`, length must be greater than or equal to `1`")  # noqa: E501

        self._target = target

    @property
    def target_kind(self):
        """Gets the target_kind of this NamespaceAuditLog.


        :return: The target_kind of this NamespaceAuditLog.
        :rtype: str
        """
        return self._target_kind

    @target_kind.setter
    def target_kind(self, target_kind):
        """Sets the target_kind of this NamespaceAuditLog.


        :param target_kind: The target_kind of this NamespaceAuditLog.
        :type: str
        """
        if self._configuration.client_side_validation and target_kind is None:
            raise ValueError("Invalid value for `target_kind`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_kind is not None and len(target_kind) < 1):
            raise ValueError("Invalid value for `target_kind`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_kind = target_kind

    @property
    def target_slug_perm(self):
        """Gets the target_slug_perm of this NamespaceAuditLog.


        :return: The target_slug_perm of this NamespaceAuditLog.
        :rtype: str
        """
        return self._target_slug_perm

    @target_slug_perm.setter
    def target_slug_perm(self, target_slug_perm):
        """Sets the target_slug_perm of this NamespaceAuditLog.


        :param target_slug_perm: The target_slug_perm of this NamespaceAuditLog.
        :type: str
        """
        if (self._configuration.client_side_validation and
                target_slug_perm is not None and len(target_slug_perm) > 24):
            raise ValueError("Invalid value for `target_slug_perm`, length must be less than or equal to `24`")  # noqa: E501
        if (self._configuration.client_side_validation and
                target_slug_perm is not None and not re.search('^[-a-zA-Z0-9_]+$', target_slug_perm)):  # noqa: E501
            raise ValueError(r"Invalid value for `target_slug_perm`, must be a follow pattern or equal to `/^[-a-zA-Z0-9_]+$/`")  # noqa: E501

        self._target_slug_perm = target_slug_perm

    @property
    def uuid(self):
        """Gets the uuid of this NamespaceAuditLog.


        :return: The uuid of this NamespaceAuditLog.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NamespaceAuditLog.


        :param uuid: The uuid of this NamespaceAuditLog.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamespaceAuditLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamespaceAuditLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NamespaceAuditLog):
            return True

        return self.to_dict() != other.to_dict()

