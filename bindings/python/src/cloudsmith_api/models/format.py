# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Format(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'premium': 'bool',
        'description': 'str',
        'distributions': 'list[FormatDistributions]',
        'premium_plan_id': 'str',
        'premium_plan_name': 'str',
        'extensions': 'list[str]',
        'supports': 'object',
        'slug': 'str',
        'name': 'str'
    }

    attribute_map = {
        'premium': 'premium',
        'description': 'description',
        'distributions': 'distributions',
        'premium_plan_id': 'premium_plan_id',
        'premium_plan_name': 'premium_plan_name',
        'extensions': 'extensions',
        'supports': 'supports',
        'slug': 'slug',
        'name': 'name'
    }

    def __init__(self, premium=None, description=None, distributions=None, premium_plan_id=None, premium_plan_name=None, extensions=None, supports=None, slug=None, name=None):
        """
        Format - a model defined in Swagger
        """

        self._premium = None
        self._description = None
        self._distributions = None
        self._premium_plan_id = None
        self._premium_plan_name = None
        self._extensions = None
        self._supports = None
        self._slug = None
        self._name = None

        self.premium = premium
        self.description = description
        if distributions is not None:
          self.distributions = distributions
        if premium_plan_id is not None:
          self.premium_plan_id = premium_plan_id
        if premium_plan_name is not None:
          self.premium_plan_name = premium_plan_name
        self.extensions = extensions
        self.supports = supports
        self.slug = slug
        self.name = name

    @property
    def premium(self):
        """
        Gets the premium of this Format.
        If true the package format is a premium-only feature

        :return: The premium of this Format.
        :rtype: bool
        """
        return self._premium

    @premium.setter
    def premium(self, premium):
        """
        Sets the premium of this Format.
        If true the package format is a premium-only feature

        :param premium: The premium of this Format.
        :type: bool
        """
        if premium is None:
            raise ValueError("Invalid value for `premium`, must not be `None`")

        self._premium = premium

    @property
    def description(self):
        """
        Gets the description of this Format.
        Description of the package format

        :return: The description of this Format.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Format.
        Description of the package format

        :param description: The description of this Format.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def distributions(self):
        """
        Gets the distributions of this Format.
        The distributions supported by this package format

        :return: The distributions of this Format.
        :rtype: list[FormatDistributions]
        """
        return self._distributions

    @distributions.setter
    def distributions(self, distributions):
        """
        Sets the distributions of this Format.
        The distributions supported by this package format

        :param distributions: The distributions of this Format.
        :type: list[FormatDistributions]
        """

        self._distributions = distributions

    @property
    def premium_plan_id(self):
        """
        Gets the premium_plan_id of this Format.
        The minimum plan id required for this package format

        :return: The premium_plan_id of this Format.
        :rtype: str
        """
        return self._premium_plan_id

    @premium_plan_id.setter
    def premium_plan_id(self, premium_plan_id):
        """
        Sets the premium_plan_id of this Format.
        The minimum plan id required for this package format

        :param premium_plan_id: The premium_plan_id of this Format.
        :type: str
        """

        self._premium_plan_id = premium_plan_id

    @property
    def premium_plan_name(self):
        """
        Gets the premium_plan_name of this Format.
        The minimum plan name required for this package format

        :return: The premium_plan_name of this Format.
        :rtype: str
        """
        return self._premium_plan_name

    @premium_plan_name.setter
    def premium_plan_name(self, premium_plan_name):
        """
        Sets the premium_plan_name of this Format.
        The minimum plan name required for this package format

        :param premium_plan_name: The premium_plan_name of this Format.
        :type: str
        """

        self._premium_plan_name = premium_plan_name

    @property
    def extensions(self):
        """
        Gets the extensions of this Format.
        A non-exhaustive list of extensions supported

        :return: The extensions of this Format.
        :rtype: list[str]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """
        Sets the extensions of this Format.
        A non-exhaustive list of extensions supported

        :param extensions: The extensions of this Format.
        :type: list[str]
        """
        if extensions is None:
            raise ValueError("Invalid value for `extensions`, must not be `None`")

        self._extensions = extensions

    @property
    def supports(self):
        """
        Gets the supports of this Format.
        A set of what the package format supports

        :return: The supports of this Format.
        :rtype: object
        """
        return self._supports

    @supports.setter
    def supports(self, supports):
        """
        Sets the supports of this Format.
        A set of what the package format supports

        :param supports: The supports of this Format.
        :type: object
        """
        if supports is None:
            raise ValueError("Invalid value for `supports`, must not be `None`")

        self._supports = supports

    @property
    def slug(self):
        """
        Gets the slug of this Format.
        Slug for the package format

        :return: The slug of this Format.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Format.
        Slug for the package format

        :param slug: The slug of this Format.
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")

        self._slug = slug

    @property
    def name(self):
        """
        Gets the name of this Format.
        Name for the package format

        :return: The name of this Format.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Format.
        Name for the package format

        :param name: The name of this Format.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Format):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
