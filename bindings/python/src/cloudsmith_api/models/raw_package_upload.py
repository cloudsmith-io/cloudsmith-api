# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RawPackageUpload(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'architectures': 'list[PackagesownerrepoArchitectures]',
        'cdn_url': 'str',
        'checksum_md5': 'str',
        'checksum_sha1': 'str',
        'checksum_sha256': 'str',
        'checksum_sha512': 'str',
        'description': 'str',
        'distro': 'object',
        'distro_version': 'object',
        'downloads': 'int',
        'epoch': 'int',
        'extension': 'str',
        'filename': 'str',
        'files': 'list[PackagesownerrepoFiles]',
        'format': 'str',
        'format_url': 'str',
        'identifier_perm': 'str',
        'indexed': 'bool',
        'is_sync_awaiting': 'bool',
        'is_sync_completed': 'bool',
        'is_sync_failed': 'bool',
        'is_sync_in_flight': 'bool',
        'is_sync_in_progress': 'bool',
        'license': 'str',
        'name': 'str',
        'namespace': 'str',
        'namespace_url': 'str',
        'num_files': 'int',
        'package_type': 'str',
        'release': 'str',
        'repository': 'str',
        'repository_url': 'str',
        'self_html_url': 'str',
        'self_url': 'str',
        'size': 'int',
        'slug': 'str',
        'slug_perm': 'str',
        'stage': 'str',
        'stage_str': 'str',
        'stage_updated_at': 'str',
        'status': 'str',
        'status_reason': 'str',
        'status_str': 'str',
        'status_updated_at': 'str',
        'status_url': 'str',
        'subtype': 'str',
        'summary': 'str',
        'sync_finished_at': 'str',
        'sync_progress': 'int',
        'type_display': 'str',
        'uploaded_at': 'str',
        'uploader': 'str',
        'uploader_url': 'str',
        'version': 'str',
        'version_orig': 'str'
    }

    attribute_map = {
        'architectures': 'architectures',
        'cdn_url': 'cdn_url',
        'checksum_md5': 'checksum_md5',
        'checksum_sha1': 'checksum_sha1',
        'checksum_sha256': 'checksum_sha256',
        'checksum_sha512': 'checksum_sha512',
        'description': 'description',
        'distro': 'distro',
        'distro_version': 'distro_version',
        'downloads': 'downloads',
        'epoch': 'epoch',
        'extension': 'extension',
        'filename': 'filename',
        'files': 'files',
        'format': 'format',
        'format_url': 'format_url',
        'identifier_perm': 'identifier_perm',
        'indexed': 'indexed',
        'is_sync_awaiting': 'is_sync_awaiting',
        'is_sync_completed': 'is_sync_completed',
        'is_sync_failed': 'is_sync_failed',
        'is_sync_in_flight': 'is_sync_in_flight',
        'is_sync_in_progress': 'is_sync_in_progress',
        'license': 'license',
        'name': 'name',
        'namespace': 'namespace',
        'namespace_url': 'namespace_url',
        'num_files': 'num_files',
        'package_type': 'package_type',
        'release': 'release',
        'repository': 'repository',
        'repository_url': 'repository_url',
        'self_html_url': 'self_html_url',
        'self_url': 'self_url',
        'size': 'size',
        'slug': 'slug',
        'slug_perm': 'slug_perm',
        'stage': 'stage',
        'stage_str': 'stage_str',
        'stage_updated_at': 'stage_updated_at',
        'status': 'status',
        'status_reason': 'status_reason',
        'status_str': 'status_str',
        'status_updated_at': 'status_updated_at',
        'status_url': 'status_url',
        'subtype': 'subtype',
        'summary': 'summary',
        'sync_finished_at': 'sync_finished_at',
        'sync_progress': 'sync_progress',
        'type_display': 'type_display',
        'uploaded_at': 'uploaded_at',
        'uploader': 'uploader',
        'uploader_url': 'uploader_url',
        'version': 'version',
        'version_orig': 'version_orig'
    }

    def __init__(self, architectures=None, cdn_url=None, checksum_md5=None, checksum_sha1=None, checksum_sha256=None, checksum_sha512=None, description=None, distro=None, distro_version=None, downloads=None, epoch=None, extension=None, filename=None, files=None, format=None, format_url=None, identifier_perm=None, indexed=None, is_sync_awaiting=None, is_sync_completed=None, is_sync_failed=None, is_sync_in_flight=None, is_sync_in_progress=None, license=None, name=None, namespace=None, namespace_url=None, num_files=None, package_type=None, release=None, repository=None, repository_url=None, self_html_url=None, self_url=None, size=None, slug=None, slug_perm=None, stage=None, stage_str=None, stage_updated_at=None, status=None, status_reason=None, status_str=None, status_updated_at=None, status_url=None, subtype=None, summary=None, sync_finished_at=None, sync_progress=None, type_display=None, uploaded_at=None, uploader=None, uploader_url=None, version=None, version_orig=None):
        """
        RawPackageUpload - a model defined in Swagger
        """

        self._architectures = None
        self._cdn_url = None
        self._checksum_md5 = None
        self._checksum_sha1 = None
        self._checksum_sha256 = None
        self._checksum_sha512 = None
        self._description = None
        self._distro = None
        self._distro_version = None
        self._downloads = None
        self._epoch = None
        self._extension = None
        self._filename = None
        self._files = None
        self._format = None
        self._format_url = None
        self._identifier_perm = None
        self._indexed = None
        self._is_sync_awaiting = None
        self._is_sync_completed = None
        self._is_sync_failed = None
        self._is_sync_in_flight = None
        self._is_sync_in_progress = None
        self._license = None
        self._name = None
        self._namespace = None
        self._namespace_url = None
        self._num_files = None
        self._package_type = None
        self._release = None
        self._repository = None
        self._repository_url = None
        self._self_html_url = None
        self._self_url = None
        self._size = None
        self._slug = None
        self._slug_perm = None
        self._stage = None
        self._stage_str = None
        self._stage_updated_at = None
        self._status = None
        self._status_reason = None
        self._status_str = None
        self._status_updated_at = None
        self._status_url = None
        self._subtype = None
        self._summary = None
        self._sync_finished_at = None
        self._sync_progress = None
        self._type_display = None
        self._uploaded_at = None
        self._uploader = None
        self._uploader_url = None
        self._version = None
        self._version_orig = None

        if architectures is not None:
          self.architectures = architectures
        if cdn_url is not None:
          self.cdn_url = cdn_url
        if checksum_md5 is not None:
          self.checksum_md5 = checksum_md5
        if checksum_sha1 is not None:
          self.checksum_sha1 = checksum_sha1
        if checksum_sha256 is not None:
          self.checksum_sha256 = checksum_sha256
        if checksum_sha512 is not None:
          self.checksum_sha512 = checksum_sha512
        if description is not None:
          self.description = description
        if distro is not None:
          self.distro = distro
        if distro_version is not None:
          self.distro_version = distro_version
        if downloads is not None:
          self.downloads = downloads
        if epoch is not None:
          self.epoch = epoch
        if extension is not None:
          self.extension = extension
        if filename is not None:
          self.filename = filename
        if files is not None:
          self.files = files
        if format is not None:
          self.format = format
        if format_url is not None:
          self.format_url = format_url
        if identifier_perm is not None:
          self.identifier_perm = identifier_perm
        if indexed is not None:
          self.indexed = indexed
        if is_sync_awaiting is not None:
          self.is_sync_awaiting = is_sync_awaiting
        if is_sync_completed is not None:
          self.is_sync_completed = is_sync_completed
        if is_sync_failed is not None:
          self.is_sync_failed = is_sync_failed
        if is_sync_in_flight is not None:
          self.is_sync_in_flight = is_sync_in_flight
        if is_sync_in_progress is not None:
          self.is_sync_in_progress = is_sync_in_progress
        if license is not None:
          self.license = license
        if name is not None:
          self.name = name
        if namespace is not None:
          self.namespace = namespace
        if namespace_url is not None:
          self.namespace_url = namespace_url
        if num_files is not None:
          self.num_files = num_files
        if package_type is not None:
          self.package_type = package_type
        if release is not None:
          self.release = release
        if repository is not None:
          self.repository = repository
        if repository_url is not None:
          self.repository_url = repository_url
        if self_html_url is not None:
          self.self_html_url = self_html_url
        if self_url is not None:
          self.self_url = self_url
        if size is not None:
          self.size = size
        if slug is not None:
          self.slug = slug
        if slug_perm is not None:
          self.slug_perm = slug_perm
        if stage is not None:
          self.stage = stage
        if stage_str is not None:
          self.stage_str = stage_str
        if stage_updated_at is not None:
          self.stage_updated_at = stage_updated_at
        if status is not None:
          self.status = status
        if status_reason is not None:
          self.status_reason = status_reason
        if status_str is not None:
          self.status_str = status_str
        if status_updated_at is not None:
          self.status_updated_at = status_updated_at
        if status_url is not None:
          self.status_url = status_url
        if subtype is not None:
          self.subtype = subtype
        if summary is not None:
          self.summary = summary
        if sync_finished_at is not None:
          self.sync_finished_at = sync_finished_at
        if sync_progress is not None:
          self.sync_progress = sync_progress
        if type_display is not None:
          self.type_display = type_display
        if uploaded_at is not None:
          self.uploaded_at = uploaded_at
        if uploader is not None:
          self.uploader = uploader
        if uploader_url is not None:
          self.uploader_url = uploader_url
        if version is not None:
          self.version = version
        if version_orig is not None:
          self.version_orig = version_orig

    @property
    def architectures(self):
        """
        Gets the architectures of this RawPackageUpload.
        

        :return: The architectures of this RawPackageUpload.
        :rtype: list[PackagesownerrepoArchitectures]
        """
        return self._architectures

    @architectures.setter
    def architectures(self, architectures):
        """
        Sets the architectures of this RawPackageUpload.
        

        :param architectures: The architectures of this RawPackageUpload.
        :type: list[PackagesownerrepoArchitectures]
        """

        self._architectures = architectures

    @property
    def cdn_url(self):
        """
        Gets the cdn_url of this RawPackageUpload.
        

        :return: The cdn_url of this RawPackageUpload.
        :rtype: str
        """
        return self._cdn_url

    @cdn_url.setter
    def cdn_url(self, cdn_url):
        """
        Sets the cdn_url of this RawPackageUpload.
        

        :param cdn_url: The cdn_url of this RawPackageUpload.
        :type: str
        """

        self._cdn_url = cdn_url

    @property
    def checksum_md5(self):
        """
        Gets the checksum_md5 of this RawPackageUpload.
        

        :return: The checksum_md5 of this RawPackageUpload.
        :rtype: str
        """
        return self._checksum_md5

    @checksum_md5.setter
    def checksum_md5(self, checksum_md5):
        """
        Sets the checksum_md5 of this RawPackageUpload.
        

        :param checksum_md5: The checksum_md5 of this RawPackageUpload.
        :type: str
        """

        self._checksum_md5 = checksum_md5

    @property
    def checksum_sha1(self):
        """
        Gets the checksum_sha1 of this RawPackageUpload.
        

        :return: The checksum_sha1 of this RawPackageUpload.
        :rtype: str
        """
        return self._checksum_sha1

    @checksum_sha1.setter
    def checksum_sha1(self, checksum_sha1):
        """
        Sets the checksum_sha1 of this RawPackageUpload.
        

        :param checksum_sha1: The checksum_sha1 of this RawPackageUpload.
        :type: str
        """

        self._checksum_sha1 = checksum_sha1

    @property
    def checksum_sha256(self):
        """
        Gets the checksum_sha256 of this RawPackageUpload.
        

        :return: The checksum_sha256 of this RawPackageUpload.
        :rtype: str
        """
        return self._checksum_sha256

    @checksum_sha256.setter
    def checksum_sha256(self, checksum_sha256):
        """
        Sets the checksum_sha256 of this RawPackageUpload.
        

        :param checksum_sha256: The checksum_sha256 of this RawPackageUpload.
        :type: str
        """

        self._checksum_sha256 = checksum_sha256

    @property
    def checksum_sha512(self):
        """
        Gets the checksum_sha512 of this RawPackageUpload.
        

        :return: The checksum_sha512 of this RawPackageUpload.
        :rtype: str
        """
        return self._checksum_sha512

    @checksum_sha512.setter
    def checksum_sha512(self, checksum_sha512):
        """
        Sets the checksum_sha512 of this RawPackageUpload.
        

        :param checksum_sha512: The checksum_sha512 of this RawPackageUpload.
        :type: str
        """

        self._checksum_sha512 = checksum_sha512

    @property
    def description(self):
        """
        Gets the description of this RawPackageUpload.
        A textual description of this package.

        :return: The description of this RawPackageUpload.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this RawPackageUpload.
        A textual description of this package.

        :param description: The description of this RawPackageUpload.
        :type: str
        """

        self._description = description

    @property
    def distro(self):
        """
        Gets the distro of this RawPackageUpload.
        

        :return: The distro of this RawPackageUpload.
        :rtype: object
        """
        return self._distro

    @distro.setter
    def distro(self, distro):
        """
        Sets the distro of this RawPackageUpload.
        

        :param distro: The distro of this RawPackageUpload.
        :type: object
        """

        self._distro = distro

    @property
    def distro_version(self):
        """
        Gets the distro_version of this RawPackageUpload.
        

        :return: The distro_version of this RawPackageUpload.
        :rtype: object
        """
        return self._distro_version

    @distro_version.setter
    def distro_version(self, distro_version):
        """
        Sets the distro_version of this RawPackageUpload.
        

        :param distro_version: The distro_version of this RawPackageUpload.
        :type: object
        """

        self._distro_version = distro_version

    @property
    def downloads(self):
        """
        Gets the downloads of this RawPackageUpload.
        

        :return: The downloads of this RawPackageUpload.
        :rtype: int
        """
        return self._downloads

    @downloads.setter
    def downloads(self, downloads):
        """
        Sets the downloads of this RawPackageUpload.
        

        :param downloads: The downloads of this RawPackageUpload.
        :type: int
        """

        self._downloads = downloads

    @property
    def epoch(self):
        """
        Gets the epoch of this RawPackageUpload.
        The epoch of the package version (if any).

        :return: The epoch of this RawPackageUpload.
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """
        Sets the epoch of this RawPackageUpload.
        The epoch of the package version (if any).

        :param epoch: The epoch of this RawPackageUpload.
        :type: int
        """

        self._epoch = epoch

    @property
    def extension(self):
        """
        Gets the extension of this RawPackageUpload.
        

        :return: The extension of this RawPackageUpload.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this RawPackageUpload.
        

        :param extension: The extension of this RawPackageUpload.
        :type: str
        """

        self._extension = extension

    @property
    def filename(self):
        """
        Gets the filename of this RawPackageUpload.
        

        :return: The filename of this RawPackageUpload.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this RawPackageUpload.
        

        :param filename: The filename of this RawPackageUpload.
        :type: str
        """

        self._filename = filename

    @property
    def files(self):
        """
        Gets the files of this RawPackageUpload.
        

        :return: The files of this RawPackageUpload.
        :rtype: list[PackagesownerrepoFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """
        Sets the files of this RawPackageUpload.
        

        :param files: The files of this RawPackageUpload.
        :type: list[PackagesownerrepoFiles]
        """

        self._files = files

    @property
    def format(self):
        """
        Gets the format of this RawPackageUpload.
        

        :return: The format of this RawPackageUpload.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this RawPackageUpload.
        

        :param format: The format of this RawPackageUpload.
        :type: str
        """

        self._format = format

    @property
    def format_url(self):
        """
        Gets the format_url of this RawPackageUpload.
        

        :return: The format_url of this RawPackageUpload.
        :rtype: str
        """
        return self._format_url

    @format_url.setter
    def format_url(self, format_url):
        """
        Sets the format_url of this RawPackageUpload.
        

        :param format_url: The format_url of this RawPackageUpload.
        :type: str
        """

        self._format_url = format_url

    @property
    def identifier_perm(self):
        """
        Gets the identifier_perm of this RawPackageUpload.
        Unique and permanent identifier for the package.

        :return: The identifier_perm of this RawPackageUpload.
        :rtype: str
        """
        return self._identifier_perm

    @identifier_perm.setter
    def identifier_perm(self, identifier_perm):
        """
        Sets the identifier_perm of this RawPackageUpload.
        Unique and permanent identifier for the package.

        :param identifier_perm: The identifier_perm of this RawPackageUpload.
        :type: str
        """

        self._identifier_perm = identifier_perm

    @property
    def indexed(self):
        """
        Gets the indexed of this RawPackageUpload.
        

        :return: The indexed of this RawPackageUpload.
        :rtype: bool
        """
        return self._indexed

    @indexed.setter
    def indexed(self, indexed):
        """
        Sets the indexed of this RawPackageUpload.
        

        :param indexed: The indexed of this RawPackageUpload.
        :type: bool
        """

        self._indexed = indexed

    @property
    def is_sync_awaiting(self):
        """
        Gets the is_sync_awaiting of this RawPackageUpload.
        

        :return: The is_sync_awaiting of this RawPackageUpload.
        :rtype: bool
        """
        return self._is_sync_awaiting

    @is_sync_awaiting.setter
    def is_sync_awaiting(self, is_sync_awaiting):
        """
        Sets the is_sync_awaiting of this RawPackageUpload.
        

        :param is_sync_awaiting: The is_sync_awaiting of this RawPackageUpload.
        :type: bool
        """

        self._is_sync_awaiting = is_sync_awaiting

    @property
    def is_sync_completed(self):
        """
        Gets the is_sync_completed of this RawPackageUpload.
        

        :return: The is_sync_completed of this RawPackageUpload.
        :rtype: bool
        """
        return self._is_sync_completed

    @is_sync_completed.setter
    def is_sync_completed(self, is_sync_completed):
        """
        Sets the is_sync_completed of this RawPackageUpload.
        

        :param is_sync_completed: The is_sync_completed of this RawPackageUpload.
        :type: bool
        """

        self._is_sync_completed = is_sync_completed

    @property
    def is_sync_failed(self):
        """
        Gets the is_sync_failed of this RawPackageUpload.
        

        :return: The is_sync_failed of this RawPackageUpload.
        :rtype: bool
        """
        return self._is_sync_failed

    @is_sync_failed.setter
    def is_sync_failed(self, is_sync_failed):
        """
        Sets the is_sync_failed of this RawPackageUpload.
        

        :param is_sync_failed: The is_sync_failed of this RawPackageUpload.
        :type: bool
        """

        self._is_sync_failed = is_sync_failed

    @property
    def is_sync_in_flight(self):
        """
        Gets the is_sync_in_flight of this RawPackageUpload.
        

        :return: The is_sync_in_flight of this RawPackageUpload.
        :rtype: bool
        """
        return self._is_sync_in_flight

    @is_sync_in_flight.setter
    def is_sync_in_flight(self, is_sync_in_flight):
        """
        Sets the is_sync_in_flight of this RawPackageUpload.
        

        :param is_sync_in_flight: The is_sync_in_flight of this RawPackageUpload.
        :type: bool
        """

        self._is_sync_in_flight = is_sync_in_flight

    @property
    def is_sync_in_progress(self):
        """
        Gets the is_sync_in_progress of this RawPackageUpload.
        

        :return: The is_sync_in_progress of this RawPackageUpload.
        :rtype: bool
        """
        return self._is_sync_in_progress

    @is_sync_in_progress.setter
    def is_sync_in_progress(self, is_sync_in_progress):
        """
        Sets the is_sync_in_progress of this RawPackageUpload.
        

        :param is_sync_in_progress: The is_sync_in_progress of this RawPackageUpload.
        :type: bool
        """

        self._is_sync_in_progress = is_sync_in_progress

    @property
    def license(self):
        """
        Gets the license of this RawPackageUpload.
        The license of this package.

        :return: The license of this RawPackageUpload.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this RawPackageUpload.
        The license of this package.

        :param license: The license of this RawPackageUpload.
        :type: str
        """

        self._license = license

    @property
    def name(self):
        """
        Gets the name of this RawPackageUpload.
        The name of this package.

        :return: The name of this RawPackageUpload.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RawPackageUpload.
        The name of this package.

        :param name: The name of this RawPackageUpload.
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """
        Gets the namespace of this RawPackageUpload.
        

        :return: The namespace of this RawPackageUpload.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this RawPackageUpload.
        

        :param namespace: The namespace of this RawPackageUpload.
        :type: str
        """

        self._namespace = namespace

    @property
    def namespace_url(self):
        """
        Gets the namespace_url of this RawPackageUpload.
        

        :return: The namespace_url of this RawPackageUpload.
        :rtype: str
        """
        return self._namespace_url

    @namespace_url.setter
    def namespace_url(self, namespace_url):
        """
        Sets the namespace_url of this RawPackageUpload.
        

        :param namespace_url: The namespace_url of this RawPackageUpload.
        :type: str
        """

        self._namespace_url = namespace_url

    @property
    def num_files(self):
        """
        Gets the num_files of this RawPackageUpload.
        

        :return: The num_files of this RawPackageUpload.
        :rtype: int
        """
        return self._num_files

    @num_files.setter
    def num_files(self, num_files):
        """
        Sets the num_files of this RawPackageUpload.
        

        :param num_files: The num_files of this RawPackageUpload.
        :type: int
        """

        self._num_files = num_files

    @property
    def package_type(self):
        """
        Gets the package_type of this RawPackageUpload.
        The type of package contents.

        :return: The package_type of this RawPackageUpload.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """
        Sets the package_type of this RawPackageUpload.
        The type of package contents.

        :param package_type: The package_type of this RawPackageUpload.
        :type: str
        """

        self._package_type = package_type

    @property
    def release(self):
        """
        Gets the release of this RawPackageUpload.
        The release of the package version (if any).

        :return: The release of this RawPackageUpload.
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """
        Sets the release of this RawPackageUpload.
        The release of the package version (if any).

        :param release: The release of this RawPackageUpload.
        :type: str
        """

        self._release = release

    @property
    def repository(self):
        """
        Gets the repository of this RawPackageUpload.
        

        :return: The repository of this RawPackageUpload.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """
        Sets the repository of this RawPackageUpload.
        

        :param repository: The repository of this RawPackageUpload.
        :type: str
        """

        self._repository = repository

    @property
    def repository_url(self):
        """
        Gets the repository_url of this RawPackageUpload.
        

        :return: The repository_url of this RawPackageUpload.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url):
        """
        Sets the repository_url of this RawPackageUpload.
        

        :param repository_url: The repository_url of this RawPackageUpload.
        :type: str
        """

        self._repository_url = repository_url

    @property
    def self_html_url(self):
        """
        Gets the self_html_url of this RawPackageUpload.
        

        :return: The self_html_url of this RawPackageUpload.
        :rtype: str
        """
        return self._self_html_url

    @self_html_url.setter
    def self_html_url(self, self_html_url):
        """
        Sets the self_html_url of this RawPackageUpload.
        

        :param self_html_url: The self_html_url of this RawPackageUpload.
        :type: str
        """

        self._self_html_url = self_html_url

    @property
    def self_url(self):
        """
        Gets the self_url of this RawPackageUpload.
        

        :return: The self_url of this RawPackageUpload.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """
        Sets the self_url of this RawPackageUpload.
        

        :param self_url: The self_url of this RawPackageUpload.
        :type: str
        """

        self._self_url = self_url

    @property
    def size(self):
        """
        Gets the size of this RawPackageUpload.
        The calculated size of the package.

        :return: The size of this RawPackageUpload.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this RawPackageUpload.
        The calculated size of the package.

        :param size: The size of this RawPackageUpload.
        :type: int
        """

        self._size = size

    @property
    def slug(self):
        """
        Gets the slug of this RawPackageUpload.
        

        :return: The slug of this RawPackageUpload.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this RawPackageUpload.
        

        :param slug: The slug of this RawPackageUpload.
        :type: str
        """

        self._slug = slug

    @property
    def slug_perm(self):
        """
        Gets the slug_perm of this RawPackageUpload.
        

        :return: The slug_perm of this RawPackageUpload.
        :rtype: str
        """
        return self._slug_perm

    @slug_perm.setter
    def slug_perm(self, slug_perm):
        """
        Sets the slug_perm of this RawPackageUpload.
        

        :param slug_perm: The slug_perm of this RawPackageUpload.
        :type: str
        """

        self._slug_perm = slug_perm

    @property
    def stage(self):
        """
        Gets the stage of this RawPackageUpload.
        The synchronisation (in progress) stage of the package.

        :return: The stage of this RawPackageUpload.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """
        Sets the stage of this RawPackageUpload.
        The synchronisation (in progress) stage of the package.

        :param stage: The stage of this RawPackageUpload.
        :type: str
        """

        self._stage = stage

    @property
    def stage_str(self):
        """
        Gets the stage_str of this RawPackageUpload.
        

        :return: The stage_str of this RawPackageUpload.
        :rtype: str
        """
        return self._stage_str

    @stage_str.setter
    def stage_str(self, stage_str):
        """
        Sets the stage_str of this RawPackageUpload.
        

        :param stage_str: The stage_str of this RawPackageUpload.
        :type: str
        """

        self._stage_str = stage_str

    @property
    def stage_updated_at(self):
        """
        Gets the stage_updated_at of this RawPackageUpload.
        The datetime the package stage was updated at.

        :return: The stage_updated_at of this RawPackageUpload.
        :rtype: str
        """
        return self._stage_updated_at

    @stage_updated_at.setter
    def stage_updated_at(self, stage_updated_at):
        """
        Sets the stage_updated_at of this RawPackageUpload.
        The datetime the package stage was updated at.

        :param stage_updated_at: The stage_updated_at of this RawPackageUpload.
        :type: str
        """

        self._stage_updated_at = stage_updated_at

    @property
    def status(self):
        """
        Gets the status of this RawPackageUpload.
        The synchronisation status of the package.

        :return: The status of this RawPackageUpload.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RawPackageUpload.
        The synchronisation status of the package.

        :param status: The status of this RawPackageUpload.
        :type: str
        """

        self._status = status

    @property
    def status_reason(self):
        """
        Gets the status_reason of this RawPackageUpload.
        A textual description for the synchronous status reason (if any

        :return: The status_reason of this RawPackageUpload.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """
        Sets the status_reason of this RawPackageUpload.
        A textual description for the synchronous status reason (if any

        :param status_reason: The status_reason of this RawPackageUpload.
        :type: str
        """

        self._status_reason = status_reason

    @property
    def status_str(self):
        """
        Gets the status_str of this RawPackageUpload.
        

        :return: The status_str of this RawPackageUpload.
        :rtype: str
        """
        return self._status_str

    @status_str.setter
    def status_str(self, status_str):
        """
        Sets the status_str of this RawPackageUpload.
        

        :param status_str: The status_str of this RawPackageUpload.
        :type: str
        """

        self._status_str = status_str

    @property
    def status_updated_at(self):
        """
        Gets the status_updated_at of this RawPackageUpload.
        The datetime the package status was updated at.

        :return: The status_updated_at of this RawPackageUpload.
        :rtype: str
        """
        return self._status_updated_at

    @status_updated_at.setter
    def status_updated_at(self, status_updated_at):
        """
        Sets the status_updated_at of this RawPackageUpload.
        The datetime the package status was updated at.

        :param status_updated_at: The status_updated_at of this RawPackageUpload.
        :type: str
        """

        self._status_updated_at = status_updated_at

    @property
    def status_url(self):
        """
        Gets the status_url of this RawPackageUpload.
        

        :return: The status_url of this RawPackageUpload.
        :rtype: str
        """
        return self._status_url

    @status_url.setter
    def status_url(self, status_url):
        """
        Sets the status_url of this RawPackageUpload.
        

        :param status_url: The status_url of this RawPackageUpload.
        :type: str
        """

        self._status_url = status_url

    @property
    def subtype(self):
        """
        Gets the subtype of this RawPackageUpload.
        

        :return: The subtype of this RawPackageUpload.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """
        Sets the subtype of this RawPackageUpload.
        

        :param subtype: The subtype of this RawPackageUpload.
        :type: str
        """

        self._subtype = subtype

    @property
    def summary(self):
        """
        Gets the summary of this RawPackageUpload.
        A one-liner synopsis of this package.

        :return: The summary of this RawPackageUpload.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this RawPackageUpload.
        A one-liner synopsis of this package.

        :param summary: The summary of this RawPackageUpload.
        :type: str
        """

        self._summary = summary

    @property
    def sync_finished_at(self):
        """
        Gets the sync_finished_at of this RawPackageUpload.
        The datetime the package sync was finished at.

        :return: The sync_finished_at of this RawPackageUpload.
        :rtype: str
        """
        return self._sync_finished_at

    @sync_finished_at.setter
    def sync_finished_at(self, sync_finished_at):
        """
        Sets the sync_finished_at of this RawPackageUpload.
        The datetime the package sync was finished at.

        :param sync_finished_at: The sync_finished_at of this RawPackageUpload.
        :type: str
        """

        self._sync_finished_at = sync_finished_at

    @property
    def sync_progress(self):
        """
        Gets the sync_progress of this RawPackageUpload.
        Synchronisation progress (from 0-100)

        :return: The sync_progress of this RawPackageUpload.
        :rtype: int
        """
        return self._sync_progress

    @sync_progress.setter
    def sync_progress(self, sync_progress):
        """
        Sets the sync_progress of this RawPackageUpload.
        Synchronisation progress (from 0-100)

        :param sync_progress: The sync_progress of this RawPackageUpload.
        :type: int
        """

        self._sync_progress = sync_progress

    @property
    def type_display(self):
        """
        Gets the type_display of this RawPackageUpload.
        

        :return: The type_display of this RawPackageUpload.
        :rtype: str
        """
        return self._type_display

    @type_display.setter
    def type_display(self, type_display):
        """
        Sets the type_display of this RawPackageUpload.
        

        :param type_display: The type_display of this RawPackageUpload.
        :type: str
        """

        self._type_display = type_display

    @property
    def uploaded_at(self):
        """
        Gets the uploaded_at of this RawPackageUpload.
        The date this package was uploaded.

        :return: The uploaded_at of this RawPackageUpload.
        :rtype: str
        """
        return self._uploaded_at

    @uploaded_at.setter
    def uploaded_at(self, uploaded_at):
        """
        Sets the uploaded_at of this RawPackageUpload.
        The date this package was uploaded.

        :param uploaded_at: The uploaded_at of this RawPackageUpload.
        :type: str
        """

        self._uploaded_at = uploaded_at

    @property
    def uploader(self):
        """
        Gets the uploader of this RawPackageUpload.
        

        :return: The uploader of this RawPackageUpload.
        :rtype: str
        """
        return self._uploader

    @uploader.setter
    def uploader(self, uploader):
        """
        Sets the uploader of this RawPackageUpload.
        

        :param uploader: The uploader of this RawPackageUpload.
        :type: str
        """

        self._uploader = uploader

    @property
    def uploader_url(self):
        """
        Gets the uploader_url of this RawPackageUpload.
        

        :return: The uploader_url of this RawPackageUpload.
        :rtype: str
        """
        return self._uploader_url

    @uploader_url.setter
    def uploader_url(self, uploader_url):
        """
        Sets the uploader_url of this RawPackageUpload.
        

        :param uploader_url: The uploader_url of this RawPackageUpload.
        :type: str
        """

        self._uploader_url = uploader_url

    @property
    def version(self):
        """
        Gets the version of this RawPackageUpload.
        The raw version for this package.

        :return: The version of this RawPackageUpload.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this RawPackageUpload.
        The raw version for this package.

        :param version: The version of this RawPackageUpload.
        :type: str
        """

        self._version = version

    @property
    def version_orig(self):
        """
        Gets the version_orig of this RawPackageUpload.
        

        :return: The version_orig of this RawPackageUpload.
        :rtype: str
        """
        return self._version_orig

    @version_orig.setter
    def version_orig(self, version_orig):
        """
        Sets the version_orig of this RawPackageUpload.
        

        :param version_orig: The version_orig of this RawPackageUpload.
        :type: str
        """

        self._version_orig = version_orig

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RawPackageUpload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
