# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class RepositoryGeoIpTestAddressResponseDict(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed': 'bool',
        'country_code': 'str',
        'ip_address': 'str',
        'reason': 'str'
    }

    attribute_map = {
        'allowed': 'allowed',
        'country_code': 'country_code',
        'ip_address': 'ip_address',
        'reason': 'reason'
    }

    def __init__(self, allowed=None, country_code=None, ip_address=None, reason=None, _configuration=None):  # noqa: E501
        """RepositoryGeoIpTestAddressResponseDict - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._allowed = None
        self._country_code = None
        self._ip_address = None
        self._reason = None
        self.discriminator = None

        self.allowed = allowed
        self.country_code = country_code
        self.ip_address = ip_address
        self.reason = reason

    @property
    def allowed(self):
        """Gets the allowed of this RepositoryGeoIpTestAddressResponseDict.

        The result of the IP test

        :return: The allowed of this RepositoryGeoIpTestAddressResponseDict.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this RepositoryGeoIpTestAddressResponseDict.

        The result of the IP test

        :param allowed: The allowed of this RepositoryGeoIpTestAddressResponseDict.
        :type: bool
        """
        if self._configuration.client_side_validation and allowed is None:
            raise ValueError("Invalid value for `allowed`, must not be `None`")  # noqa: E501

        self._allowed = allowed

    @property
    def country_code(self):
        """Gets the country_code of this RepositoryGeoIpTestAddressResponseDict.

        The country code of the tested IP address

        :return: The country_code of this RepositoryGeoIpTestAddressResponseDict.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this RepositoryGeoIpTestAddressResponseDict.

        The country code of the tested IP address

        :param country_code: The country_code of this RepositoryGeoIpTestAddressResponseDict.
        :type: str
        """
        if self._configuration.client_side_validation and country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                country_code is not None and len(country_code) < 1):
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._country_code = country_code

    @property
    def ip_address(self):
        """Gets the ip_address of this RepositoryGeoIpTestAddressResponseDict.

        The IP address that was tested

        :return: The ip_address of this RepositoryGeoIpTestAddressResponseDict.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this RepositoryGeoIpTestAddressResponseDict.

        The IP address that was tested

        :param ip_address: The ip_address of this RepositoryGeoIpTestAddressResponseDict.
        :type: str
        """
        if self._configuration.client_side_validation and ip_address is None:
            raise ValueError("Invalid value for `ip_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ip_address is not None and len(ip_address) < 1):
            raise ValueError("Invalid value for `ip_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._ip_address = ip_address

    @property
    def reason(self):
        """Gets the reason of this RepositoryGeoIpTestAddressResponseDict.

        The reason for the result

        :return: The reason of this RepositoryGeoIpTestAddressResponseDict.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this RepositoryGeoIpTestAddressResponseDict.

        The reason for the result

        :param reason: The reason of this RepositoryGeoIpTestAddressResponseDict.
        :type: str
        """
        if self._configuration.client_side_validation and reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reason is not None and len(reason) < 1):
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `1`")  # noqa: E501

        self._reason = reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryGeoIpTestAddressResponseDict, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryGeoIpTestAddressResponseDict):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryGeoIpTestAddressResponseDict):
            return True

        return self.to_dict() != other.to_dict()

