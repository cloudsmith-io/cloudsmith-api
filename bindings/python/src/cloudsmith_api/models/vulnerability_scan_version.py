# coding: utf-8

"""
    Cloudsmith API (v1)

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudsmith_api.configuration import Configuration


class VulnerabilityScanVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'major': 'int',
        'minor': 'int',
        'operator': 'str',
        'patch': 'int',
        'raw_version': 'str',
        'version': 'str'
    }

    attribute_map = {
        'major': 'major',
        'minor': 'minor',
        'operator': 'operator',
        'patch': 'patch',
        'raw_version': 'raw_version',
        'version': 'version'
    }

    def __init__(self, major=None, minor=None, operator='', patch=None, raw_version='', version='', _configuration=None):  # noqa: E501
        """VulnerabilityScanVersion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._major = None
        self._minor = None
        self._operator = None
        self._patch = None
        self._raw_version = None
        self._version = None
        self.discriminator = None

        self.major = major
        self.minor = minor
        if operator is not None:
            self.operator = operator
        self.patch = patch
        if raw_version is not None:
            self.raw_version = raw_version
        if version is not None:
            self.version = version

    @property
    def major(self):
        """Gets the major of this VulnerabilityScanVersion.


        :return: The major of this VulnerabilityScanVersion.
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this VulnerabilityScanVersion.


        :param major: The major of this VulnerabilityScanVersion.
        :type: int
        """
        if self._configuration.client_side_validation and major is None:
            raise ValueError("Invalid value for `major`, must not be `None`")  # noqa: E501

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this VulnerabilityScanVersion.


        :return: The minor of this VulnerabilityScanVersion.
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this VulnerabilityScanVersion.


        :param minor: The minor of this VulnerabilityScanVersion.
        :type: int
        """
        if self._configuration.client_side_validation and minor is None:
            raise ValueError("Invalid value for `minor`, must not be `None`")  # noqa: E501

        self._minor = minor

    @property
    def operator(self):
        """Gets the operator of this VulnerabilityScanVersion.


        :return: The operator of this VulnerabilityScanVersion.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this VulnerabilityScanVersion.


        :param operator: The operator of this VulnerabilityScanVersion.
        :type: str
        """
        if (self._configuration.client_side_validation and
                operator is not None and len(operator) > 32):
            raise ValueError("Invalid value for `operator`, length must be less than or equal to `32`")  # noqa: E501
        if (self._configuration.client_side_validation and
                operator is not None and len(operator) < 1):
            raise ValueError("Invalid value for `operator`, length must be greater than or equal to `1`")  # noqa: E501

        self._operator = operator

    @property
    def patch(self):
        """Gets the patch of this VulnerabilityScanVersion.


        :return: The patch of this VulnerabilityScanVersion.
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this VulnerabilityScanVersion.


        :param patch: The patch of this VulnerabilityScanVersion.
        :type: int
        """
        if self._configuration.client_side_validation and patch is None:
            raise ValueError("Invalid value for `patch`, must not be `None`")  # noqa: E501

        self._patch = patch

    @property
    def raw_version(self):
        """Gets the raw_version of this VulnerabilityScanVersion.


        :return: The raw_version of this VulnerabilityScanVersion.
        :rtype: str
        """
        return self._raw_version

    @raw_version.setter
    def raw_version(self, raw_version):
        """Sets the raw_version of this VulnerabilityScanVersion.


        :param raw_version: The raw_version of this VulnerabilityScanVersion.
        :type: str
        """
        if (self._configuration.client_side_validation and
                raw_version is not None and len(raw_version) > 128):
            raise ValueError("Invalid value for `raw_version`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                raw_version is not None and len(raw_version) < 1):
            raise ValueError("Invalid value for `raw_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._raw_version = raw_version

    @property
    def version(self):
        """Gets the version of this VulnerabilityScanVersion.


        :return: The version of this VulnerabilityScanVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this VulnerabilityScanVersion.


        :param version: The version of this VulnerabilityScanVersion.
        :type: str
        """
        if (self._configuration.client_side_validation and
                version is not None and len(version) > 128):
            raise ValueError("Invalid value for `version`, length must be less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                version is not None and len(version) < 1):
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VulnerabilityScanVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VulnerabilityScanVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VulnerabilityScanVersion):
            return True

        return self.to_dict() != other.to_dict()

