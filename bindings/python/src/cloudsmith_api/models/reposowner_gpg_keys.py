# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReposownerGpgKeys(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'public_key': 'str',
        'fingerprint_short': 'str',
        'default': 'bool',
        'created_at': 'str',
        'fingerprint': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'comment': 'comment',
        'public_key': 'public_key',
        'fingerprint_short': 'fingerprint_short',
        'default': 'default',
        'created_at': 'created_at',
        'fingerprint': 'fingerprint',
        'active': 'active'
    }

    def __init__(self, comment=None, public_key=None, fingerprint_short=None, default=None, created_at=None, fingerprint=None, active=None):
        """
        ReposownerGpgKeys - a model defined in Swagger
        """

        self._comment = None
        self._public_key = None
        self._fingerprint_short = None
        self._default = None
        self._created_at = None
        self._fingerprint = None
        self._active = None

        if comment is not None:
          self.comment = comment
        if public_key is not None:
          self.public_key = public_key
        if fingerprint_short is not None:
          self.fingerprint_short = fingerprint_short
        if default is not None:
          self.default = default
        if created_at is not None:
          self.created_at = created_at
        if fingerprint is not None:
          self.fingerprint = fingerprint
        if active is not None:
          self.active = active

    @property
    def comment(self):
        """
        Gets the comment of this ReposownerGpgKeys.
        

        :return: The comment of this ReposownerGpgKeys.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """
        Sets the comment of this ReposownerGpgKeys.
        

        :param comment: The comment of this ReposownerGpgKeys.
        :type: str
        """

        self._comment = comment

    @property
    def public_key(self):
        """
        Gets the public_key of this ReposownerGpgKeys.
        The public key given to repository users.

        :return: The public_key of this ReposownerGpgKeys.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """
        Sets the public_key of this ReposownerGpgKeys.
        The public key given to repository users.

        :param public_key: The public_key of this ReposownerGpgKeys.
        :type: str
        """

        self._public_key = public_key

    @property
    def fingerprint_short(self):
        """
        Gets the fingerprint_short of this ReposownerGpgKeys.
        

        :return: The fingerprint_short of this ReposownerGpgKeys.
        :rtype: str
        """
        return self._fingerprint_short

    @fingerprint_short.setter
    def fingerprint_short(self, fingerprint_short):
        """
        Sets the fingerprint_short of this ReposownerGpgKeys.
        

        :param fingerprint_short: The fingerprint_short of this ReposownerGpgKeys.
        :type: str
        """

        self._fingerprint_short = fingerprint_short

    @property
    def default(self):
        """
        Gets the default of this ReposownerGpgKeys.
        If selected this is the default key for this repository.

        :return: The default of this ReposownerGpgKeys.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this ReposownerGpgKeys.
        If selected this is the default key for this repository.

        :param default: The default of this ReposownerGpgKeys.
        :type: bool
        """

        self._default = default

    @property
    def created_at(self):
        """
        Gets the created_at of this ReposownerGpgKeys.
        

        :return: The created_at of this ReposownerGpgKeys.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this ReposownerGpgKeys.
        

        :param created_at: The created_at of this ReposownerGpgKeys.
        :type: str
        """

        self._created_at = created_at

    @property
    def fingerprint(self):
        """
        Gets the fingerprint of this ReposownerGpgKeys.
        The long identifier used by GPG for this key.

        :return: The fingerprint of this ReposownerGpgKeys.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """
        Sets the fingerprint of this ReposownerGpgKeys.
        The long identifier used by GPG for this key.

        :param fingerprint: The fingerprint of this ReposownerGpgKeys.
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def active(self):
        """
        Gets the active of this ReposownerGpgKeys.
        If selected this is the active key for this repository.

        :return: The active of this ReposownerGpgKeys.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this ReposownerGpgKeys.
        If selected this is the active key for this repository.

        :param active: The active of this ReposownerGpgKeys.
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReposownerGpgKeys):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
