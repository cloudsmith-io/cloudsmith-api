# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RepositoryTokenRefresh(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by_url': 'str',
        'self_url': 'str',
        'name': 'str',
        'user_url': 'str',
        'default': 'bool',
        'created_at': 'str',
        'refresh_url': 'str',
        'updated_at': 'str',
        'created_by': 'str',
        'token': 'str',
        'updated_by_url': 'str',
        'user': 'str',
        'slug_perm': 'str',
        'updated_by': 'str'
    }

    attribute_map = {
        'created_by_url': 'created_by_url',
        'self_url': 'self_url',
        'name': 'name',
        'user_url': 'user_url',
        'default': 'default',
        'created_at': 'created_at',
        'refresh_url': 'refresh_url',
        'updated_at': 'updated_at',
        'created_by': 'created_by',
        'token': 'token',
        'updated_by_url': 'updated_by_url',
        'user': 'user',
        'slug_perm': 'slug_perm',
        'updated_by': 'updated_by'
    }

    def __init__(self, created_by_url=None, self_url=None, name=None, user_url=None, default=None, created_at=None, refresh_url=None, updated_at=None, created_by=None, token=None, updated_by_url=None, user=None, slug_perm=None, updated_by=None):
        """
        RepositoryTokenRefresh - a model defined in Swagger
        """

        self._created_by_url = None
        self._self_url = None
        self._name = None
        self._user_url = None
        self._default = None
        self._created_at = None
        self._refresh_url = None
        self._updated_at = None
        self._created_by = None
        self._token = None
        self._updated_by_url = None
        self._user = None
        self._slug_perm = None
        self._updated_by = None

        if created_by_url is not None:
          self.created_by_url = created_by_url
        if self_url is not None:
          self.self_url = self_url
        if name is not None:
          self.name = name
        if user_url is not None:
          self.user_url = user_url
        if default is not None:
          self.default = default
        if created_at is not None:
          self.created_at = created_at
        if refresh_url is not None:
          self.refresh_url = refresh_url
        if updated_at is not None:
          self.updated_at = updated_at
        if created_by is not None:
          self.created_by = created_by
        if token is not None:
          self.token = token
        if updated_by_url is not None:
          self.updated_by_url = updated_by_url
        if user is not None:
          self.user = user
        if slug_perm is not None:
          self.slug_perm = slug_perm
        if updated_by is not None:
          self.updated_by = updated_by

    @property
    def created_by_url(self):
        """
        Gets the created_by_url of this RepositoryTokenRefresh.
        

        :return: The created_by_url of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._created_by_url

    @created_by_url.setter
    def created_by_url(self, created_by_url):
        """
        Sets the created_by_url of this RepositoryTokenRefresh.
        

        :param created_by_url: The created_by_url of this RepositoryTokenRefresh.
        :type: str
        """

        self._created_by_url = created_by_url

    @property
    def self_url(self):
        """
        Gets the self_url of this RepositoryTokenRefresh.
        

        :return: The self_url of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """
        Sets the self_url of this RepositoryTokenRefresh.
        

        :param self_url: The self_url of this RepositoryTokenRefresh.
        :type: str
        """

        self._self_url = self_url

    @property
    def name(self):
        """
        Gets the name of this RepositoryTokenRefresh.
        

        :return: The name of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RepositoryTokenRefresh.
        

        :param name: The name of this RepositoryTokenRefresh.
        :type: str
        """

        self._name = name

    @property
    def user_url(self):
        """
        Gets the user_url of this RepositoryTokenRefresh.
        

        :return: The user_url of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._user_url

    @user_url.setter
    def user_url(self, user_url):
        """
        Sets the user_url of this RepositoryTokenRefresh.
        

        :param user_url: The user_url of this RepositoryTokenRefresh.
        :type: str
        """

        self._user_url = user_url

    @property
    def default(self):
        """
        Gets the default of this RepositoryTokenRefresh.
        If selected this is the default token for this repository.

        :return: The default of this RepositoryTokenRefresh.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this RepositoryTokenRefresh.
        If selected this is the default token for this repository.

        :param default: The default of this RepositoryTokenRefresh.
        :type: bool
        """

        self._default = default

    @property
    def created_at(self):
        """
        Gets the created_at of this RepositoryTokenRefresh.
        

        :return: The created_at of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this RepositoryTokenRefresh.
        

        :param created_at: The created_at of this RepositoryTokenRefresh.
        :type: str
        """

        self._created_at = created_at

    @property
    def refresh_url(self):
        """
        Gets the refresh_url of this RepositoryTokenRefresh.
        

        :return: The refresh_url of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._refresh_url

    @refresh_url.setter
    def refresh_url(self, refresh_url):
        """
        Sets the refresh_url of this RepositoryTokenRefresh.
        

        :param refresh_url: The refresh_url of this RepositoryTokenRefresh.
        :type: str
        """

        self._refresh_url = refresh_url

    @property
    def updated_at(self):
        """
        Gets the updated_at of this RepositoryTokenRefresh.
        

        :return: The updated_at of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this RepositoryTokenRefresh.
        

        :param updated_at: The updated_at of this RepositoryTokenRefresh.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def created_by(self):
        """
        Gets the created_by of this RepositoryTokenRefresh.
        

        :return: The created_by of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this RepositoryTokenRefresh.
        

        :param created_by: The created_by of this RepositoryTokenRefresh.
        :type: str
        """

        self._created_by = created_by

    @property
    def token(self):
        """
        Gets the token of this RepositoryTokenRefresh.
        

        :return: The token of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this RepositoryTokenRefresh.
        

        :param token: The token of this RepositoryTokenRefresh.
        :type: str
        """

        self._token = token

    @property
    def updated_by_url(self):
        """
        Gets the updated_by_url of this RepositoryTokenRefresh.
        

        :return: The updated_by_url of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._updated_by_url

    @updated_by_url.setter
    def updated_by_url(self, updated_by_url):
        """
        Sets the updated_by_url of this RepositoryTokenRefresh.
        

        :param updated_by_url: The updated_by_url of this RepositoryTokenRefresh.
        :type: str
        """

        self._updated_by_url = updated_by_url

    @property
    def user(self):
        """
        Gets the user of this RepositoryTokenRefresh.
        

        :return: The user of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this RepositoryTokenRefresh.
        

        :param user: The user of this RepositoryTokenRefresh.
        :type: str
        """

        self._user = user

    @property
    def slug_perm(self):
        """
        Gets the slug_perm of this RepositoryTokenRefresh.
        

        :return: The slug_perm of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._slug_perm

    @slug_perm.setter
    def slug_perm(self, slug_perm):
        """
        Sets the slug_perm of this RepositoryTokenRefresh.
        

        :param slug_perm: The slug_perm of this RepositoryTokenRefresh.
        :type: str
        """

        self._slug_perm = slug_perm

    @property
    def updated_by(self):
        """
        Gets the updated_by of this RepositoryTokenRefresh.
        

        :return: The updated_by of this RepositoryTokenRefresh.
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """
        Sets the updated_by of this RepositoryTokenRefresh.
        

        :param updated_by: The updated_by of this RepositoryTokenRefresh.
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RepositoryTokenRefresh):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
