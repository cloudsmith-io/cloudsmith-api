# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Repository(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cdn_url': 'str',
        'self_url': 'str',
        'repository_type_str': 'str',
        'description': 'str',
        'index_files': 'bool',
        'created_at': 'str',
        'is_open_source': 'bool',
        'namespace': 'str',
        'slug': 'str',
        'size': 'int',
        'namespace_url': 'str',
        'gpg_keys': 'list[ReposownerGpgKeys]',
        'slug_perm': 'str',
        'is_public': 'bool',
        'deleted_at': 'str',
        'repository_type': 'str',
        'self_html_url': 'str',
        'is_private': 'bool',
        'name': 'str'
    }

    attribute_map = {
        'cdn_url': 'cdn_url',
        'self_url': 'self_url',
        'repository_type_str': 'repository_type_str',
        'description': 'description',
        'index_files': 'index_files',
        'created_at': 'created_at',
        'is_open_source': 'is_open_source',
        'namespace': 'namespace',
        'slug': 'slug',
        'size': 'size',
        'namespace_url': 'namespace_url',
        'gpg_keys': 'gpg_keys',
        'slug_perm': 'slug_perm',
        'is_public': 'is_public',
        'deleted_at': 'deleted_at',
        'repository_type': 'repository_type',
        'self_html_url': 'self_html_url',
        'is_private': 'is_private',
        'name': 'name'
    }

    def __init__(self, cdn_url=None, self_url=None, repository_type_str=None, description=None, index_files=None, created_at=None, is_open_source=None, namespace=None, slug=None, size=None, namespace_url=None, gpg_keys=None, slug_perm=None, is_public=None, deleted_at=None, repository_type=None, self_html_url=None, is_private=None, name=None):
        """
        Repository - a model defined in Swagger
        """

        self._cdn_url = None
        self._self_url = None
        self._repository_type_str = None
        self._description = None
        self._index_files = None
        self._created_at = None
        self._is_open_source = None
        self._namespace = None
        self._slug = None
        self._size = None
        self._namespace_url = None
        self._gpg_keys = None
        self._slug_perm = None
        self._is_public = None
        self._deleted_at = None
        self._repository_type = None
        self._self_html_url = None
        self._is_private = None
        self._name = None

        if cdn_url is not None:
          self.cdn_url = cdn_url
        if self_url is not None:
          self.self_url = self_url
        if repository_type_str is not None:
          self.repository_type_str = repository_type_str
        self.description = description
        if index_files is not None:
          self.index_files = index_files
        if created_at is not None:
          self.created_at = created_at
        self.is_open_source = is_open_source
        self.namespace = namespace
        if slug is not None:
          self.slug = slug
        if size is not None:
          self.size = size
        if namespace_url is not None:
          self.namespace_url = namespace_url
        if gpg_keys is not None:
          self.gpg_keys = gpg_keys
        if slug_perm is not None:
          self.slug_perm = slug_perm
        self.is_public = is_public
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if repository_type is not None:
          self.repository_type = repository_type
        if self_html_url is not None:
          self.self_html_url = self_html_url
        self.is_private = is_private
        if name is not None:
          self.name = name

    @property
    def cdn_url(self):
        """
        Gets the cdn_url of this Repository.
        

        :return: The cdn_url of this Repository.
        :rtype: str
        """
        return self._cdn_url

    @cdn_url.setter
    def cdn_url(self, cdn_url):
        """
        Sets the cdn_url of this Repository.
        

        :param cdn_url: The cdn_url of this Repository.
        :type: str
        """

        self._cdn_url = cdn_url

    @property
    def self_url(self):
        """
        Gets the self_url of this Repository.
        

        :return: The self_url of this Repository.
        :rtype: str
        """
        return self._self_url

    @self_url.setter
    def self_url(self, self_url):
        """
        Sets the self_url of this Repository.
        

        :param self_url: The self_url of this Repository.
        :type: str
        """

        self._self_url = self_url

    @property
    def repository_type_str(self):
        """
        Gets the repository_type_str of this Repository.
        

        :return: The repository_type_str of this Repository.
        :rtype: str
        """
        return self._repository_type_str

    @repository_type_str.setter
    def repository_type_str(self, repository_type_str):
        """
        Sets the repository_type_str of this Repository.
        

        :param repository_type_str: The repository_type_str of this Repository.
        :type: str
        """

        self._repository_type_str = repository_type_str

    @property
    def description(self):
        """
        Gets the description of this Repository.
        

        :return: The description of this Repository.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Repository.
        

        :param description: The description of this Repository.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def index_files(self):
        """
        Gets the index_files of this Repository.
        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.

        :return: The index_files of this Repository.
        :rtype: bool
        """
        return self._index_files

    @index_files.setter
    def index_files(self, index_files):
        """
        Sets the index_files of this Repository.
        If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.

        :param index_files: The index_files of this Repository.
        :type: bool
        """

        self._index_files = index_files

    @property
    def created_at(self):
        """
        Gets the created_at of this Repository.
        

        :return: The created_at of this Repository.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Repository.
        

        :param created_at: The created_at of this Repository.
        :type: str
        """

        self._created_at = created_at

    @property
    def is_open_source(self):
        """
        Gets the is_open_source of this Repository.
        

        :return: The is_open_source of this Repository.
        :rtype: bool
        """
        return self._is_open_source

    @is_open_source.setter
    def is_open_source(self, is_open_source):
        """
        Sets the is_open_source of this Repository.
        

        :param is_open_source: The is_open_source of this Repository.
        :type: bool
        """
        if is_open_source is None:
            raise ValueError("Invalid value for `is_open_source`, must not be `None`")

        self._is_open_source = is_open_source

    @property
    def namespace(self):
        """
        Gets the namespace of this Repository.
        

        :return: The namespace of this Repository.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """
        Sets the namespace of this Repository.
        

        :param namespace: The namespace of this Repository.
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")

        self._namespace = namespace

    @property
    def slug(self):
        """
        Gets the slug of this Repository.
        The slug identifies the repository in URIs.

        :return: The slug of this Repository.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """
        Sets the slug of this Repository.
        The slug identifies the repository in URIs.

        :param slug: The slug of this Repository.
        :type: str
        """

        self._slug = slug

    @property
    def size(self):
        """
        Gets the size of this Repository.
        The calculated size of the repository.

        :return: The size of this Repository.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this Repository.
        The calculated size of the repository.

        :param size: The size of this Repository.
        :type: int
        """

        self._size = size

    @property
    def namespace_url(self):
        """
        Gets the namespace_url of this Repository.
        

        :return: The namespace_url of this Repository.
        :rtype: str
        """
        return self._namespace_url

    @namespace_url.setter
    def namespace_url(self, namespace_url):
        """
        Sets the namespace_url of this Repository.
        

        :param namespace_url: The namespace_url of this Repository.
        :type: str
        """

        self._namespace_url = namespace_url

    @property
    def gpg_keys(self):
        """
        Gets the gpg_keys of this Repository.
        

        :return: The gpg_keys of this Repository.
        :rtype: list[ReposownerGpgKeys]
        """
        return self._gpg_keys

    @gpg_keys.setter
    def gpg_keys(self, gpg_keys):
        """
        Sets the gpg_keys of this Repository.
        

        :param gpg_keys: The gpg_keys of this Repository.
        :type: list[ReposownerGpgKeys]
        """

        self._gpg_keys = gpg_keys

    @property
    def slug_perm(self):
        """
        Gets the slug_perm of this Repository.
        

        :return: The slug_perm of this Repository.
        :rtype: str
        """
        return self._slug_perm

    @slug_perm.setter
    def slug_perm(self, slug_perm):
        """
        Sets the slug_perm of this Repository.
        

        :param slug_perm: The slug_perm of this Repository.
        :type: str
        """

        self._slug_perm = slug_perm

    @property
    def is_public(self):
        """
        Gets the is_public of this Repository.
        

        :return: The is_public of this Repository.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """
        Sets the is_public of this Repository.
        

        :param is_public: The is_public of this Repository.
        :type: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")

        self._is_public = is_public

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this Repository.
        

        :return: The deleted_at of this Repository.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this Repository.
        

        :param deleted_at: The deleted_at of this Repository.
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def repository_type(self):
        """
        Gets the repository_type of this Repository.
        The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.

        :return: The repository_type of this Repository.
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """
        Sets the repository_type of this Repository.
        The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.

        :param repository_type: The repository_type of this Repository.
        :type: str
        """

        self._repository_type = repository_type

    @property
    def self_html_url(self):
        """
        Gets the self_html_url of this Repository.
        

        :return: The self_html_url of this Repository.
        :rtype: str
        """
        return self._self_html_url

    @self_html_url.setter
    def self_html_url(self, self_html_url):
        """
        Sets the self_html_url of this Repository.
        

        :param self_html_url: The self_html_url of this Repository.
        :type: str
        """

        self._self_html_url = self_html_url

    @property
    def is_private(self):
        """
        Gets the is_private of this Repository.
        

        :return: The is_private of this Repository.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """
        Sets the is_private of this Repository.
        

        :param is_private: The is_private of this Repository.
        :type: bool
        """
        if is_private is None:
            raise ValueError("Invalid value for `is_private`, must not be `None`")

        self._is_private = is_private

    @property
    def name(self):
        """
        Gets the name of this Repository.
        A descriptive name for the repository.

        :return: The name of this Repository.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Repository.
        A descriptive name for the repository.

        :param name: The name of this Repository.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Repository):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
