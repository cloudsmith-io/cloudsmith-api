# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudsmith_api.api_client import ApiClient


class QuotaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def quota_history_read(self, owner, **kwargs):  # noqa: E501
        """Quota history for a given namespace.  # noqa: E501

        Quota history for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_history_read(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: QuotaHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quota_history_read_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.quota_history_read_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def quota_history_read_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Quota history for a given namespace.  # noqa: E501

        Quota history for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_history_read_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: QuotaHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quota_history_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `quota_history_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/quota/history/{owner}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotaHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quota_oss_history_read(self, owner, **kwargs):  # noqa: E501
        """Open-source Quota history for a given namespace.  # noqa: E501

        Open-source Quota history for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_oss_history_read(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: QuotaHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quota_oss_history_read_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.quota_oss_history_read_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def quota_oss_history_read_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Open-source Quota history for a given namespace.  # noqa: E501

        Open-source Quota history for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_oss_history_read_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: QuotaHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quota_oss_history_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `quota_oss_history_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/quota/oss/history/{owner}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuotaHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quota_oss_read(self, owner, **kwargs):  # noqa: E501
        """Open-source Quota usage for a given namespace.  # noqa: E501

        Open-source Quota usage for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_oss_read(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: Quota
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quota_oss_read_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.quota_oss_read_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def quota_oss_read_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Open-source Quota usage for a given namespace.  # noqa: E501

        Open-source Quota usage for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_oss_read_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: Quota
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quota_oss_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `quota_oss_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/quota/oss/{owner}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quota',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def quota_read(self, owner, **kwargs):  # noqa: E501
        """Quota usage for a given namespace.  # noqa: E501

        Quota usage for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_read(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: Quota
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.quota_read_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.quota_read_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def quota_read_with_http_info(self, owner, **kwargs):  # noqa: E501
        """Quota usage for a given namespace.  # noqa: E501

        Quota usage for a given namespace.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.quota_read_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :return: Quota
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method quota_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `quota_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/quota/{owner}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quota',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
