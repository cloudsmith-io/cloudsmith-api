# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudsmith_api.api_client import ApiClient


class BadgesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def badges_version_list(self, owner, repo, package_format, package_name, package_version, package_identifiers, **kwargs):  # noqa: E501
        """Get latest package version for a package or package group.  # noqa: E501

        Get latest package version for a package or package group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.badges_version_list(owner, repo, package_format, package_name, package_version, package_identifiers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :param str repo:  (required)
        :param str package_format:  (required)
        :param str package_name:  (required)
        :param str package_version:  (required)
        :param str package_identifiers:  (required)
        :param str badge_token: Badge token to authenticate for private packages
        :param str cache_seconds: Override the shields.io badge cacheSeconds value.
        :param str color: Override the shields.io badge color value.
        :param str label: Override the shields.io badge label value.
        :param str label_color: Override the shields.io badge labelColor value.
        :param str logo_color: Override the shields.io badge logoColor value.
        :param str logo_width: Override the shields.io badge logoWidth value.
        :param bool render: If true, badge will be rendered
        :param bool shields: If true, a shields response will be generated
        :param bool show_latest: If true, for latest version badges a '(latest)' suffix is added
        :param str style: Override the shields.io badge style value.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.badges_version_list_with_http_info(owner, repo, package_format, package_name, package_version, package_identifiers, **kwargs)  # noqa: E501
        else:
            (data) = self.badges_version_list_with_http_info(owner, repo, package_format, package_name, package_version, package_identifiers, **kwargs)  # noqa: E501
            return data

    def badges_version_list_with_http_info(self, owner, repo, package_format, package_name, package_version, package_identifiers, **kwargs):  # noqa: E501
        """Get latest package version for a package or package group.  # noqa: E501

        Get latest package version for a package or package group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.badges_version_list_with_http_info(owner, repo, package_format, package_name, package_version, package_identifiers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner:  (required)
        :param str repo:  (required)
        :param str package_format:  (required)
        :param str package_name:  (required)
        :param str package_version:  (required)
        :param str package_identifiers:  (required)
        :param str badge_token: Badge token to authenticate for private packages
        :param str cache_seconds: Override the shields.io badge cacheSeconds value.
        :param str color: Override the shields.io badge color value.
        :param str label: Override the shields.io badge label value.
        :param str label_color: Override the shields.io badge labelColor value.
        :param str logo_color: Override the shields.io badge logoColor value.
        :param str logo_width: Override the shields.io badge logoWidth value.
        :param bool render: If true, badge will be rendered
        :param bool shields: If true, a shields response will be generated
        :param bool show_latest: If true, for latest version badges a '(latest)' suffix is added
        :param str style: Override the shields.io badge style value.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'package_format', 'package_name', 'package_version', 'package_identifiers', 'badge_token', 'cache_seconds', 'color', 'label', 'label_color', 'logo_color', 'logo_width', 'render', 'shields', 'show_latest', 'style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method badges_version_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if self.api_client.client_side_validation and ('owner' not in params or
                                                       params['owner'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `owner` when calling `badges_version_list`")  # noqa: E501
        # verify the required parameter 'repo' is set
        if self.api_client.client_side_validation and ('repo' not in params or
                                                       params['repo'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `repo` when calling `badges_version_list`")  # noqa: E501
        # verify the required parameter 'package_format' is set
        if self.api_client.client_side_validation and ('package_format' not in params or
                                                       params['package_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `package_format` when calling `badges_version_list`")  # noqa: E501
        # verify the required parameter 'package_name' is set
        if self.api_client.client_side_validation and ('package_name' not in params or
                                                       params['package_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `package_name` when calling `badges_version_list`")  # noqa: E501
        # verify the required parameter 'package_version' is set
        if self.api_client.client_side_validation and ('package_version' not in params or
                                                       params['package_version'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `package_version` when calling `badges_version_list`")  # noqa: E501
        # verify the required parameter 'package_identifiers' is set
        if self.api_client.client_side_validation and ('package_identifiers' not in params or
                                                       params['package_identifiers'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `package_identifiers` when calling `badges_version_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501
        if 'repo' in params:
            path_params['repo'] = params['repo']  # noqa: E501
        if 'package_format' in params:
            path_params['package_format'] = params['package_format']  # noqa: E501
        if 'package_name' in params:
            path_params['package_name'] = params['package_name']  # noqa: E501
        if 'package_version' in params:
            path_params['package_version'] = params['package_version']  # noqa: E501
        if 'package_identifiers' in params:
            path_params['package_identifiers'] = params['package_identifiers']  # noqa: E501

        query_params = []
        if 'badge_token' in params:
            query_params.append(('badge_token', params['badge_token']))  # noqa: E501
        if 'cache_seconds' in params:
            query_params.append(('cacheSeconds', params['cache_seconds']))  # noqa: E501
        if 'color' in params:
            query_params.append(('color', params['color']))  # noqa: E501
        if 'label' in params:
            query_params.append(('label', params['label']))  # noqa: E501
        if 'label_color' in params:
            query_params.append(('labelColor', params['label_color']))  # noqa: E501
        if 'logo_color' in params:
            query_params.append(('logoColor', params['logo_color']))  # noqa: E501
        if 'logo_width' in params:
            query_params.append(('logoWidth', params['logo_width']))  # noqa: E501
        if 'render' in params:
            query_params.append(('render', params['render']))  # noqa: E501
        if 'shields' in params:
            query_params.append(('shields', params['shields']))  # noqa: E501
        if 'show_latest' in params:
            query_params.append(('show_latest', params['show_latest']))  # noqa: E501
        if 'style' in params:
            query_params.append(('style', params['style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
