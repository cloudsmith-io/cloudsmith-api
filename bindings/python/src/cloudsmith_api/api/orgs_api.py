# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from cloudsmith_api.api_client import ApiClient


class OrgsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def orgs_invites_create(self, org, **kwargs):  # noqa: E501
        """Create an organization invite for a specific user  # noqa: E501

        Create an organization invite for a specific user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_create(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param OrgsInvitesCreate data:
        :return: OrganizationInvite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_invites_create_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_invites_create_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_invites_create_with_http_info(self, org, **kwargs):  # noqa: E501
        """Create an organization invite for a specific user  # noqa: E501

        Create an organization invite for a specific user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_create_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param OrgsInvitesCreate data:
        :return: OrganizationInvite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_invites_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_invites_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/invites/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationInvite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_invites_delete(self, org, slug_perm, **kwargs):  # noqa: E501
        """Delete a specific organization invite  # noqa: E501

        Delete a specific organization invite  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_delete(org, slug_perm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str slug_perm:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_invites_delete_with_http_info(org, slug_perm, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_invites_delete_with_http_info(org, slug_perm, **kwargs)  # noqa: E501
            return data

    def orgs_invites_delete_with_http_info(self, org, slug_perm, **kwargs):  # noqa: E501
        """Delete a specific organization invite  # noqa: E501

        Delete a specific organization invite  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_delete_with_http_info(org, slug_perm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str slug_perm:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'slug_perm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_invites_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_invites_delete`")  # noqa: E501
        # verify the required parameter 'slug_perm' is set
        if self.api_client.client_side_validation and ('slug_perm' not in params or
                                                       params['slug_perm'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `slug_perm` when calling `orgs_invites_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'slug_perm' in params:
            path_params['slug_perm'] = params['slug_perm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/invites/{slug_perm}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_invites_extend(self, org, slug_perm, **kwargs):  # noqa: E501
        """Extend an organization invite.  # noqa: E501

        Extend an organization invite.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_extend(org, slug_perm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str slug_perm:  (required)
        :param OrgsInvitesExtend data:
        :return: OrganizationInvite
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_invites_extend_with_http_info(org, slug_perm, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_invites_extend_with_http_info(org, slug_perm, **kwargs)  # noqa: E501
            return data

    def orgs_invites_extend_with_http_info(self, org, slug_perm, **kwargs):  # noqa: E501
        """Extend an organization invite.  # noqa: E501

        Extend an organization invite.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_extend_with_http_info(org, slug_perm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str slug_perm:  (required)
        :param OrgsInvitesExtend data:
        :return: OrganizationInvite
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'slug_perm', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_invites_extend" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_invites_extend`")  # noqa: E501
        # verify the required parameter 'slug_perm' is set
        if self.api_client.client_side_validation and ('slug_perm' not in params or
                                                       params['slug_perm'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `slug_perm` when calling `orgs_invites_extend`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'slug_perm' in params:
            path_params['slug_perm'] = params['slug_perm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/invites/{slug_perm}/extend/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationInvite',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_invites_list(self, org, **kwargs):  # noqa: E501
        """Get a list of all invites for an organization.  # noqa: E501

        Get a list of all invites for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_list(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationInvite]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_invites_list_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_invites_list_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_invites_list_with_http_info(self, org, **kwargs):  # noqa: E501
        """Get a list of all invites for an organization.  # noqa: E501

        Get a list of all invites for an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_invites_list_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationInvite]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_invites_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_invites_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/invites/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationInvite]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_list(self, **kwargs):  # noqa: E501
        """Get a list of all the organizations you are associated with.  # noqa: E501

        Get a list of all the organizations you are associated with.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.orgs_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def orgs_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of all the organizations you are associated with.  # noqa: E501

        Get a list of all the organizations you are associated with.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[Organization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Organization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_members_delete(self, org, member, **kwargs):  # noqa: E501
        """Removes a member from the organization.  # noqa: E501

        Removes a member from the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_delete(org, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str member:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_members_delete_with_http_info(org, member, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_members_delete_with_http_info(org, member, **kwargs)  # noqa: E501
            return data

    def orgs_members_delete_with_http_info(self, org, member, **kwargs):  # noqa: E501
        """Removes a member from the organization.  # noqa: E501

        Removes a member from the organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_delete_with_http_info(org, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str member:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_members_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_members_delete`")  # noqa: E501
        # verify the required parameter 'member' is set
        if self.api_client.client_side_validation and ('member' not in params or
                                                       params['member'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member` when calling `orgs_members_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'member' in params:
            path_params['member'] = params['member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/members/{member}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_members_list(self, org, **kwargs):  # noqa: E501
        """Get the details for all organization members.  # noqa: E501

        Get the details for all organization members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_list(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationMembership]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_members_list_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_members_list_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_members_list_with_http_info(self, org, **kwargs):  # noqa: E501
        """Get the details for all organization members.  # noqa: E501

        Get the details for all organization members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_list_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationMembership]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_members_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_members_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/members/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationMembership]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_members_read(self, org, member, **kwargs):  # noqa: E501
        """Get the details for a specific organization member.  # noqa: E501

        Get the details for a specific organization member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_read(org, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str member:  (required)
        :return: OrganizationMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_members_read_with_http_info(org, member, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_members_read_with_http_info(org, member, **kwargs)  # noqa: E501
            return data

    def orgs_members_read_with_http_info(self, org, member, **kwargs):  # noqa: E501
        """Get the details for a specific organization member.  # noqa: E501

        Get the details for a specific organization member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_read_with_http_info(org, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str member:  (required)
        :return: OrganizationMembership
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_members_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_members_read`")  # noqa: E501
        # verify the required parameter 'member' is set
        if self.api_client.client_side_validation and ('member' not in params or
                                                       params['member'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member` when calling `orgs_members_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'member' in params:
            path_params['member'] = params['member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/members/{member}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationMembership',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_members_remove(self, org, member, **kwargs):  # noqa: E501
        """Removes a member from the organization (deprecated, use DELETE instead).  # noqa: E501

        Removes a member from the organization (deprecated, use DELETE instead).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_remove(org, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str member:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_members_remove_with_http_info(org, member, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_members_remove_with_http_info(org, member, **kwargs)  # noqa: E501
            return data

    def orgs_members_remove_with_http_info(self, org, member, **kwargs):  # noqa: E501
        """Removes a member from the organization (deprecated, use DELETE instead).  # noqa: E501

        Removes a member from the organization (deprecated, use DELETE instead).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_members_remove_with_http_info(org, member, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str member:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'member']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_members_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_members_remove`")  # noqa: E501
        # verify the required parameter 'member' is set
        if self.api_client.client_side_validation and ('member' not in params or
                                                       params['member'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `member` when calling `orgs_members_remove`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'member' in params:
            path_params['member'] = params['member']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/members/{member}/remove/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_read(self, org, **kwargs):  # noqa: E501
        """Get the details for the specific organization.  # noqa: E501

        Get the details for the specific organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_read(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_read_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_read_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_read_with_http_info(self, org, **kwargs):  # noqa: E501
        """Get the details for the specific organization.  # noqa: E501

        Get the details for the specific organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_read_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :return: Organization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_saml_group_sync_create(self, org, **kwargs):  # noqa: E501
        """Create a new SAML Group Sync mapping within an organization.  # noqa: E501

        Create a new SAML Group Sync mapping within an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_saml_group_sync_create(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param OrgsSamlgroupsyncCreate data:
        :return: OrganizationGroupSync
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_saml_group_sync_create_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_saml_group_sync_create_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_saml_group_sync_create_with_http_info(self, org, **kwargs):  # noqa: E501
        """Create a new SAML Group Sync mapping within an organization.  # noqa: E501

        Create a new SAML Group Sync mapping within an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_saml_group_sync_create_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param OrgsSamlgroupsyncCreate data:
        :return: OrganizationGroupSync
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_saml_group_sync_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_saml_group_sync_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/saml-group-sync/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationGroupSync',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_saml_group_sync_delete(self, org, slug_perm, **kwargs):  # noqa: E501
        """Delete a SAML Group Sync mapping from an organization.  # noqa: E501

        Delete a SAML Group Sync mapping from an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_saml_group_sync_delete(org, slug_perm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str slug_perm:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_saml_group_sync_delete_with_http_info(org, slug_perm, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_saml_group_sync_delete_with_http_info(org, slug_perm, **kwargs)  # noqa: E501
            return data

    def orgs_saml_group_sync_delete_with_http_info(self, org, slug_perm, **kwargs):  # noqa: E501
        """Delete a SAML Group Sync mapping from an organization.  # noqa: E501

        Delete a SAML Group Sync mapping from an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_saml_group_sync_delete_with_http_info(org, slug_perm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str slug_perm:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'slug_perm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_saml_group_sync_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_saml_group_sync_delete`")  # noqa: E501
        # verify the required parameter 'slug_perm' is set
        if self.api_client.client_side_validation and ('slug_perm' not in params or
                                                       params['slug_perm'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `slug_perm` when calling `orgs_saml_group_sync_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'slug_perm' in params:
            path_params['slug_perm'] = params['slug_perm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/saml-group-sync/{slug_perm}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_saml_group_sync_list(self, org, **kwargs):  # noqa: E501
        """Get the details of all SAML Group Sync mapping within an organization.  # noqa: E501

        Get the details of all SAML Group Sync mapping within an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_saml_group_sync_list(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationGroupSync]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_saml_group_sync_list_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_saml_group_sync_list_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_saml_group_sync_list_with_http_info(self, org, **kwargs):  # noqa: E501
        """Get the details of all SAML Group Sync mapping within an organization.  # noqa: E501

        Get the details of all SAML Group Sync mapping within an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_saml_group_sync_list_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationGroupSync]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_saml_group_sync_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_saml_group_sync_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/saml-group-sync/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationGroupSync]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_create(self, org, **kwargs):  # noqa: E501
        """Create a team for this organization.  # noqa: E501

        Create a team for this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_create(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param OrgsTeamsCreate data:
        :return: OrganizationTeam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_create_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_create_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_teams_create_with_http_info(self, org, **kwargs):  # noqa: E501
        """Create a team for this organization.  # noqa: E501

        Create a team for this organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_create_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param OrgsTeamsCreate data:
        :return: OrganizationTeam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationTeam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_delete(self, org, team, **kwargs):  # noqa: E501
        """Delete a specific team in a organization.  # noqa: E501

        Delete a specific team in a organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_delete(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_delete_with_http_info(org, team, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_delete_with_http_info(org, team, **kwargs)  # noqa: E501
            return data

    def orgs_teams_delete_with_http_info(self, org, team, **kwargs):  # noqa: E501
        """Delete a specific team in a organization.  # noqa: E501

        Delete a specific team in a organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_delete_with_http_info(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_delete`")  # noqa: E501
        # verify the required parameter 'team' is set
        if self.api_client.client_side_validation and ('team' not in params or
                                                       params['team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team` when calling `orgs_teams_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/{team}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_list(self, org, **kwargs):  # noqa: E501
        """Get the details of all teams within an organization.  # noqa: E501

        Get the details of all teams within an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_list(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationTeam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_list_with_http_info(org, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_list_with_http_info(org, **kwargs)  # noqa: E501
            return data

    def orgs_teams_list_with_http_info(self, org, **kwargs):  # noqa: E501
        """Get the details of all teams within an organization.  # noqa: E501

        Get the details of all teams within an organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_list_with_http_info(org, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[OrganizationTeam]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OrganizationTeam]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_members_create(self, org, team, **kwargs):  # noqa: E501
        """Add users to a team.  # noqa: E501

        Add users to a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_members_create(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :param OrgsTeamsMembersCreate data:
        :return: OrganizationTeamMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_members_create_with_http_info(org, team, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_members_create_with_http_info(org, team, **kwargs)  # noqa: E501
            return data

    def orgs_teams_members_create_with_http_info(self, org, team, **kwargs):  # noqa: E501
        """Add users to a team.  # noqa: E501

        Add users to a team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_members_create_with_http_info(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :param OrgsTeamsMembersCreate data:
        :return: OrganizationTeamMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'team', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_members_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_members_create`")  # noqa: E501
        # verify the required parameter 'team' is set
        if self.api_client.client_side_validation and ('team' not in params or
                                                       params['team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team` when calling `orgs_teams_members_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/{team}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationTeamMembers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_members_list(self, org, team, **kwargs):  # noqa: E501
        """List all members for the team.  # noqa: E501

        List all members for the team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_members_list(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :return: OrganizationTeamMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_members_list_with_http_info(org, team, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_members_list_with_http_info(org, team, **kwargs)  # noqa: E501
            return data

    def orgs_teams_members_list_with_http_info(self, org, team, **kwargs):  # noqa: E501
        """List all members for the team.  # noqa: E501

        List all members for the team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_members_list_with_http_info(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :return: OrganizationTeamMembers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_members_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_members_list`")  # noqa: E501
        # verify the required parameter 'team' is set
        if self.api_client.client_side_validation and ('team' not in params or
                                                       params['team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team` when calling `orgs_teams_members_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/{team}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationTeamMembers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_members_update(self, org, team, **kwargs):  # noqa: E501
        """Replace all team members.  # noqa: E501

        Replace all team members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_members_update(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :param OrgsTeamsMembersUpdate data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_members_update_with_http_info(org, team, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_members_update_with_http_info(org, team, **kwargs)  # noqa: E501
            return data

    def orgs_teams_members_update_with_http_info(self, org, team, **kwargs):  # noqa: E501
        """Replace all team members.  # noqa: E501

        Replace all team members.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_members_update_with_http_info(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :param OrgsTeamsMembersUpdate data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'team', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_members_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_members_update`")  # noqa: E501
        # verify the required parameter 'team' is set
        if self.api_client.client_side_validation and ('team' not in params or
                                                       params['team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team` when calling `orgs_teams_members_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/{team}/members', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_partial_update(self, org, team, **kwargs):  # noqa: E501
        """Update a specific team in a organization.  # noqa: E501

        Update a specific team in a organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_partial_update(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :param OrgsTeamsPartialUpdate data:
        :return: OrganizationTeam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_partial_update_with_http_info(org, team, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_partial_update_with_http_info(org, team, **kwargs)  # noqa: E501
            return data

    def orgs_teams_partial_update_with_http_info(self, org, team, **kwargs):  # noqa: E501
        """Update a specific team in a organization.  # noqa: E501

        Update a specific team in a organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_partial_update_with_http_info(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :param OrgsTeamsPartialUpdate data:
        :return: OrganizationTeam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'team', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_partial_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_partial_update`")  # noqa: E501
        # verify the required parameter 'team' is set
        if self.api_client.client_side_validation and ('team' not in params or
                                                       params['team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team` when calling `orgs_teams_partial_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/{team}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationTeam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orgs_teams_read(self, org, team, **kwargs):  # noqa: E501
        """Get the details for the specific team.  # noqa: E501

        Get the details for the specific team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_read(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :return: OrganizationTeam
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orgs_teams_read_with_http_info(org, team, **kwargs)  # noqa: E501
        else:
            (data) = self.orgs_teams_read_with_http_info(org, team, **kwargs)  # noqa: E501
            return data

    def orgs_teams_read_with_http_info(self, org, team, **kwargs):  # noqa: E501
        """Get the details for the specific team.  # noqa: E501

        Get the details for the specific team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orgs_teams_read_with_http_info(org, team, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str org:  (required)
        :param str team:  (required)
        :return: OrganizationTeam
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['org', 'team']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orgs_teams_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'org' is set
        if self.api_client.client_side_validation and ('org' not in params or
                                                       params['org'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `org` when calling `orgs_teams_read`")  # noqa: E501
        # verify the required parameter 'team' is set
        if self.api_client.client_side_validation and ('team' not in params or
                                                       params['team'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `team` when calling `orgs_teams_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org' in params:
            path_params['org'] = params['org']  # noqa: E501
        if 'team' in params:
            path_params['team'] = params['team']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/orgs/{org}/teams/{team}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrganizationTeam',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
