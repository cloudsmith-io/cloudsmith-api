# coding: utf-8

"""
    Cloudsmith API

    The API to the Cloudsmith Service

    OpenAPI spec version: v1
    Contact: support@cloudsmith.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PackagesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def packages_delete(self, owner, repo, slug, **kwargs):
        """
        Delete a specific package in a repository.
        Delete a specific package in a repository.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_delete(owner, repo, slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param str slug:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_delete_with_http_info(owner, repo, slug, **kwargs)
        else:
            (data) = self.packages_delete_with_http_info(owner, repo, slug, **kwargs)
            return data

    def packages_delete_with_http_info(self, owner, repo, slug, **kwargs):
        """
        Delete a specific package in a repository.
        Delete a specific package in a repository.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_delete_with_http_info(owner, repo, slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param str slug:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'slug']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_delete`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_delete`")
        # verify the required parameter 'slug' is set
        if ('slug' not in params) or (params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `packages_delete`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']
        if 'slug' in params:
            path_params['slug'] = params['slug']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/{slug}/', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_list(self, owner, repo, **kwargs):
        """
        Views for working with repository packages.
        Views for working with repository packages.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_list(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[RpmPackageUpload]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_list_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_list_with_http_info(owner, repo, **kwargs)
            return data

    def packages_list_with_http_info(self, owner, repo, **kwargs):
        """
        Views for working with repository packages.
        Views for working with repository packages.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_list_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: list[RpmPackageUpload]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_list`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_list`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[RpmPackageUpload]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_read(self, owner, repo, slug, **kwargs):
        """
        Get a specific package in a repository.
        Get a specific package in a repository.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_read(owner, repo, slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param str slug:  (required)
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_read_with_http_info(owner, repo, slug, **kwargs)
        else:
            (data) = self.packages_read_with_http_info(owner, repo, slug, **kwargs)
            return data

    def packages_read_with_http_info(self, owner, repo, slug, **kwargs):
        """
        Get a specific package in a repository.
        Get a specific package in a repository.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_read_with_http_info(owner, repo, slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param str slug:  (required)
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'slug']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_read`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_read`")
        # verify the required parameter 'slug' is set
        if ('slug' not in params) or (params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `packages_read`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']
        if 'slug' in params:
            path_params['slug'] = params['slug']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/{slug}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RpmPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_status(self, owner, repo, slug, **kwargs):
        """
        Get the synchronisation status for a package.
        Get the synchronisation status for a package.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_status(owner, repo, slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param str slug:  (required)
        :return: PackageStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_status_with_http_info(owner, repo, slug, **kwargs)
        else:
            (data) = self.packages_status_with_http_info(owner, repo, slug, **kwargs)
            return data

    def packages_status_with_http_info(self, owner, repo, slug, **kwargs):
        """
        Get the synchronisation status for a package.
        Get the synchronisation status for a package.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_status_with_http_info(owner, repo, slug, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param str slug:  (required)
        :return: PackageStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'slug']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_status`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_status`")
        # verify the required parameter 'slug' is set
        if ('slug' not in params) or (params['slug'] is None):
            raise ValueError("Missing the required parameter `slug` when calling `packages_status`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']
        if 'slug' in params:
            path_params['slug'] = params['slug']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/{slug}/status/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PackageStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_deb(self, owner, repo, **kwargs):
        """
        Create a new Debian package
        Create a new Debian package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_deb(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadDeb data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_deb_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_deb_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_deb_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new Debian package
        Create a new Debian package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_deb_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadDeb data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_deb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_deb`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_deb`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/deb/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RpmPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_maven(self, owner, repo, **kwargs):
        """
        Create a new Maven package
        Create a new Maven package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_maven(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadMaven data:
        :return: MavenPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_maven_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_maven_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_maven_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new Maven package
        Create a new Maven package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_maven_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadMaven data:
        :return: MavenPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_maven" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_maven`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_maven`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/maven/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='MavenPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_python(self, owner, repo, **kwargs):
        """
        Create a new Python package
        Create a new Python package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_python(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadPython data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_python_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_python_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_python_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new Python package
        Create a new Python package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_python_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadPython data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_python" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_python`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_python`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/python/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RpmPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_raw(self, owner, repo, **kwargs):
        """
        Create a new Raw package
        Create a new Raw package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_raw(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadRaw data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_raw_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_raw_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_raw_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new Raw package
        Create a new Raw package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_raw_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadRaw data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_raw" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_raw`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_raw`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/raw/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RpmPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_rpm(self, owner, repo, **kwargs):
        """
        Create a new RedHat package
        Create a new RedHat package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_rpm(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadRpm data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_rpm_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_rpm_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_rpm_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new RedHat package
        Create a new RedHat package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_rpm_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadRpm data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_rpm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_rpm`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_rpm`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/rpm/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RpmPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_ruby(self, owner, repo, **kwargs):
        """
        Create a new Ruby package
        Create a new Ruby package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_ruby(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadRuby data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_ruby_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_ruby_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_ruby_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new Ruby package
        Create a new Ruby package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_ruby_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadRuby data:
        :return: RpmPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_ruby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_ruby`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_ruby`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/ruby/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RpmPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_upload_vagrant(self, owner, repo, **kwargs):
        """
        Create a new Vagrant package
        Create a new Vagrant package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_vagrant(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadVagrant data:
        :return: VagrantPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_upload_vagrant_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_upload_vagrant_with_http_info(owner, repo, **kwargs)
            return data

    def packages_upload_vagrant_with_http_info(self, owner, repo, **kwargs):
        """
        Create a new Vagrant package
        Create a new Vagrant package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_upload_vagrant_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesUploadVagrant data:
        :return: VagrantPackageUpload
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_upload_vagrant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_upload_vagrant`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_upload_vagrant`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/upload/vagrant/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='VagrantPackageUpload',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_deb(self, owner, repo, **kwargs):
        """
        Validate parameters for create Debian package
        Validate parameters for create Debian package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_deb(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadDeb data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_deb_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_deb_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_deb_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create Debian package
        Validate parameters for create Debian package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_deb_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadDeb data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_deb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_deb`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_deb`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/deb/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_maven(self, owner, repo, **kwargs):
        """
        Validate parameters for create Maven package
        Validate parameters for create Maven package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_maven(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadMaven data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_maven_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_maven_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_maven_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create Maven package
        Validate parameters for create Maven package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_maven_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadMaven data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_maven" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_maven`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_maven`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/maven/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_python(self, owner, repo, **kwargs):
        """
        Validate parameters for create Python package
        Validate parameters for create Python package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_python(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadPython data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_python_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_python_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_python_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create Python package
        Validate parameters for create Python package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_python_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadPython data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_python" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_python`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_python`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/python/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_raw(self, owner, repo, **kwargs):
        """
        Validate parameters for create Raw package
        Validate parameters for create Raw package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_raw(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadRaw data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_raw_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_raw_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_raw_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create Raw package
        Validate parameters for create Raw package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_raw_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadRaw data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_raw" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_raw`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_raw`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/raw/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_rpm(self, owner, repo, **kwargs):
        """
        Validate parameters for create RedHat package
        Validate parameters for create RedHat package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_rpm(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadRpm data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_rpm_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_rpm_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_rpm_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create RedHat package
        Validate parameters for create RedHat package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_rpm_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadRpm data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_rpm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_rpm`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_rpm`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/rpm/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_ruby(self, owner, repo, **kwargs):
        """
        Validate parameters for create Ruby package
        Validate parameters for create Ruby package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_ruby(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadRuby data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_ruby_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_ruby_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_ruby_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create Ruby package
        Validate parameters for create Ruby package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_ruby_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadRuby data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_ruby" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_ruby`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_ruby`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/ruby/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def packages_validate_upload_vagrant(self, owner, repo, **kwargs):
        """
        Validate parameters for create Vagrant package
        Validate parameters for create Vagrant package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_vagrant(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadVagrant data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.packages_validate_upload_vagrant_with_http_info(owner, repo, **kwargs)
        else:
            (data) = self.packages_validate_upload_vagrant_with_http_info(owner, repo, **kwargs)
            return data

    def packages_validate_upload_vagrant_with_http_info(self, owner, repo, **kwargs):
        """
        Validate parameters for create Vagrant package
        Validate parameters for create Vagrant package
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.packages_validate_upload_vagrant_with_http_info(owner, repo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str owner:  (required)
        :param str repo:  (required)
        :param PackagesValidateuploadVagrant data:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner', 'repo', 'data']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method packages_validate_upload_vagrant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params) or (params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `packages_validate_upload_vagrant`")
        # verify the required parameter 'repo' is set
        if ('repo' not in params) or (params['repo'] is None):
            raise ValueError("Missing the required parameter `repo` when calling `packages_validate_upload_vagrant`")


        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']
        if 'repo' in params:
            path_params['repo'] = params['repo']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apikey', 'basic', 'csrf_token']

        return self.api_client.call_api('/packages/{owner}/{repo}/validate-upload/vagrant/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
