=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module CloudsmithApi
  class ReposApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a list of all repositories associated with current user.
    # Get a list of all repositories associated with current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<Repository>]
    def repos_all_list(opts = {})
      data, _status_code, _headers = repos_all_list_with_http_info(opts)
      return data
    end

    # Get a list of all repositories associated with current user.
    # Get a list of all repositories associated with current user.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(Array<Repository>, Fixnum, Hash)>] Array<Repository> data, response status code and response headers
    def repos_all_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReposApi.repos_all_list ..."
      end
      # resource path
      local_var_path = "/repos/"

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Repository>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReposApi#repos_all_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new repository in a given namespace.
    # Create a new repository in a given namespace.
    # @param owner 
    # @param [Hash] opts the optional parameters
    # @option opts [ReposCreate] :data 
    # @return [Repository]
    def repos_create(owner, opts = {})
      data, _status_code, _headers = repos_create_with_http_info(owner, opts)
      return data
    end

    # Create a new repository in a given namespace.
    # Create a new repository in a given namespace.
    # @param owner 
    # @param [Hash] opts the optional parameters
    # @option opts [ReposCreate] :data 
    # @return [Array<(Repository, Fixnum, Hash)>] Repository data, response status code and response headers
    def repos_create_with_http_info(owner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReposApi.repos_create ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReposApi.repos_create"
      end
      # resource path
      local_var_path = "/repos/{owner}/".sub('{' + 'owner' + '}', owner.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Repository')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReposApi#repos_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a repository in a given namespace.
    # Delete a repository in a given namespace.
    # @param owner 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def repos_delete(owner, identifier, opts = {})
      repos_delete_with_http_info(owner, identifier, opts)
      return nil
    end

    # Delete a repository in a given namespace.
    # Delete a repository in a given namespace.
    # @param owner 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def repos_delete_with_http_info(owner, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReposApi.repos_delete ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReposApi.repos_delete"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ReposApi.repos_delete"
      end
      # resource path
      local_var_path = "/repos/{owner}/{identifier}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReposApi#repos_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all repositories within a namespace.
    # Get a list of all repositories within a namespace.
    # @param owner 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<Repository>]
    def repos_list(owner, opts = {})
      data, _status_code, _headers = repos_list_with_http_info(owner, opts)
      return data
    end

    # Get a list of all repositories within a namespace.
    # Get a list of all repositories within a namespace.
    # @param owner 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(Array<Repository>, Fixnum, Hash)>] Array<Repository> data, response status code and response headers
    def repos_list_with_http_info(owner, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReposApi.repos_list ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReposApi.repos_list"
      end
      # resource path
      local_var_path = "/repos/{owner}/".sub('{' + 'owner' + '}', owner.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Repository>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReposApi#repos_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update details about a repository in a given namespace.
    # Update details about a repository in a given namespace.
    # @param owner 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [ReposPartialUpdate] :data 
    # @return [Repository]
    def repos_partial_update(owner, identifier, opts = {})
      data, _status_code, _headers = repos_partial_update_with_http_info(owner, identifier, opts)
      return data
    end

    # Update details about a repository in a given namespace.
    # Update details about a repository in a given namespace.
    # @param owner 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [ReposPartialUpdate] :data 
    # @return [Array<(Repository, Fixnum, Hash)>] Repository data, response status code and response headers
    def repos_partial_update_with_http_info(owner, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReposApi.repos_partial_update ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReposApi.repos_partial_update"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ReposApi.repos_partial_update"
      end
      # resource path
      local_var_path = "/repos/{owner}/{identifier}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Repository')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReposApi#repos_partial_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific repository.
    # Get a specific repository.
    # @param owner 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Repository]
    def repos_read(owner, identifier, opts = {})
      data, _status_code, _headers = repos_read_with_http_info(owner, identifier, opts)
      return data
    end

    # Get a specific repository.
    # Get a specific repository.
    # @param owner 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Repository, Fixnum, Hash)>] Repository data, response status code and response headers
    def repos_read_with_http_info(owner, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ReposApi.repos_read ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling ReposApi.repos_read"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ReposApi.repos_read"
      end
      # resource path
      local_var_path = "/repos/{owner}/{identifier}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Repository')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReposApi#repos_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
