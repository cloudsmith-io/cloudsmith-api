=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'uri'

module CloudsmithApi
  class PackagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Copy a package to another repository.
    # Copy a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageCopyRequest] :data 
    # @return [PackageCopy]
    def packages_copy(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_copy_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Copy a package to another repository.
    # Copy a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageCopyRequest] :data 
    # @return [Array<(PackageCopy, Fixnum, Hash)>] PackageCopy data, response status code and response headers
    def packages_copy_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_copy ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_copy"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_copy"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_copy"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/copy/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageCopy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a specific package in a repository.
    # Delete a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete(owner, repo, identifier, opts = {})
      packages_delete_with_http_info(owner, repo, identifier, opts)
      nil
    end

    # Delete a specific package in a repository.
    # Delete a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_delete_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_delete ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_delete"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_delete"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_delete"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the list of dependencies for a package. Transitive dependencies are included where supported.
    # Get the list of dependencies for a package. Transitive dependencies are included where supported.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [PackageDependencies]
    def packages_dependencies(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_dependencies_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Get the list of dependencies for a package. Transitive dependencies are included where supported.
    # Get the list of dependencies for a package. Transitive dependencies are included where supported.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageDependencies, Fixnum, Hash)>] PackageDependencies data, response status code and response headers
    def packages_dependencies_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_dependencies ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_dependencies"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_dependencies"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_dependencies"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/dependencies/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageDependencies')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_dependencies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all packages associated with repository.
    # Get a list of all packages associated with repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :query A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages. (default to )
    # @option opts [String] :sort A field for sorting objects in ascending or descending order. (default to -date)
    # @return [Array<Package>]
    def packages_list(owner, repo, opts = {})
      data, _status_code, _headers = packages_list_with_http_info(owner, repo, opts)
      data
    end

    # Get a list of all packages associated with repository.
    # Get a list of all packages associated with repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :query A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages.
    # @option opts [String] :sort A field for sorting objects in ascending or descending order.
    # @return [Array<(Array<Package>, Fixnum, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_list ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_list"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Package>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Move a package to another repository.
    # Move a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageMoveRequest] :data 
    # @return [PackageMove]
    def packages_move(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_move_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Move a package to another repository.
    # Move a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageMoveRequest] :data 
    # @return [Array<(PackageMove, Fixnum, Hash)>] PackageMove data, response status code and response headers
    def packages_move_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_move ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_move"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_move"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_move"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/move/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageMove')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_move\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Quarantine or restore a package.
    # Quarantine or restore a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageQuarantineRequest] :data 
    # @return [PackageQuarantine]
    def packages_quarantine(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_quarantine_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Quarantine or restore a package.
    # Quarantine or restore a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageQuarantineRequest] :data 
    # @return [Array<(PackageQuarantine, Fixnum, Hash)>] PackageQuarantine data, response status code and response headers
    def packages_quarantine_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_quarantine ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_quarantine"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_quarantine"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_quarantine"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/quarantine/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageQuarantine')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_quarantine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a specific package in a repository.
    # Get a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_read(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_read_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Get a specific package in a repository.
    # Get a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_read_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_read ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_read"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_read"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_read"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Schedule a package for resynchronisation.
    # Schedule a package for resynchronisation.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [PackageResync]
    def packages_resync(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_resync_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Schedule a package for resynchronisation.
    # Schedule a package for resynchronisation.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageResync, Fixnum, Hash)>] PackageResync data, response status code and response headers
    def packages_resync_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_resync ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_resync"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_resync"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_resync"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/resync/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageResync')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_resync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Schedule a package for scanning.
    # Schedule a package for scanning.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_scan(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_scan_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Schedule a package for scanning.
    # Schedule a package for scanning.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_scan_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_scan ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_scan"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_scan"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_scan"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/scan/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_scan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the synchronisation status for a package.
    # Get the synchronisation status for a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [PackageStatus]
    def packages_status(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_status_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Get the synchronisation status for a package.
    # Get the synchronisation status for a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageStatus, Fixnum, Hash)>] PackageStatus data, response status code and response headers
    def packages_status_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_status ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_status"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_status"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_status"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/status/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add/Replace/Remove tags for a package.
    # Add/Replace/Remove tags for a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageTagRequest] :data 
    # @return [Package]
    def packages_tag(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_tag_with_http_info(owner, repo, identifier, opts)
      data
    end

    # Add/Replace/Remove tags for a package.
    # Add/Replace/Remove tags for a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackageTagRequest] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_tag_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_tag ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_tag"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_tag"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_tag"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/{identifier}/tag/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Alpine package
    # Create a new Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [AlpinePackageUploadRequest] :data 
    # @return [AlpinePackageUpload]
    def packages_upload_alpine(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_alpine_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Alpine package
    # Create a new Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [AlpinePackageUploadRequest] :data 
    # @return [Array<(AlpinePackageUpload, Fixnum, Hash)>] AlpinePackageUpload data, response status code and response headers
    def packages_upload_alpine_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_alpine ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_alpine"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_alpine"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/alpine/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AlpinePackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_alpine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Cargo package
    # Create a new Cargo package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CargoPackageUploadRequest] :data 
    # @return [CargoPackageUpload]
    def packages_upload_cargo(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_cargo_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Cargo package
    # Create a new Cargo package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CargoPackageUploadRequest] :data 
    # @return [Array<(CargoPackageUpload, Fixnum, Hash)>] CargoPackageUpload data, response status code and response headers
    def packages_upload_cargo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_cargo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_cargo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_cargo"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/cargo/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CargoPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_cargo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new CocoaPods package
    # Create a new CocoaPods package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CocoapodsPackageUploadRequest] :data 
    # @return [CocoapodsPackageUpload]
    def packages_upload_cocoapods(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_cocoapods_with_http_info(owner, repo, opts)
      data
    end

    # Create a new CocoaPods package
    # Create a new CocoaPods package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CocoapodsPackageUploadRequest] :data 
    # @return [Array<(CocoapodsPackageUpload, Fixnum, Hash)>] CocoapodsPackageUpload data, response status code and response headers
    def packages_upload_cocoapods_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_cocoapods ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_cocoapods"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_cocoapods"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/cocoapods/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CocoapodsPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_cocoapods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Composer package
    # Create a new Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ComposerPackageUploadRequest] :data 
    # @return [ComposerPackageUpload]
    def packages_upload_composer(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_composer_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Composer package
    # Create a new Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ComposerPackageUploadRequest] :data 
    # @return [Array<(ComposerPackageUpload, Fixnum, Hash)>] ComposerPackageUpload data, response status code and response headers
    def packages_upload_composer_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_composer ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_composer"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_composer"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/composer/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ComposerPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_composer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Conan package
    # Create a new Conan package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ConanPackageUploadRequest] :data 
    # @return [ConanPackageUpload]
    def packages_upload_conan(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_conan_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Conan package
    # Create a new Conan package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ConanPackageUploadRequest] :data 
    # @return [Array<(ConanPackageUpload, Fixnum, Hash)>] ConanPackageUpload data, response status code and response headers
    def packages_upload_conan_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_conan ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_conan"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_conan"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/conan/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConanPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_conan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Conda package
    # Create a new Conda package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CondaPackageUploadRequest] :data 
    # @return [CondaPackageUpload]
    def packages_upload_conda(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_conda_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Conda package
    # Create a new Conda package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CondaPackageUploadRequest] :data 
    # @return [Array<(CondaPackageUpload, Fixnum, Hash)>] CondaPackageUpload data, response status code and response headers
    def packages_upload_conda_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_conda ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_conda"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_conda"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/conda/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CondaPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_conda\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new CRAN package
    # Create a new CRAN package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CranPackageUploadRequest] :data 
    # @return [CranPackageUpload]
    def packages_upload_cran(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_cran_with_http_info(owner, repo, opts)
      data
    end

    # Create a new CRAN package
    # Create a new CRAN package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CranPackageUploadRequest] :data 
    # @return [Array<(CranPackageUpload, Fixnum, Hash)>] CranPackageUpload data, response status code and response headers
    def packages_upload_cran_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_cran ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_cran"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_cran"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/cran/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CranPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_cran\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Dart package
    # Create a new Dart package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DartPackageUploadRequest] :data 
    # @return [DartPackageUpload]
    def packages_upload_dart(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_dart_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Dart package
    # Create a new Dart package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DartPackageUploadRequest] :data 
    # @return [Array<(DartPackageUpload, Fixnum, Hash)>] DartPackageUpload data, response status code and response headers
    def packages_upload_dart_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_dart ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_dart"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_dart"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/dart/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DartPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_dart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Debian package
    # Create a new Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DebPackageUploadRequest] :data 
    # @return [DebPackageUpload]
    def packages_upload_deb(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_deb_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Debian package
    # Create a new Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DebPackageUploadRequest] :data 
    # @return [Array<(DebPackageUpload, Fixnum, Hash)>] DebPackageUpload data, response status code and response headers
    def packages_upload_deb_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_deb ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_deb"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_deb"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/deb/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DebPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_deb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Docker package
    # Create a new Docker package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DockerPackageUploadRequest] :data 
    # @return [DockerPackageUpload]
    def packages_upload_docker(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_docker_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Docker package
    # Create a new Docker package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DockerPackageUploadRequest] :data 
    # @return [Array<(DockerPackageUpload, Fixnum, Hash)>] DockerPackageUpload data, response status code and response headers
    def packages_upload_docker_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_docker ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_docker"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_docker"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/docker/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DockerPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_docker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Go package
    # Create a new Go package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [GoPackageUploadRequest] :data 
    # @return [GoPackageUpload]
    def packages_upload_go(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_go_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Go package
    # Create a new Go package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [GoPackageUploadRequest] :data 
    # @return [Array<(GoPackageUpload, Fixnum, Hash)>] GoPackageUpload data, response status code and response headers
    def packages_upload_go_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_go ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_go"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_go"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/go/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GoPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_go\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Helm package
    # Create a new Helm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [HelmPackageUploadRequest] :data 
    # @return [HelmPackageUpload]
    def packages_upload_helm(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_helm_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Helm package
    # Create a new Helm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [HelmPackageUploadRequest] :data 
    # @return [Array<(HelmPackageUpload, Fixnum, Hash)>] HelmPackageUpload data, response status code and response headers
    def packages_upload_helm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_helm ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_helm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_helm"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/helm/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HelmPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_helm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new LuaRocks package
    # Create a new LuaRocks package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [LuarocksPackageUploadRequest] :data 
    # @return [LuarocksPackageUpload]
    def packages_upload_luarocks(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_luarocks_with_http_info(owner, repo, opts)
      data
    end

    # Create a new LuaRocks package
    # Create a new LuaRocks package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [LuarocksPackageUploadRequest] :data 
    # @return [Array<(LuarocksPackageUpload, Fixnum, Hash)>] LuarocksPackageUpload data, response status code and response headers
    def packages_upload_luarocks_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_luarocks ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_luarocks"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_luarocks"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/luarocks/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LuarocksPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_luarocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Maven package
    # Create a new Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [MavenPackageUploadRequest] :data 
    # @return [MavenPackageUpload]
    def packages_upload_maven(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_maven_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Maven package
    # Create a new Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [MavenPackageUploadRequest] :data 
    # @return [Array<(MavenPackageUpload, Fixnum, Hash)>] MavenPackageUpload data, response status code and response headers
    def packages_upload_maven_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_maven ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_maven"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_maven"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/maven/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MavenPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_maven\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new npm package
    # Create a new npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NpmPackageUploadRequest] :data 
    # @return [NpmPackageUpload]
    def packages_upload_npm(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_npm_with_http_info(owner, repo, opts)
      data
    end

    # Create a new npm package
    # Create a new npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NpmPackageUploadRequest] :data 
    # @return [Array<(NpmPackageUpload, Fixnum, Hash)>] NpmPackageUpload data, response status code and response headers
    def packages_upload_npm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_npm ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_npm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_npm"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/npm/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NpmPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_npm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new NuGet package
    # Create a new NuGet package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NugetPackageUploadRequest] :data 
    # @return [NugetPackageUpload]
    def packages_upload_nuget(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_nuget_with_http_info(owner, repo, opts)
      data
    end

    # Create a new NuGet package
    # Create a new NuGet package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NugetPackageUploadRequest] :data 
    # @return [Array<(NugetPackageUpload, Fixnum, Hash)>] NugetPackageUpload data, response status code and response headers
    def packages_upload_nuget_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_nuget ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_nuget"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_nuget"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/nuget/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NugetPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_nuget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new P2 package
    # Create a new P2 package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [P2PackageUploadRequest] :data 
    # @return [P2PackageUpload]
    def packages_upload_p2(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_p2_with_http_info(owner, repo, opts)
      data
    end

    # Create a new P2 package
    # Create a new P2 package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [P2PackageUploadRequest] :data 
    # @return [Array<(P2PackageUpload, Fixnum, Hash)>] P2PackageUpload data, response status code and response headers
    def packages_upload_p2_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_p2 ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_p2"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_p2"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/p2/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'P2PackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_p2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Python package
    # Create a new Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PythonPackageUploadRequest] :data 
    # @return [PythonPackageUpload]
    def packages_upload_python(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_python_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Python package
    # Create a new Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PythonPackageUploadRequest] :data 
    # @return [Array<(PythonPackageUpload, Fixnum, Hash)>] PythonPackageUpload data, response status code and response headers
    def packages_upload_python_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_python ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_python"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_python"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/python/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PythonPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_python\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Raw package
    # Create a new Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RawPackageUploadRequest] :data 
    # @return [RawPackageUpload]
    def packages_upload_raw(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_raw_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Raw package
    # Create a new Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RawPackageUploadRequest] :data 
    # @return [Array<(RawPackageUpload, Fixnum, Hash)>] RawPackageUpload data, response status code and response headers
    def packages_upload_raw_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_raw ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_raw"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_raw"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/raw/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RawPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_raw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new RedHat package
    # Create a new RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RpmPackageUploadRequest] :data 
    # @return [RpmPackageUpload]
    def packages_upload_rpm(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_rpm_with_http_info(owner, repo, opts)
      data
    end

    # Create a new RedHat package
    # Create a new RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RpmPackageUploadRequest] :data 
    # @return [Array<(RpmPackageUpload, Fixnum, Hash)>] RpmPackageUpload data, response status code and response headers
    def packages_upload_rpm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_rpm ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_rpm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_rpm"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/rpm/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RpmPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_rpm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Ruby package
    # Create a new Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RubyPackageUploadRequest] :data 
    # @return [RubyPackageUpload]
    def packages_upload_ruby(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_ruby_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Ruby package
    # Create a new Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RubyPackageUploadRequest] :data 
    # @return [Array<(RubyPackageUpload, Fixnum, Hash)>] RubyPackageUpload data, response status code and response headers
    def packages_upload_ruby_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_ruby ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_ruby"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_ruby"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/ruby/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RubyPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_ruby\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Terraform package
    # Create a new Terraform package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [TerraformPackageUploadRequest] :data 
    # @return [TerraformPackageUpload]
    def packages_upload_terraform(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_terraform_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Terraform package
    # Create a new Terraform package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [TerraformPackageUploadRequest] :data 
    # @return [Array<(TerraformPackageUpload, Fixnum, Hash)>] TerraformPackageUpload data, response status code and response headers
    def packages_upload_terraform_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_terraform ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_terraform"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_terraform"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/terraform/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TerraformPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_terraform\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new Vagrant package
    # Create a new Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [VagrantPackageUploadRequest] :data 
    # @return [VagrantPackageUpload]
    def packages_upload_vagrant(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_vagrant_with_http_info(owner, repo, opts)
      data
    end

    # Create a new Vagrant package
    # Create a new Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [VagrantPackageUploadRequest] :data 
    # @return [Array<(VagrantPackageUpload, Fixnum, Hash)>] VagrantPackageUpload data, response status code and response headers
    def packages_upload_vagrant_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_upload_vagrant ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_vagrant"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_vagrant"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/upload/vagrant/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VagrantPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_vagrant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Alpine package
    # Validate parameters for create Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [AlpinePackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_alpine(owner, repo, opts = {})
      packages_validate_upload_alpine_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Alpine package
    # Validate parameters for create Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [AlpinePackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_alpine_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_alpine ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_alpine"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_alpine"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/alpine/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_alpine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Cargo package
    # Validate parameters for create Cargo package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CargoPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_cargo(owner, repo, opts = {})
      packages_validate_upload_cargo_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Cargo package
    # Validate parameters for create Cargo package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CargoPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_cargo_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_cargo ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_cargo"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_cargo"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/cargo/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_cargo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create CocoaPods package
    # Validate parameters for create CocoaPods package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CocoapodsPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_cocoapods(owner, repo, opts = {})
      packages_validate_upload_cocoapods_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create CocoaPods package
    # Validate parameters for create CocoaPods package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CocoapodsPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_cocoapods_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_cocoapods ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_cocoapods"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_cocoapods"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/cocoapods/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_cocoapods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Composer package
    # Validate parameters for create Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ComposerPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_composer(owner, repo, opts = {})
      packages_validate_upload_composer_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Composer package
    # Validate parameters for create Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ComposerPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_composer_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_composer ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_composer"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_composer"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/composer/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_composer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Conan package
    # Validate parameters for create Conan package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ConanPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_conan(owner, repo, opts = {})
      packages_validate_upload_conan_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Conan package
    # Validate parameters for create Conan package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [ConanPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_conan_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_conan ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_conan"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_conan"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/conan/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_conan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Conda package
    # Validate parameters for create Conda package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CondaPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_conda(owner, repo, opts = {})
      packages_validate_upload_conda_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Conda package
    # Validate parameters for create Conda package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CondaPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_conda_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_conda ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_conda"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_conda"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/conda/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_conda\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create CRAN package
    # Validate parameters for create CRAN package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CranPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_cran(owner, repo, opts = {})
      packages_validate_upload_cran_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create CRAN package
    # Validate parameters for create CRAN package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [CranPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_cran_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_cran ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_cran"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_cran"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/cran/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_cran\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Dart package
    # Validate parameters for create Dart package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DartPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_dart(owner, repo, opts = {})
      packages_validate_upload_dart_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Dart package
    # Validate parameters for create Dart package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DartPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_dart_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_dart ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_dart"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_dart"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/dart/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_dart\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Debian package
    # Validate parameters for create Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DebPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_deb(owner, repo, opts = {})
      packages_validate_upload_deb_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Debian package
    # Validate parameters for create Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DebPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_deb_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_deb ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_deb"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_deb"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/deb/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_deb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Docker package
    # Validate parameters for create Docker package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DockerPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_docker(owner, repo, opts = {})
      packages_validate_upload_docker_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Docker package
    # Validate parameters for create Docker package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [DockerPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_docker_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_docker ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_docker"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_docker"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/docker/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_docker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Go package
    # Validate parameters for create Go package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [GoPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_go(owner, repo, opts = {})
      packages_validate_upload_go_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Go package
    # Validate parameters for create Go package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [GoPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_go_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_go ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_go"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_go"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/go/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_go\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Helm package
    # Validate parameters for create Helm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [HelmPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_helm(owner, repo, opts = {})
      packages_validate_upload_helm_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Helm package
    # Validate parameters for create Helm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [HelmPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_helm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_helm ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_helm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_helm"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/helm/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_helm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create LuaRocks package
    # Validate parameters for create LuaRocks package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [LuarocksPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_luarocks(owner, repo, opts = {})
      packages_validate_upload_luarocks_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create LuaRocks package
    # Validate parameters for create LuaRocks package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [LuarocksPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_luarocks_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_luarocks ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_luarocks"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_luarocks"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/luarocks/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_luarocks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Maven package
    # Validate parameters for create Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [MavenPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_maven(owner, repo, opts = {})
      packages_validate_upload_maven_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Maven package
    # Validate parameters for create Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [MavenPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_maven_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_maven ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_maven"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_maven"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/maven/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_maven\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create npm package
    # Validate parameters for create npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NpmPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_npm(owner, repo, opts = {})
      packages_validate_upload_npm_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create npm package
    # Validate parameters for create npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NpmPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_npm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_npm ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_npm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_npm"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/npm/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_npm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create NuGet package
    # Validate parameters for create NuGet package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NugetPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_nuget(owner, repo, opts = {})
      packages_validate_upload_nuget_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create NuGet package
    # Validate parameters for create NuGet package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [NugetPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_nuget_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_nuget ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_nuget"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_nuget"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/nuget/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_nuget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create P2 package
    # Validate parameters for create P2 package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [P2PackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_p2(owner, repo, opts = {})
      packages_validate_upload_p2_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create P2 package
    # Validate parameters for create P2 package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [P2PackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_p2_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_p2 ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_p2"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_p2"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/p2/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_p2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Python package
    # Validate parameters for create Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PythonPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_python(owner, repo, opts = {})
      packages_validate_upload_python_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Python package
    # Validate parameters for create Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PythonPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_python_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_python ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_python"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_python"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/python/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_python\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Raw package
    # Validate parameters for create Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RawPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_raw(owner, repo, opts = {})
      packages_validate_upload_raw_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Raw package
    # Validate parameters for create Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RawPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_raw_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_raw ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_raw"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_raw"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/raw/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_raw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create RedHat package
    # Validate parameters for create RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RpmPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_rpm(owner, repo, opts = {})
      packages_validate_upload_rpm_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create RedHat package
    # Validate parameters for create RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RpmPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_rpm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_rpm ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_rpm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_rpm"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/rpm/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_rpm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Ruby package
    # Validate parameters for create Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RubyPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_ruby(owner, repo, opts = {})
      packages_validate_upload_ruby_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Ruby package
    # Validate parameters for create Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [RubyPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_ruby_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_ruby ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_ruby"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_ruby"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/ruby/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_ruby\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Terraform package
    # Validate parameters for create Terraform package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [TerraformPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_terraform(owner, repo, opts = {})
      packages_validate_upload_terraform_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Terraform package
    # Validate parameters for create Terraform package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [TerraformPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_terraform_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_terraform ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_terraform"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_terraform"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/terraform/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_terraform\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Validate parameters for create Vagrant package
    # Validate parameters for create Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [VagrantPackageUploadRequest] :data 
    # @return [nil]
    def packages_validate_upload_vagrant(owner, repo, opts = {})
      packages_validate_upload_vagrant_with_http_info(owner, repo, opts)
      nil
    end

    # Validate parameters for create Vagrant package
    # Validate parameters for create Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [VagrantPackageUploadRequest] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_vagrant_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PackagesApi.packages_validate_upload_vagrant ...'
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_vagrant"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_vagrant"
      end
      # resource path
      local_var_path = '/packages/{owner}/{repo}/validate-upload/vagrant/'.sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_vagrant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
