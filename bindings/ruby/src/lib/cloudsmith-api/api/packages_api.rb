=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module CloudsmithApi
  class PackagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Copy a package to another repository.
    # Copy a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesCopy] :data 
    # @return [PackageCopy]
    def packages_copy(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_copy_with_http_info(owner, repo, identifier, opts)
      return data
    end

    # Copy a package to another repository.
    # Copy a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesCopy] :data 
    # @return [Array<(PackageCopy, Fixnum, Hash)>] PackageCopy data, response status code and response headers
    def packages_copy_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_copy ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_copy"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_copy"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_copy"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/{identifier}/copy/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageCopy')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific package in a repository.
    # Delete a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def packages_delete(owner, repo, identifier, opts = {})
      packages_delete_with_http_info(owner, repo, identifier, opts)
      return nil
    end

    # Delete a specific package in a repository.
    # Delete a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_delete_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_delete ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_delete"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_delete"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_delete"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/{identifier}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Views for working with repository packages.
    # Views for working with repository packages.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :query A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages.
    # @return [Array<Package>]
    def packages_list(owner, repo, opts = {})
      data, _status_code, _headers = packages_list_with_http_info(owner, repo, opts)
      return data
    end

    # Views for working with repository packages.
    # Views for working with repository packages.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @option opts [String] :query A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages.
    # @return [Array<(Array<Package>, Fixnum, Hash)>] Array<Package> data, response status code and response headers
    def packages_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_list ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_list"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Package>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move a package to another repository.
    # Move a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesMove] :data 
    # @return [PackageMove]
    def packages_move(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_move_with_http_info(owner, repo, identifier, opts)
      return data
    end

    # Move a package to another repository.
    # Move a package to another repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesMove] :data 
    # @return [Array<(PackageMove, Fixnum, Hash)>] PackageMove data, response status code and response headers
    def packages_move_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_move ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_move"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_move"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_move"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/{identifier}/move/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageMove')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_move\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a specific package in a repository.
    # Get a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_read(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_read_with_http_info(owner, repo, identifier, opts)
      return data
    end

    # Get a specific package in a repository.
    # Get a specific package in a repository.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_read_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_read ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_read"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_read"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_read"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/{identifier}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedule a package for resynchronisation.
    # Schedule a package for resynchronisation.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Package]
    def packages_resync(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_resync_with_http_info(owner, repo, identifier, opts)
      return data
    end

    # Schedule a package for resynchronisation.
    # Schedule a package for resynchronisation.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_resync_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_resync ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_resync"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_resync"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_resync"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/{identifier}/resync/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_resync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the synchronisation status for a package.
    # Get the synchronisation status for a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [PackageStatus]
    def packages_status(owner, repo, identifier, opts = {})
      data, _status_code, _headers = packages_status_with_http_info(owner, repo, identifier, opts)
      return data
    end

    # Get the synchronisation status for a package.
    # Get the synchronisation status for a package.
    # @param owner 
    # @param repo 
    # @param identifier 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PackageStatus, Fixnum, Hash)>] PackageStatus data, response status code and response headers
    def packages_status_with_http_info(owner, repo, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_status ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_status"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_status"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling PackagesApi.packages_status"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/{identifier}/status/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PackageStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Alpine package
    # Create a new Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadAlpine] :data 
    # @return [Package]
    def packages_upload_alpine(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_alpine_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Alpine package
    # Create a new Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadAlpine] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_alpine_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_alpine ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_alpine"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_alpine"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/alpine/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_alpine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Composer package
    # Create a new Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadComposer] :data 
    # @return [Package]
    def packages_upload_composer(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_composer_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Composer package
    # Create a new Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadComposer] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_composer_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_composer ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_composer"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_composer"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/composer/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_composer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Debian package
    # Create a new Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadDeb] :data 
    # @return [Package]
    def packages_upload_deb(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_deb_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Debian package
    # Create a new Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadDeb] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_deb_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_deb ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_deb"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_deb"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/deb/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_deb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Maven package
    # Create a new Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadMaven] :data 
    # @return [MavenPackageUpload]
    def packages_upload_maven(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_maven_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Maven package
    # Create a new Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadMaven] :data 
    # @return [Array<(MavenPackageUpload, Fixnum, Hash)>] MavenPackageUpload data, response status code and response headers
    def packages_upload_maven_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_maven ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_maven"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_maven"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/maven/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MavenPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_maven\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Npm package
    # Create a new Npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadNpm] :data 
    # @return [Package]
    def packages_upload_npm(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_npm_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Npm package
    # Create a new Npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadNpm] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_npm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_npm ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_npm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_npm"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/npm/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_npm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Python package
    # Create a new Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadPython] :data 
    # @return [Package]
    def packages_upload_python(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_python_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Python package
    # Create a new Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadPython] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_python_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_python ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_python"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_python"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/python/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_python\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Raw package
    # Create a new Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadRaw] :data 
    # @return [RawPackageUpload]
    def packages_upload_raw(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_raw_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Raw package
    # Create a new Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadRaw] :data 
    # @return [Array<(RawPackageUpload, Fixnum, Hash)>] RawPackageUpload data, response status code and response headers
    def packages_upload_raw_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_raw ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_raw"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_raw"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/raw/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RawPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_raw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new RedHat package
    # Create a new RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadRpm] :data 
    # @return [Package]
    def packages_upload_rpm(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_rpm_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new RedHat package
    # Create a new RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadRpm] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_rpm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_rpm ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_rpm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_rpm"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/rpm/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_rpm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ruby package
    # Create a new Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadRuby] :data 
    # @return [Package]
    def packages_upload_ruby(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_ruby_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Ruby package
    # Create a new Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadRuby] :data 
    # @return [Array<(Package, Fixnum, Hash)>] Package data, response status code and response headers
    def packages_upload_ruby_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_ruby ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_ruby"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_ruby"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/ruby/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Package')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_ruby\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Vagrant package
    # Create a new Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadVagrant] :data 
    # @return [VagrantPackageUpload]
    def packages_upload_vagrant(owner, repo, opts = {})
      data, _status_code, _headers = packages_upload_vagrant_with_http_info(owner, repo, opts)
      return data
    end

    # Create a new Vagrant package
    # Create a new Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesUploadVagrant] :data 
    # @return [Array<(VagrantPackageUpload, Fixnum, Hash)>] VagrantPackageUpload data, response status code and response headers
    def packages_upload_vagrant_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_upload_vagrant ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_upload_vagrant"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_upload_vagrant"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/upload/vagrant/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VagrantPackageUpload')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_upload_vagrant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Alpine package
    # Validate parameters for create Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadAlpine] :data 
    # @return [nil]
    def packages_validate_upload_alpine(owner, repo, opts = {})
      packages_validate_upload_alpine_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Alpine package
    # Validate parameters for create Alpine package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadAlpine] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_alpine_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_alpine ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_alpine"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_alpine"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/alpine/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_alpine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Composer package
    # Validate parameters for create Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadComposer] :data 
    # @return [nil]
    def packages_validate_upload_composer(owner, repo, opts = {})
      packages_validate_upload_composer_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Composer package
    # Validate parameters for create Composer package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadComposer] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_composer_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_composer ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_composer"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_composer"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/composer/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_composer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Debian package
    # Validate parameters for create Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadDeb] :data 
    # @return [nil]
    def packages_validate_upload_deb(owner, repo, opts = {})
      packages_validate_upload_deb_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Debian package
    # Validate parameters for create Debian package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadDeb] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_deb_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_deb ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_deb"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_deb"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/deb/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_deb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Maven package
    # Validate parameters for create Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadMaven] :data 
    # @return [nil]
    def packages_validate_upload_maven(owner, repo, opts = {})
      packages_validate_upload_maven_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Maven package
    # Validate parameters for create Maven package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadMaven] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_maven_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_maven ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_maven"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_maven"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/maven/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_maven\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Npm package
    # Validate parameters for create Npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadNpm] :data 
    # @return [nil]
    def packages_validate_upload_npm(owner, repo, opts = {})
      packages_validate_upload_npm_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Npm package
    # Validate parameters for create Npm package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadNpm] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_npm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_npm ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_npm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_npm"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/npm/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_npm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Python package
    # Validate parameters for create Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadPython] :data 
    # @return [nil]
    def packages_validate_upload_python(owner, repo, opts = {})
      packages_validate_upload_python_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Python package
    # Validate parameters for create Python package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadPython] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_python_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_python ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_python"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_python"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/python/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_python\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Raw package
    # Validate parameters for create Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadRaw] :data 
    # @return [nil]
    def packages_validate_upload_raw(owner, repo, opts = {})
      packages_validate_upload_raw_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Raw package
    # Validate parameters for create Raw package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadRaw] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_raw_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_raw ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_raw"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_raw"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/raw/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_raw\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create RedHat package
    # Validate parameters for create RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadRpm] :data 
    # @return [nil]
    def packages_validate_upload_rpm(owner, repo, opts = {})
      packages_validate_upload_rpm_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create RedHat package
    # Validate parameters for create RedHat package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadRpm] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_rpm_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_rpm ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_rpm"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_rpm"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/rpm/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_rpm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Ruby package
    # Validate parameters for create Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadRuby] :data 
    # @return [nil]
    def packages_validate_upload_ruby(owner, repo, opts = {})
      packages_validate_upload_ruby_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Ruby package
    # Validate parameters for create Ruby package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadRuby] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_ruby_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_ruby ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_ruby"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_ruby"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/ruby/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_ruby\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate parameters for create Vagrant package
    # Validate parameters for create Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadVagrant] :data 
    # @return [nil]
    def packages_validate_upload_vagrant(owner, repo, opts = {})
      packages_validate_upload_vagrant_with_http_info(owner, repo, opts)
      return nil
    end

    # Validate parameters for create Vagrant package
    # Validate parameters for create Vagrant package
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [PackagesValidateuploadVagrant] :data 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def packages_validate_upload_vagrant_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PackagesApi.packages_validate_upload_vagrant ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling PackagesApi.packages_validate_upload_vagrant"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling PackagesApi.packages_validate_upload_vagrant"
      end
      # resource path
      local_var_path = "/packages/{owner}/{repo}/validate-upload/vagrant/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PackagesApi#packages_validate_upload_vagrant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
