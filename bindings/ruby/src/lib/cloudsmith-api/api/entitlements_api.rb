=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module CloudsmithApi
  class EntitlementsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a specific entitlement in a repository.
    # Create a specific entitlement in a repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsCreate] :data 
    # @return [RepositoryToken]
    def entitlements_create(owner, repo, opts = {})
      data, _status_code, _headers = entitlements_create_with_http_info(owner, repo, opts)
      return data
    end

    # Create a specific entitlement in a repository.
    # Create a specific entitlement in a repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsCreate] :data 
    # @return [Array<(RepositoryToken, Fixnum, Hash)>] RepositoryToken data, response status code and response headers
    def entitlements_create_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_create ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_create"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_create"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a specific entitlement in a repository.
    # Delete a specific entitlement in a repository.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def entitlements_delete(owner, repo, slug_perm, opts = {})
      entitlements_delete_with_http_info(owner, repo, slug_perm, opts)
      return nil
    end

    # Delete a specific entitlement in a repository.
    # Delete a specific entitlement in a repository.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def entitlements_delete_with_http_info(owner, repo, slug_perm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_delete ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_delete"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_delete"
      end
      # verify the required parameter 'slug_perm' is set
      if @api_client.config.client_side_validation && slug_perm.nil?
        fail ArgumentError, "Missing the required parameter 'slug_perm' when calling EntitlementsApi.entitlements_delete"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/{slug_perm}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'slug_perm' + '}', slug_perm.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all entitlements in a repository.
    # Get a list of all entitlements in a repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<RepositoryToken>]
    def entitlements_list(owner, repo, opts = {})
      data, _status_code, _headers = entitlements_list_with_http_info(owner, repo, opts)
      return data
    end

    # Get a list of all entitlements in a repository.
    # Get a list of all entitlements in a repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A page number within the paginated result set.
    # @option opts [Integer] :page_size Number of results to return per page.
    # @return [Array<(Array<RepositoryToken>, Fixnum, Hash)>] Array<RepositoryToken> data, response status code and response headers
    def entitlements_list_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_list ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_list"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_list"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<RepositoryToken>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a specific entitlement in a repository.
    # Update a specific entitlement in a repository.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsPartialUpdate] :data 
    # @return [RepositoryToken]
    def entitlements_partial_update(owner, repo, slug_perm, opts = {})
      data, _status_code, _headers = entitlements_partial_update_with_http_info(owner, repo, slug_perm, opts)
      return data
    end

    # Update a specific entitlement in a repository.
    # Update a specific entitlement in a repository.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsPartialUpdate] :data 
    # @return [Array<(RepositoryToken, Fixnum, Hash)>] RepositoryToken data, response status code and response headers
    def entitlements_partial_update_with_http_info(owner, repo, slug_perm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_partial_update ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_partial_update"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_partial_update"
      end
      # verify the required parameter 'slug_perm' is set
      if @api_client.config.client_side_validation && slug_perm.nil?
        fail ArgumentError, "Missing the required parameter 'slug_perm' when calling EntitlementsApi.entitlements_partial_update"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/{slug_perm}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'slug_perm' + '}', slug_perm.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_partial_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Views for working with repository entitlements.
    # Views for working with repository entitlements.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @return [RepositoryToken]
    def entitlements_read(owner, repo, slug_perm, opts = {})
      data, _status_code, _headers = entitlements_read_with_http_info(owner, repo, slug_perm, opts)
      return data
    end

    # Views for working with repository entitlements.
    # Views for working with repository entitlements.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryToken, Fixnum, Hash)>] RepositoryToken data, response status code and response headers
    def entitlements_read_with_http_info(owner, repo, slug_perm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_read ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_read"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_read"
      end
      # verify the required parameter 'slug_perm' is set
      if @api_client.config.client_side_validation && slug_perm.nil?
        fail ArgumentError, "Missing the required parameter 'slug_perm' when calling EntitlementsApi.entitlements_read"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/{slug_perm}/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'slug_perm' + '}', slug_perm.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refresh an entitlement token in a repository.
    # Refresh an entitlement token in a repository.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsRefresh] :data 
    # @return [RepositoryTokenRefresh]
    def entitlements_refresh(owner, repo, slug_perm, opts = {})
      data, _status_code, _headers = entitlements_refresh_with_http_info(owner, repo, slug_perm, opts)
      return data
    end

    # Refresh an entitlement token in a repository.
    # Refresh an entitlement token in a repository.
    # @param owner 
    # @param repo 
    # @param slug_perm 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsRefresh] :data 
    # @return [Array<(RepositoryTokenRefresh, Fixnum, Hash)>] RepositoryTokenRefresh data, response status code and response headers
    def entitlements_refresh_with_http_info(owner, repo, slug_perm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_refresh ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_refresh"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_refresh"
      end
      # verify the required parameter 'slug_perm' is set
      if @api_client.config.client_side_validation && slug_perm.nil?
        fail ArgumentError, "Missing the required parameter 'slug_perm' when calling EntitlementsApi.entitlements_refresh"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/{slug_perm}/refresh/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s).sub('{' + 'slug_perm' + '}', slug_perm.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryTokenRefresh')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_refresh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Synchronise tokens from a source repository.
    # Synchronise tokens from a source repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsSync] :data 
    # @return [RepositoryTokenSync]
    def entitlements_sync(owner, repo, opts = {})
      data, _status_code, _headers = entitlements_sync_with_http_info(owner, repo, opts)
      return data
    end

    # Synchronise tokens from a source repository.
    # Synchronise tokens from a source repository.
    # @param owner 
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [EntitlementsSync] :data 
    # @return [Array<(RepositoryTokenSync, Fixnum, Hash)>] RepositoryTokenSync data, response status code and response headers
    def entitlements_sync_with_http_info(owner, repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EntitlementsApi.entitlements_sync ..."
      end
      # verify the required parameter 'owner' is set
      if @api_client.config.client_side_validation && owner.nil?
        fail ArgumentError, "Missing the required parameter 'owner' when calling EntitlementsApi.entitlements_sync"
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling EntitlementsApi.entitlements_sync"
      end
      # resource path
      local_var_path = "/entitlements/{owner}/{repo}/sync/".sub('{' + 'owner' + '}', owner.to_s).sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'data'])
      auth_names = ['apikey', 'basic', 'csrf_token']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryTokenSync')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitlementsApi#entitlements_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
