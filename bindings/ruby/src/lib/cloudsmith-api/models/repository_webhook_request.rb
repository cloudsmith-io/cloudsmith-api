=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
class RepositoryWebhookRequest
  attr_accessor :events

  # If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.
  attr_accessor :is_active

  # The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.
  attr_accessor :package_query

  # The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.
  attr_accessor :request_body_format

  # The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.
  attr_accessor :request_body_template_format

  # The value that will be sent for the 'Content Type' header. 
  attr_accessor :request_content_type

  # The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.
  attr_accessor :secret_header

  # The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.
  attr_accessor :secret_value

  # The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).
  attr_accessor :signature_key

  # The destination URL that webhook payloads will be POST'ed to.
  attr_accessor :target_url

  attr_accessor :templates

  # If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
  attr_accessor :verify_ssl

  class EnumAttributeValidator
    attr_reader :datatype
    attr_reader :allowable_values

    def initialize(datatype, allowable_values)
      @allowable_values = allowable_values.map do |value|
        case datatype.to_s
        when /Integer/i
          value.to_i
        when /Float/i
          value.to_f
        else
          value
        end
      end
    end

    def valid?(value)
      !value || allowable_values.include?(value)
    end
  end

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'events' => :'events',
      :'is_active' => :'is_active',
      :'package_query' => :'package_query',
      :'request_body_format' => :'request_body_format',
      :'request_body_template_format' => :'request_body_template_format',
      :'request_content_type' => :'request_content_type',
      :'secret_header' => :'secret_header',
      :'secret_value' => :'secret_value',
      :'signature_key' => :'signature_key',
      :'target_url' => :'target_url',
      :'templates' => :'templates',
      :'verify_ssl' => :'verify_ssl'
    }
  end

  # Attribute type mapping.
  def self.swagger_types
    {
      :'events' => :'Array<String>',
      :'is_active' => :'BOOLEAN',
      :'package_query' => :'String',
      :'request_body_format' => :'Integer',
      :'request_body_template_format' => :'Integer',
      :'request_content_type' => :'String',
      :'secret_header' => :'String',
      :'secret_value' => :'String',
      :'signature_key' => :'String',
      :'target_url' => :'String',
      :'templates' => :'Array<WebhookTemplate>',
      :'verify_ssl' => :'BOOLEAN'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    return unless attributes.is_a?(Hash)

    # convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

    if attributes.has_key?(:'events')
      if (value = attributes[:'events']).is_a?(Array)
        self.events = value
      end
    end

    if attributes.has_key?(:'is_active')
      self.is_active = attributes[:'is_active']
    end

    if attributes.has_key?(:'package_query')
      self.package_query = attributes[:'package_query']
    end

    if attributes.has_key?(:'request_body_format')
      self.request_body_format = attributes[:'request_body_format']
    end

    if attributes.has_key?(:'request_body_template_format')
      self.request_body_template_format = attributes[:'request_body_template_format']
    end

    if attributes.has_key?(:'request_content_type')
      self.request_content_type = attributes[:'request_content_type']
    end

    if attributes.has_key?(:'secret_header')
      self.secret_header = attributes[:'secret_header']
    end

    if attributes.has_key?(:'secret_value')
      self.secret_value = attributes[:'secret_value']
    end

    if attributes.has_key?(:'signature_key')
      self.signature_key = attributes[:'signature_key']
    end

    if attributes.has_key?(:'target_url')
      self.target_url = attributes[:'target_url']
    end

    if attributes.has_key?(:'templates')
      if (value = attributes[:'templates']).is_a?(Array)
        self.templates = value
      end
    end

    if attributes.has_key?(:'verify_ssl')
      self.verify_ssl = attributes[:'verify_ssl']
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if @events.nil?
      invalid_properties.push('invalid value for "events", events cannot be nil.')
    end

    if @target_url.nil?
      invalid_properties.push('invalid value for "target_url", target_url cannot be nil.')
    end

    if @templates.nil?
      invalid_properties.push('invalid value for "templates", templates cannot be nil.')
    end

    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if @events.nil?
    return false if @target_url.nil?
    return false if @templates.nil?
    true
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        events == o.events &&
        is_active == o.is_active &&
        package_query == o.package_query &&
        request_body_format == o.request_body_format &&
        request_body_template_format == o.request_body_template_format &&
        request_content_type == o.request_content_type &&
        secret_header == o.secret_header &&
        secret_value == o.secret_value &&
        signature_key == o.signature_key &&
        target_url == o.target_url &&
        templates == o.templates &&
        verify_ssl == o.verify_ssl
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Fixnum] Hash code
  def hash
    [events, is_active, package_query, request_body_format, request_body_template_format, request_content_type, secret_header, secret_value, signature_key, target_url, templates, verify_ssl].hash
  end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

end
end
