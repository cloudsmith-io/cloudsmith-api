=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
  class OrganizationMembershipResponse
    attr_accessor :email

    attr_accessor :has_two_factor

    attr_accessor :joined_at

    attr_accessor :last_login_at

    attr_accessor :last_login_method

    attr_accessor :role

    attr_accessor :user

    attr_accessor :user_id

    attr_accessor :user_name

    attr_accessor :user_url

    attr_accessor :visibility

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'email' => :'email',
        :'has_two_factor' => :'has_two_factor',
        :'joined_at' => :'joined_at',
        :'last_login_at' => :'last_login_at',
        :'last_login_method' => :'last_login_method',
        :'role' => :'role',
        :'user' => :'user',
        :'user_id' => :'user_id',
        :'user_name' => :'user_name',
        :'user_url' => :'user_url',
        :'visibility' => :'visibility'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'email' => :'String',
        :'has_two_factor' => :'BOOLEAN',
        :'joined_at' => :'DateTime',
        :'last_login_at' => :'DateTime',
        :'last_login_method' => :'String',
        :'role' => :'String',
        :'user' => :'String',
        :'user_id' => :'String',
        :'user_name' => :'String',
        :'user_url' => :'String',
        :'visibility' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'has_two_factor')
        self.has_two_factor = attributes[:'has_two_factor']
      end

      if attributes.has_key?(:'joined_at')
        self.joined_at = attributes[:'joined_at']
      end

      if attributes.has_key?(:'last_login_at')
        self.last_login_at = attributes[:'last_login_at']
      end

      if attributes.has_key?(:'last_login_method')
        self.last_login_method = attributes[:'last_login_method']
      else
        self.last_login_method = 'Unknown'
      end

      if attributes.has_key?(:'role')
        self.role = attributes[:'role']
      else
        self.role = 'Owner'
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.has_key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.has_key?(:'user_url')
        self.user_url = attributes[:'user_url']
      end

      if attributes.has_key?(:'visibility')
        self.visibility = attributes[:'visibility']
      else
        self.visibility = 'Public'
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@email.nil? && @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if !@user.nil? && @user.to_s.length < 1
        invalid_properties.push('invalid value for "user", the character length must be great than or equal to 1.')
      end

      if !@user_id.nil? && @user_id.to_s.length < 1
        invalid_properties.push('invalid value for "user_id", the character length must be great than or equal to 1.')
      end

      if !@user_name.nil? && @user_name.to_s.length < 1
        invalid_properties.push('invalid value for "user_name", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@email.nil? && @email.to_s.length < 1
      return false if !@user.nil? && @user.to_s.length < 1
      return false if !@user_id.nil? && @user_id.to_s.length < 1
      return false if !@user_name.nil? && @user_name.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] user Value to be assigned
    def user=(user)
      if !user.nil? && user.to_s.length < 1
        fail ArgumentError, 'invalid value for "user", the character length must be great than or equal to 1.'
      end

      @user = user
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if !user_id.nil? && user_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_id", the character length must be great than or equal to 1.'
      end

      @user_id = user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] user_name Value to be assigned
    def user_name=(user_name)
      if !user_name.nil? && user_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "user_name", the character length must be great than or equal to 1.'
      end

      @user_name = user_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          has_two_factor == o.has_two_factor &&
          joined_at == o.joined_at &&
          last_login_at == o.last_login_at &&
          last_login_method == o.last_login_method &&
          role == o.role &&
          user == o.user &&
          user_id == o.user_id &&
          user_name == o.user_name &&
          user_url == o.user_url &&
          visibility == o.visibility
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [email, has_two_factor, joined_at, last_login_at, last_login_method, role, user, user_id, user_name, user_url, visibility].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
