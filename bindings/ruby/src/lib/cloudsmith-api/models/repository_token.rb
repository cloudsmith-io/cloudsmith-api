=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CloudsmithApi

  class RepositoryToken
    # 
    attr_accessor :created_by_url

    # 
    attr_accessor :self_url

    # 
    attr_accessor :name

    # 
    attr_accessor :user_url

    # If selected this is the default token for this repository.
    attr_accessor :default

    # 
    attr_accessor :created_at

    # 
    attr_accessor :refresh_url

    # 
    attr_accessor :updated_at

    # 
    attr_accessor :created_by

    # 
    attr_accessor :token

    # 
    attr_accessor :updated_by_url

    # 
    attr_accessor :user

    # 
    attr_accessor :slug_perm

    # 
    attr_accessor :updated_by


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created_by_url' => :'created_by_url',
        :'self_url' => :'self_url',
        :'name' => :'name',
        :'user_url' => :'user_url',
        :'default' => :'default',
        :'created_at' => :'created_at',
        :'refresh_url' => :'refresh_url',
        :'updated_at' => :'updated_at',
        :'created_by' => :'created_by',
        :'token' => :'token',
        :'updated_by_url' => :'updated_by_url',
        :'user' => :'user',
        :'slug_perm' => :'slug_perm',
        :'updated_by' => :'updated_by'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created_by_url' => :'String',
        :'self_url' => :'String',
        :'name' => :'String',
        :'user_url' => :'String',
        :'default' => :'BOOLEAN',
        :'created_at' => :'String',
        :'refresh_url' => :'String',
        :'updated_at' => :'String',
        :'created_by' => :'String',
        :'token' => :'String',
        :'updated_by_url' => :'String',
        :'user' => :'String',
        :'slug_perm' => :'String',
        :'updated_by' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created_by_url')
        self.created_by_url = attributes[:'created_by_url']
      end

      if attributes.has_key?(:'self_url')
        self.self_url = attributes[:'self_url']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'user_url')
        self.user_url = attributes[:'user_url']
      end

      if attributes.has_key?(:'default')
        self.default = attributes[:'default']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'refresh_url')
        self.refresh_url = attributes[:'refresh_url']
      end

      if attributes.has_key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.has_key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.has_key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.has_key?(:'updated_by_url')
        self.updated_by_url = attributes[:'updated_by_url']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'slug_perm')
        self.slug_perm = attributes[:'slug_perm']
      end

      if attributes.has_key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created_by_url == o.created_by_url &&
          self_url == o.self_url &&
          name == o.name &&
          user_url == o.user_url &&
          default == o.default &&
          created_at == o.created_at &&
          refresh_url == o.refresh_url &&
          updated_at == o.updated_at &&
          created_by == o.created_by &&
          token == o.token &&
          updated_by_url == o.updated_by_url &&
          user == o.user &&
          slug_perm == o.slug_perm &&
          updated_by == o.updated_by
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created_by_url, self_url, name, user_url, default, created_at, refresh_url, updated_at, created_by, token, updated_by_url, user, slug_perm, updated_by].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
