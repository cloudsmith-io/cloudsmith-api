=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
class Vulnerability
  attr_accessor :affected_version

  attr_accessor :description

  attr_accessor :fixed_version

  attr_accessor :package_name

  attr_accessor :references

  attr_accessor :severity

  attr_accessor :severity_source

  attr_accessor :title

  attr_accessor :vulnerability_id

  class EnumAttributeValidator
    attr_reader :datatype
    attr_reader :allowable_values

    def initialize(datatype, allowable_values)
      @allowable_values = allowable_values.map do |value|
        case datatype.to_s
        when /Integer/i
          value.to_i
        when /Float/i
          value.to_f
        else
          value
        end
      end
    end

    def valid?(value)
      !value || allowable_values.include?(value)
    end
  end

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'affected_version' => :'affected_version',
      :'description' => :'description',
      :'fixed_version' => :'fixed_version',
      :'package_name' => :'package_name',
      :'references' => :'references',
      :'severity' => :'severity',
      :'severity_source' => :'severity_source',
      :'title' => :'title',
      :'vulnerability_id' => :'vulnerability_id'
    }
  end

  # Attribute type mapping.
  def self.swagger_types
    {
      :'affected_version' => :'VulnerabilityScanVersion',
      :'description' => :'String',
      :'fixed_version' => :'VulnerabilityScanVersion',
      :'package_name' => :'String',
      :'references' => :'Array<String>',
      :'severity' => :'String',
      :'severity_source' => :'String',
      :'title' => :'String',
      :'vulnerability_id' => :'String'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    return unless attributes.is_a?(Hash)

    # convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

    if attributes.has_key?(:'affected_version')
      self.affected_version = attributes[:'affected_version']
    end

    if attributes.has_key?(:'description')
      self.description = attributes[:'description']
    end

    if attributes.has_key?(:'fixed_version')
      self.fixed_version = attributes[:'fixed_version']
    end

    if attributes.has_key?(:'package_name')
      self.package_name = attributes[:'package_name']
    end

    if attributes.has_key?(:'references')
      if (value = attributes[:'references']).is_a?(Array)
        self.references = value
      end
    end

    if attributes.has_key?(:'severity')
      self.severity = attributes[:'severity']
    else
      self.severity = 'Unknown'
    end

    if attributes.has_key?(:'severity_source')
      self.severity_source = attributes[:'severity_source']
    end

    if attributes.has_key?(:'title')
      self.title = attributes[:'title']
    end

    if attributes.has_key?(:'vulnerability_id')
      self.vulnerability_id = attributes[:'vulnerability_id']
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if @affected_version.nil?
      invalid_properties.push('invalid value for "affected_version", affected_version cannot be nil.')
    end

    if @description.nil?
      invalid_properties.push('invalid value for "description", description cannot be nil.')
    end

    if @fixed_version.nil?
      invalid_properties.push('invalid value for "fixed_version", fixed_version cannot be nil.')
    end

    if @package_name.nil?
      invalid_properties.push('invalid value for "package_name", package_name cannot be nil.')
    end

    if @references.nil?
      invalid_properties.push('invalid value for "references", references cannot be nil.')
    end

    if @severity_source.nil?
      invalid_properties.push('invalid value for "severity_source", severity_source cannot be nil.')
    end

    if @title.nil?
      invalid_properties.push('invalid value for "title", title cannot be nil.')
    end

    if @vulnerability_id.nil?
      invalid_properties.push('invalid value for "vulnerability_id", vulnerability_id cannot be nil.')
    end

    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if @affected_version.nil?
    return false if @description.nil?
    return false if @fixed_version.nil?
    return false if @package_name.nil?
    return false if @references.nil?
    severity_validator = EnumAttributeValidator.new('String', ['Unknown', 'Low', 'Medium', 'High', 'Critical'])
    return false unless severity_validator.valid?(@severity)
    return false if @severity_source.nil?
    return false if @title.nil?
    return false if @vulnerability_id.nil?
    true
  end

  # Custom attribute writer method checking allowed values (enum).
  # @param [Object] severity Object to be assigned
  def severity=(severity)
    validator = EnumAttributeValidator.new('String', ['Unknown', 'Low', 'Medium', 'High', 'Critical'])
    unless validator.valid?(severity)
      fail ArgumentError, 'invalid value for "severity", must be one of #{validator.allowable_values}.'
    end
    @severity = severity
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        affected_version == o.affected_version &&
        description == o.description &&
        fixed_version == o.fixed_version &&
        package_name == o.package_name &&
        references == o.references &&
        severity == o.severity &&
        severity_source == o.severity_source &&
        title == o.title &&
        vulnerability_id == o.vulnerability_id
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Fixnum] Hash code
  def hash
    [affected_version, description, fixed_version, package_name, references, severity, severity_source, title, vulnerability_id].hash
  end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

end
end
