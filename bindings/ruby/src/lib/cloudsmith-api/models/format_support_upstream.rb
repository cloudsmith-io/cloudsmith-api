=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
# The upstream support for the package format
class FormatSupportUpstream
  # The authentication modes supported by the upstream format
  attr_accessor :auth_modes

  # If true the upstream format supports caching
  attr_accessor :caching

  # If true the upstream format supports indexing
  attr_accessor :indexing

  # The behavior of the upstream when indexing
  attr_accessor :indexing_behavior

  # If true the upstream format supports proxying
  attr_accessor :proxying

  # The signature verification supported by the upstream format
  attr_accessor :signature_verification

  class EnumAttributeValidator
    attr_reader :datatype
    attr_reader :allowable_values

    def initialize(datatype, allowable_values)
      @allowable_values = allowable_values.map do |value|
        case datatype.to_s
        when /Integer/i
          value.to_i
        when /Float/i
          value.to_f
        else
          value
        end
      end
    end

    def valid?(value)
      !value || allowable_values.include?(value)
    end
  end

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'auth_modes' => :'auth_modes',
      :'caching' => :'caching',
      :'indexing' => :'indexing',
      :'indexing_behavior' => :'indexing_behavior',
      :'proxying' => :'proxying',
      :'signature_verification' => :'signature_verification'
    }
  end

  # Attribute type mapping.
  def self.swagger_types
    {
      :'auth_modes' => :'Array<String>',
      :'caching' => :'BOOLEAN',
      :'indexing' => :'BOOLEAN',
      :'indexing_behavior' => :'String',
      :'proxying' => :'BOOLEAN',
      :'signature_verification' => :'String'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    return unless attributes.is_a?(Hash)

    # convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

    if attributes.has_key?(:'auth_modes')
      if (value = attributes[:'auth_modes']).is_a?(Array)
        self.auth_modes = value
      end
    end

    if attributes.has_key?(:'caching')
      self.caching = attributes[:'caching']
    end

    if attributes.has_key?(:'indexing')
      self.indexing = attributes[:'indexing']
    end

    if attributes.has_key?(:'indexing_behavior')
      self.indexing_behavior = attributes[:'indexing_behavior']
    else
      self.indexing_behavior = 'Unsupported'
    end

    if attributes.has_key?(:'proxying')
      self.proxying = attributes[:'proxying']
    end

    if attributes.has_key?(:'signature_verification')
      self.signature_verification = attributes[:'signature_verification']
    else
      self.signature_verification = 'Unsupported'
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if @auth_modes.nil?
      invalid_properties.push('invalid value for "auth_modes", auth_modes cannot be nil.')
    end

    if @caching.nil?
      invalid_properties.push('invalid value for "caching", caching cannot be nil.')
    end

    if @indexing.nil?
      invalid_properties.push('invalid value for "indexing", indexing cannot be nil.')
    end

    if @proxying.nil?
      invalid_properties.push('invalid value for "proxying", proxying cannot be nil.')
    end

    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if @auth_modes.nil?
    return false if @caching.nil?
    return false if @indexing.nil?
    indexing_behavior_validator = EnumAttributeValidator.new('String', ['Unsupported', 'Ahead-of-time (static) indexing', 'Just-in-time (dynamic) indexing'])
    return false unless indexing_behavior_validator.valid?(@indexing_behavior)
    return false if @proxying.nil?
    signature_verification_validator = EnumAttributeValidator.new('String', ['Unsupported', 'Repository Metadata', 'Packages', 'Repository Metadata and Packages'])
    return false unless signature_verification_validator.valid?(@signature_verification)
    true
  end

  # Custom attribute writer method checking allowed values (enum).
  # @param [Object] indexing_behavior Object to be assigned
  def indexing_behavior=(indexing_behavior)
    validator = EnumAttributeValidator.new('String', ['Unsupported', 'Ahead-of-time (static) indexing', 'Just-in-time (dynamic) indexing'])
    unless validator.valid?(indexing_behavior)
      fail ArgumentError, 'invalid value for "indexing_behavior", must be one of #{validator.allowable_values}.'
    end
    @indexing_behavior = indexing_behavior
  end

  # Custom attribute writer method checking allowed values (enum).
  # @param [Object] signature_verification Object to be assigned
  def signature_verification=(signature_verification)
    validator = EnumAttributeValidator.new('String', ['Unsupported', 'Repository Metadata', 'Packages', 'Repository Metadata and Packages'])
    unless validator.valid?(signature_verification)
      fail ArgumentError, 'invalid value for "signature_verification", must be one of #{validator.allowable_values}.'
    end
    @signature_verification = signature_verification
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        auth_modes == o.auth_modes &&
        caching == o.caching &&
        indexing == o.indexing &&
        indexing_behavior == o.indexing_behavior &&
        proxying == o.proxying &&
        signature_verification == o.signature_verification
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Fixnum] Hash code
  def hash
    [auth_modes, caching, indexing, indexing_behavior, proxying, signature_verification].hash
  end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

end
end
