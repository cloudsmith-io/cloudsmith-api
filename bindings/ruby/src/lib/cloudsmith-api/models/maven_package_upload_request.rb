=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
class MavenPackageUploadRequest
  # The ID of the artifact.
  attr_accessor :artifact_id

  # Artifact's group ID.
  attr_accessor :group_id

  # Adds bundled Java documentation to the Maven package
  attr_accessor :javadoc_file

  # The primary file for the package.
  attr_accessor :package_file

  # Artifact's Maven packaging type.
  attr_accessor :packaging

  # The POM file is an XML file containing the Maven coordinates.
  attr_accessor :pom_file

  # If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  attr_accessor :republish

  # Adds bundled Java source code to the Maven package.
  attr_accessor :sources_file

  # A comma-separated values list of tags to add to the package.
  attr_accessor :tags

  # Adds bundled Java tests to the Maven package.
  attr_accessor :tests_file

  # The raw version for this package.
  attr_accessor :version

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'artifact_id' => :'artifact_id',
      :'group_id' => :'group_id',
      :'javadoc_file' => :'javadoc_file',
      :'package_file' => :'package_file',
      :'packaging' => :'packaging',
      :'pom_file' => :'pom_file',
      :'republish' => :'republish',
      :'sources_file' => :'sources_file',
      :'tags' => :'tags',
      :'tests_file' => :'tests_file',
      :'version' => :'version'
    }
  end

  # Attribute type mapping.
  def self.swagger_types
    {
      :'artifact_id' => :'String',
      :'group_id' => :'String',
      :'javadoc_file' => :'String',
      :'package_file' => :'String',
      :'packaging' => :'String',
      :'pom_file' => :'String',
      :'republish' => :'BOOLEAN',
      :'sources_file' => :'String',
      :'tags' => :'String',
      :'tests_file' => :'String',
      :'version' => :'String'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    return unless attributes.is_a?(Hash)

    # convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

    if attributes.has_key?(:'artifact_id')
      self.artifact_id = attributes[:'artifact_id']
    end

    if attributes.has_key?(:'group_id')
      self.group_id = attributes[:'group_id']
    end

    if attributes.has_key?(:'javadoc_file')
      self.javadoc_file = attributes[:'javadoc_file']
    end

    if attributes.has_key?(:'package_file')
      self.package_file = attributes[:'package_file']
    end

    if attributes.has_key?(:'packaging')
      self.packaging = attributes[:'packaging']
    end

    if attributes.has_key?(:'pom_file')
      self.pom_file = attributes[:'pom_file']
    end

    if attributes.has_key?(:'republish')
      self.republish = attributes[:'republish']
    end

    if attributes.has_key?(:'sources_file')
      self.sources_file = attributes[:'sources_file']
    end

    if attributes.has_key?(:'tags')
      self.tags = attributes[:'tags']
    end

    if attributes.has_key?(:'tests_file')
      self.tests_file = attributes[:'tests_file']
    end

    if attributes.has_key?(:'version')
      self.version = attributes[:'version']
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if !@artifact_id.nil? && @artifact_id.to_s.length < 1
      invalid_properties.push('invalid value for "artifact_id", the character length must be great than or equal to 1.')
    end


    if !@group_id.nil? && @group_id.to_s.length > 2083
      invalid_properties.push('invalid value for "group_id", the character length must be smaller than or equal to 2083.')
    end


    if !@javadoc_file.nil? && @javadoc_file.to_s.length < 1
      invalid_properties.push('invalid value for "javadoc_file", the character length must be great than or equal to 1.')
    end


    if @package_file.nil?
      invalid_properties.push('invalid value for "package_file", package_file cannot be nil.')
    end

    if @package_file.to_s.length < 1
      invalid_properties.push('invalid value for "package_file", the character length must be great than or equal to 1.')
    end


    if !@packaging.nil? && @packaging.to_s.length > 64
      invalid_properties.push('invalid value for "packaging", the character length must be smaller than or equal to 64.')
    end


    if !@pom_file.nil? && @pom_file.to_s.length < 1
      invalid_properties.push('invalid value for "pom_file", the character length must be great than or equal to 1.')
    end


    if !@sources_file.nil? && @sources_file.to_s.length < 1
      invalid_properties.push('invalid value for "sources_file", the character length must be great than or equal to 1.')
    end


    if !@tags.nil? && @tags.to_s.length > 1024
      invalid_properties.push('invalid value for "tags", the character length must be smaller than or equal to 1024.')
    end

    if !@tags.nil? && @tags.to_s.length < 1
      invalid_properties.push('invalid value for "tags", the character length must be great than or equal to 1.')
    end


    if !@tests_file.nil? && @tests_file.to_s.length < 1
      invalid_properties.push('invalid value for "tests_file", the character length must be great than or equal to 1.')
    end


    if !@version.nil? && @version.to_s.length > 128
      invalid_properties.push('invalid value for "version", the character length must be smaller than or equal to 128.')
    end


    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if !@artifact_id.nil? && @artifact_id.to_s.length < 1
    return false if !@group_id.nil? && @group_id.to_s.length > 2083
    return false if !@javadoc_file.nil? && @javadoc_file.to_s.length < 1
    return false if @package_file.nil?
    return false if @package_file.to_s.length < 1
    return false if !@packaging.nil? && @packaging.to_s.length > 64
    return false if !@pom_file.nil? && @pom_file.to_s.length < 1
    return false if !@sources_file.nil? && @sources_file.to_s.length < 1
    return false if !@tags.nil? && @tags.to_s.length > 1024
    return false if !@tags.nil? && @tags.to_s.length < 1
    return false if !@tests_file.nil? && @tests_file.to_s.length < 1
    return false if !@version.nil? && @version.to_s.length > 128
    true
  end

  # Custom attribute writer method with validation
  # @param [Object] artifact_id Value to be assigned
  def artifact_id=(artifact_id)
    if !artifact_id.nil? && artifact_id.to_s.length < 1
      fail ArgumentError, 'invalid value for "artifact_id", the character length must be great than or equal to 1.'
    end

    @artifact_id = artifact_id
  end

  # Custom attribute writer method with validation
  # @param [Object] group_id Value to be assigned
  def group_id=(group_id)
    if !group_id.nil? && group_id.to_s.length > 2083
      fail ArgumentError, 'invalid value for "group_id", the character length must be smaller than or equal to 2083.'
    end

    @group_id = group_id
  end

  # Custom attribute writer method with validation
  # @param [Object] javadoc_file Value to be assigned
  def javadoc_file=(javadoc_file)
    if !javadoc_file.nil? && javadoc_file.to_s.length < 1
      fail ArgumentError, 'invalid value for "javadoc_file", the character length must be great than or equal to 1.'
    end

    @javadoc_file = javadoc_file
  end

  # Custom attribute writer method with validation
  # @param [Object] package_file Value to be assigned
  def package_file=(package_file)
    if package_file.nil?
      fail ArgumentError, 'package_file cannot be nil'
    end

    if package_file.to_s.length < 1
      fail ArgumentError, 'invalid value for "package_file", the character length must be great than or equal to 1.'
    end

    @package_file = package_file
  end

  # Custom attribute writer method with validation
  # @param [Object] packaging Value to be assigned
  def packaging=(packaging)
    if !packaging.nil? && packaging.to_s.length > 64
      fail ArgumentError, 'invalid value for "packaging", the character length must be smaller than or equal to 64.'
    end

    @packaging = packaging
  end

  # Custom attribute writer method with validation
  # @param [Object] pom_file Value to be assigned
  def pom_file=(pom_file)
    if !pom_file.nil? && pom_file.to_s.length < 1
      fail ArgumentError, 'invalid value for "pom_file", the character length must be great than or equal to 1.'
    end

    @pom_file = pom_file
  end

  # Custom attribute writer method with validation
  # @param [Object] sources_file Value to be assigned
  def sources_file=(sources_file)
    if !sources_file.nil? && sources_file.to_s.length < 1
      fail ArgumentError, 'invalid value for "sources_file", the character length must be great than or equal to 1.'
    end

    @sources_file = sources_file
  end

  # Custom attribute writer method with validation
  # @param [Object] tags Value to be assigned
  def tags=(tags)
    if !tags.nil? && tags.to_s.length > 1024
      fail ArgumentError, 'invalid value for "tags", the character length must be smaller than or equal to 1024.'
    end

    if !tags.nil? && tags.to_s.length < 1
      fail ArgumentError, 'invalid value for "tags", the character length must be great than or equal to 1.'
    end

    @tags = tags
  end

  # Custom attribute writer method with validation
  # @param [Object] tests_file Value to be assigned
  def tests_file=(tests_file)
    if !tests_file.nil? && tests_file.to_s.length < 1
      fail ArgumentError, 'invalid value for "tests_file", the character length must be great than or equal to 1.'
    end

    @tests_file = tests_file
  end

  # Custom attribute writer method with validation
  # @param [Object] version Value to be assigned
  def version=(version)
    if !version.nil? && version.to_s.length > 128
      fail ArgumentError, 'invalid value for "version", the character length must be smaller than or equal to 128.'
    end

    @version = version
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        artifact_id == o.artifact_id &&
        group_id == o.group_id &&
        javadoc_file == o.javadoc_file &&
        package_file == o.package_file &&
        packaging == o.packaging &&
        pom_file == o.pom_file &&
        republish == o.republish &&
        sources_file == o.sources_file &&
        tags == o.tags &&
        tests_file == o.tests_file &&
        version == o.version
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Fixnum] Hash code
  def hash
    [artifact_id, group_id, javadoc_file, package_file, packaging, pom_file, republish, sources_file, tags, tests_file, version].hash
  end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

end
end
