=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CloudsmithApi

  class Format
    # If true the package format is a premium-only feature
    attr_accessor :premium

    # Description of the package format
    attr_accessor :description

    # A set of what the package format supports
    attr_accessor :supports

    # The minimum plan id required for this package format
    attr_accessor :premium_plan_id

    # The minimum plan name required for this package format
    attr_accessor :premium_plan_name

    # A non-exhaustive list of extensions supported
    attr_accessor :extensions

    # The distributions supported by this package format
    attr_accessor :distributions

    # Slug for the package format
    attr_accessor :slug

    # Name for the package format
    attr_accessor :name


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'premium' => :'premium',
        :'description' => :'description',
        :'supports' => :'supports',
        :'premium_plan_id' => :'premium_plan_id',
        :'premium_plan_name' => :'premium_plan_name',
        :'extensions' => :'extensions',
        :'distributions' => :'distributions',
        :'slug' => :'slug',
        :'name' => :'name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'premium' => :'BOOLEAN',
        :'description' => :'String',
        :'supports' => :'Object',
        :'premium_plan_id' => :'String',
        :'premium_plan_name' => :'String',
        :'extensions' => :'Array<String>',
        :'distributions' => :'Array<FormatDistributions>',
        :'slug' => :'String',
        :'name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'premium')
        self.premium = attributes[:'premium']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'supports')
        self.supports = attributes[:'supports']
      end

      if attributes.has_key?(:'premium_plan_id')
        self.premium_plan_id = attributes[:'premium_plan_id']
      end

      if attributes.has_key?(:'premium_plan_name')
        self.premium_plan_name = attributes[:'premium_plan_name']
      end

      if attributes.has_key?(:'extensions')
        if (value = attributes[:'extensions']).is_a?(Array)
          self.extensions = value
        end
      end

      if attributes.has_key?(:'distributions')
        if (value = attributes[:'distributions']).is_a?(Array)
          self.distributions = value
        end
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @premium.nil?
        invalid_properties.push("invalid value for 'premium', premium cannot be nil.")
      end

      if @description.nil?
        invalid_properties.push("invalid value for 'description', description cannot be nil.")
      end

      if @supports.nil?
        invalid_properties.push("invalid value for 'supports', supports cannot be nil.")
      end

      if @extensions.nil?
        invalid_properties.push("invalid value for 'extensions', extensions cannot be nil.")
      end

      if @slug.nil?
        invalid_properties.push("invalid value for 'slug', slug cannot be nil.")
      end

      if @name.nil?
        invalid_properties.push("invalid value for 'name', name cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @premium.nil?
      return false if @description.nil?
      return false if @supports.nil?
      return false if @extensions.nil?
      return false if @slug.nil?
      return false if @name.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          premium == o.premium &&
          description == o.description &&
          supports == o.supports &&
          premium_plan_id == o.premium_plan_id &&
          premium_plan_name == o.premium_plan_name &&
          extensions == o.extensions &&
          distributions == o.distributions &&
          slug == o.slug &&
          name == o.name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [premium, description, supports, premium_plan_id, premium_plan_name, extensions, distributions, slug, name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
