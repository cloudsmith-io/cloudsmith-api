=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
  class OrganizationInviteExtendResponse
    # The email of the user to be invited.
    attr_accessor :email

    attr_accessor :expires_at

    attr_accessor :inviter

    attr_accessor :inviter_url

    attr_accessor :org

    # The role to be assigned to the invited user.
    attr_accessor :role

    # The slug_perm of the invite to be extended.
    attr_accessor :slug_perm

    # The slug of the user to be invited.
    attr_accessor :user

    attr_accessor :user_url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'email' => :'email',
        :'expires_at' => :'expires_at',
        :'inviter' => :'inviter',
        :'inviter_url' => :'inviter_url',
        :'org' => :'org',
        :'role' => :'role',
        :'slug_perm' => :'slug_perm',
        :'user' => :'user',
        :'user_url' => :'user_url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'email' => :'String',
        :'expires_at' => :'DateTime',
        :'inviter' => :'String',
        :'inviter_url' => :'String',
        :'org' => :'String',
        :'role' => :'String',
        :'slug_perm' => :'String',
        :'user' => :'String',
        :'user_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'expires_at')
        self.expires_at = attributes[:'expires_at']
      end

      if attributes.has_key?(:'inviter')
        self.inviter = attributes[:'inviter']
      end

      if attributes.has_key?(:'inviter_url')
        self.inviter_url = attributes[:'inviter_url']
      end

      if attributes.has_key?(:'org')
        self.org = attributes[:'org']
      end

      if attributes.has_key?(:'role')
        self.role = attributes[:'role']
      else
        self.role = 'Member'
      end

      if attributes.has_key?(:'slug_perm')
        self.slug_perm = attributes[:'slug_perm']
      end

      if attributes.has_key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.has_key?(:'user_url')
        self.user_url = attributes[:'user_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@email.nil? && @email.to_s.length < 1
        invalid_properties.push('invalid value for "email", the character length must be great than or equal to 1.')
      end

      if !@inviter.nil? && @inviter.to_s.length < 1
        invalid_properties.push('invalid value for "inviter", the character length must be great than or equal to 1.')
      end

      if !@slug_perm.nil? && @slug_perm.to_s.length < 1
        invalid_properties.push('invalid value for "slug_perm", the character length must be great than or equal to 1.')
      end

      if !@slug_perm.nil? && @slug_perm !~ Regexp.new(/^[-a-zA-Z0-9_]+$/)
        invalid_properties.push('invalid value for "slug_perm", must conform to the pattern /^[-a-zA-Z0-9_]+$/.')
      end

      if !@user.nil? && @user.to_s.length < 1
        invalid_properties.push('invalid value for "user", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@email.nil? && @email.to_s.length < 1
      return false if !@inviter.nil? && @inviter.to_s.length < 1
      return false if !@slug_perm.nil? && @slug_perm.to_s.length < 1
      return false if !@slug_perm.nil? && @slug_perm !~ Regexp.new(/^[-a-zA-Z0-9_]+$/)
      return false if !@user.nil? && @user.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length < 1
        fail ArgumentError, 'invalid value for "email", the character length must be great than or equal to 1.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] inviter Value to be assigned
    def inviter=(inviter)
      if !inviter.nil? && inviter.to_s.length < 1
        fail ArgumentError, 'invalid value for "inviter", the character length must be great than or equal to 1.'
      end

      @inviter = inviter
    end

    # Custom attribute writer method with validation
    # @param [Object] slug_perm Value to be assigned
    def slug_perm=(slug_perm)
      if !slug_perm.nil? && slug_perm.to_s.length < 1
        fail ArgumentError, 'invalid value for "slug_perm", the character length must be great than or equal to 1.'
      end

      if !slug_perm.nil? && slug_perm !~ Regexp.new(/^[-a-zA-Z0-9_]+$/)
        fail ArgumentError, 'invalid value for "slug_perm", must conform to the pattern /^[-a-zA-Z0-9_]+$/.'
      end

      @slug_perm = slug_perm
    end

    # Custom attribute writer method with validation
    # @param [Object] user Value to be assigned
    def user=(user)
      if !user.nil? && user.to_s.length < 1
        fail ArgumentError, 'invalid value for "user", the character length must be great than or equal to 1.'
      end

      @user = user
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          email == o.email &&
          expires_at == o.expires_at &&
          inviter == o.inviter &&
          inviter_url == o.inviter_url &&
          org == o.org &&
          role == o.role &&
          slug_perm == o.slug_perm &&
          user == o.user &&
          user_url == o.user_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [email, expires_at, inviter, inviter_url, org, role, slug_perm, user, user_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
