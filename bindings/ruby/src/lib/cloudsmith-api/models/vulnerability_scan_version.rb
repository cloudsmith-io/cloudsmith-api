=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'date'

module CloudsmithApi
class VulnerabilityScanVersion
  attr_accessor :major

  attr_accessor :minor

  attr_accessor :operator

  attr_accessor :patch

  attr_accessor :raw_version

  attr_accessor :version

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'major' => :'major',
      :'minor' => :'minor',
      :'operator' => :'operator',
      :'patch' => :'patch',
      :'raw_version' => :'raw_version',
      :'version' => :'version'
    }
  end

  # Attribute type mapping.
  def self.swagger_types
    {
      :'major' => :'Integer',
      :'minor' => :'Integer',
      :'operator' => :'String',
      :'patch' => :'Integer',
      :'raw_version' => :'String',
      :'version' => :'String'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    return unless attributes.is_a?(Hash)

    # convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

    if attributes.has_key?(:'major')
      self.major = attributes[:'major']
    end

    if attributes.has_key?(:'minor')
      self.minor = attributes[:'minor']
    end

    if attributes.has_key?(:'operator')
      self.operator = attributes[:'operator']
    else
      self.operator = ''
    end

    if attributes.has_key?(:'patch')
      self.patch = attributes[:'patch']
    end

    if attributes.has_key?(:'raw_version')
      self.raw_version = attributes[:'raw_version']
    else
      self.raw_version = ''
    end

    if attributes.has_key?(:'version')
      self.version = attributes[:'version']
    else
      self.version = ''
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if @major.nil?
      invalid_properties.push('invalid value for "major", major cannot be nil.')
    end

    if @minor.nil?
      invalid_properties.push('invalid value for "minor", minor cannot be nil.')
    end

    if !@operator.nil? && @operator.to_s.length > 32
      invalid_properties.push('invalid value for "operator", the character length must be smaller than or equal to 32.')
    end

    if !@operator.nil? && @operator.to_s.length < 1
      invalid_properties.push('invalid value for "operator", the character length must be great than or equal to 1.')
    end


    if @patch.nil?
      invalid_properties.push('invalid value for "patch", patch cannot be nil.')
    end

    if !@raw_version.nil? && @raw_version.to_s.length > 128
      invalid_properties.push('invalid value for "raw_version", the character length must be smaller than or equal to 128.')
    end

    if !@raw_version.nil? && @raw_version.to_s.length < 1
      invalid_properties.push('invalid value for "raw_version", the character length must be great than or equal to 1.')
    end


    if !@version.nil? && @version.to_s.length > 128
      invalid_properties.push('invalid value for "version", the character length must be smaller than or equal to 128.')
    end

    if !@version.nil? && @version.to_s.length < 1
      invalid_properties.push('invalid value for "version", the character length must be great than or equal to 1.')
    end


    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if @major.nil?
    return false if @minor.nil?
    return false if !@operator.nil? && @operator.to_s.length > 32
    return false if !@operator.nil? && @operator.to_s.length < 1
    return false if @patch.nil?
    return false if !@raw_version.nil? && @raw_version.to_s.length > 128
    return false if !@raw_version.nil? && @raw_version.to_s.length < 1
    return false if !@version.nil? && @version.to_s.length > 128
    return false if !@version.nil? && @version.to_s.length < 1
    true
  end

  # Custom attribute writer method with validation
  # @param [Object] operator Value to be assigned
  def operator=(operator)
    if !operator.nil? && operator.to_s.length > 32
      fail ArgumentError, 'invalid value for "operator", the character length must be smaller than or equal to 32.'
    end

    if !operator.nil? && operator.to_s.length < 1
      fail ArgumentError, 'invalid value for "operator", the character length must be great than or equal to 1.'
    end

    @operator = operator
  end

  # Custom attribute writer method with validation
  # @param [Object] raw_version Value to be assigned
  def raw_version=(raw_version)
    if !raw_version.nil? && raw_version.to_s.length > 128
      fail ArgumentError, 'invalid value for "raw_version", the character length must be smaller than or equal to 128.'
    end

    if !raw_version.nil? && raw_version.to_s.length < 1
      fail ArgumentError, 'invalid value for "raw_version", the character length must be great than or equal to 1.'
    end

    @raw_version = raw_version
  end

  # Custom attribute writer method with validation
  # @param [Object] version Value to be assigned
  def version=(version)
    if !version.nil? && version.to_s.length > 128
      fail ArgumentError, 'invalid value for "version", the character length must be smaller than or equal to 128.'
    end

    if !version.nil? && version.to_s.length < 1
      fail ArgumentError, 'invalid value for "version", the character length must be great than or equal to 1.'
    end

    @version = version
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        major == o.major &&
        minor == o.minor &&
        operator == o.operator &&
        patch == o.patch &&
        raw_version == o.raw_version &&
        version == o.version
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Fixnum] Hash code
  def hash
    [major, minor, operator, patch, raw_version, version].hash
  end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

end
end
