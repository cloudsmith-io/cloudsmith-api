=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.43

=end

require 'date'

module CloudsmithApi
class RepositoryRetentionRules
  # The maximum X number of packages to retain.
  attr_accessor :retention_count_limit

  # The X number of days of packages to retain.
  attr_accessor :retention_days_limit

  # If checked, the retention lifecycle rules will be activated for the repository. Any packages that don't match will be deleted automatically, and the rest are retained.
  attr_accessor :retention_enabled

  # If checked, retention will apply to packages by package formats rather than across all package formats.For example, when retaining by a limit of 1 and you upload PythonPkg 1.0 and RubyPkg 1.0, no packages are deleted because they are different formats.
  attr_accessor :retention_group_by_format

  # If checked, retention will apply to groups of packages by name rather than all packages.<br>For example, when retaining by a limit of 1 and you upload PkgA 1.0, PkgB 1.0 and PkgB 1.1; only PkgB 1.0 is deleted because there are two (2) PkgBs and one (1) PkgA.
  attr_accessor :retention_group_by_name

  # If checked, retention will apply to packages by package type (e.g. by binary, by source, etc.), rather than across all package types for one or more formats. <br>For example, when retaining by a limit of 1 and you upload DebPackage 1.0 and DebSourcePackage 1.0, no packages are deleted because they are different package types, binary and source respectively.
  attr_accessor :retention_group_by_package_type

  # The maximum X total size (in bytes) of packages to retain.
  attr_accessor :retention_size_limit

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'retention_count_limit' => :'retention_count_limit',
      :'retention_days_limit' => :'retention_days_limit',
      :'retention_enabled' => :'retention_enabled',
      :'retention_group_by_format' => :'retention_group_by_format',
      :'retention_group_by_name' => :'retention_group_by_name',
      :'retention_group_by_package_type' => :'retention_group_by_package_type',
      :'retention_size_limit' => :'retention_size_limit'
    }
  end

  # Attribute type mapping.
  def self.swagger_types
    {
      :'retention_count_limit' => :'Integer',
      :'retention_days_limit' => :'Integer',
      :'retention_enabled' => :'BOOLEAN',
      :'retention_group_by_format' => :'BOOLEAN',
      :'retention_group_by_name' => :'BOOLEAN',
      :'retention_group_by_package_type' => :'BOOLEAN',
      :'retention_size_limit' => :'Integer'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    return unless attributes.is_a?(Hash)

    # convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

    if attributes.has_key?(:'retention_count_limit')
      self.retention_count_limit = attributes[:'retention_count_limit']
    end

    if attributes.has_key?(:'retention_days_limit')
      self.retention_days_limit = attributes[:'retention_days_limit']
    end

    if attributes.has_key?(:'retention_enabled')
      self.retention_enabled = attributes[:'retention_enabled']
    end

    if attributes.has_key?(:'retention_group_by_format')
      self.retention_group_by_format = attributes[:'retention_group_by_format']
    end

    if attributes.has_key?(:'retention_group_by_name')
      self.retention_group_by_name = attributes[:'retention_group_by_name']
    end

    if attributes.has_key?(:'retention_group_by_package_type')
      self.retention_group_by_package_type = attributes[:'retention_group_by_package_type']
    end

    if attributes.has_key?(:'retention_size_limit')
      self.retention_size_limit = attributes[:'retention_size_limit']
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    true
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        retention_count_limit == o.retention_count_limit &&
        retention_days_limit == o.retention_days_limit &&
        retention_enabled == o.retention_enabled &&
        retention_group_by_format == o.retention_group_by_format &&
        retention_group_by_name == o.retention_group_by_name &&
        retention_group_by_package_type == o.retention_group_by_package_type &&
        retention_size_limit == o.retention_size_limit
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Fixnum] Hash code
  def hash
    [retention_count_limit, retention_days_limit, retention_enabled, retention_group_by_format, retention_group_by_name, retention_group_by_package_type, retention_size_limit].hash
  end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

end
end
