=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module CloudsmithApi

  class PackageMove
    # 
    attr_accessor :files

    # The datetime the package stage was updated at.
    attr_accessor :stage_updated_at

    # 
    attr_accessor :is_sync_failed

    # 
    attr_accessor :distro_version

    # 
    attr_accessor :checksum_sha256

    # 
    attr_accessor :repository_url

    # 
    attr_accessor :is_sync_in_progress

    # The calculated size of the package.
    attr_accessor :size

    # 
    attr_accessor :status_str

    # 
    attr_accessor :is_sync_awaiting

    # The repository the package will be moved to.
    attr_accessor :repository

    # 
    attr_accessor :subtype

    # 
    attr_accessor :status_url

    # The datetime the package status was updated at.
    attr_accessor :status_updated_at

    # 
    attr_accessor :namespace

    # The datetime the package sync was finished at.
    attr_accessor :sync_finished_at

    # 
    attr_accessor :filename

    # Synchronisation progress (from 0-100)
    attr_accessor :sync_progress

    # The epoch of the package version (if any).
    attr_accessor :epoch

    # The version of this package.
    attr_accessor :version

    # 
    attr_accessor :is_sync_in_flight

    # 
    attr_accessor :namespace_url

    # 
    attr_accessor :slug_perm

    # 
    attr_accessor :indexed

    # 
    attr_accessor :uploader_url

    # 
    attr_accessor :cdn_url

    # 
    attr_accessor :checksum_sha1

    # 
    attr_accessor :distro

    # The synchronisation status of the package.
    attr_accessor :status

    # 
    attr_accessor :checksum_sha512

    # A textual description of this package.
    attr_accessor :description

    # The name of this package.
    attr_accessor :name

    # 
    attr_accessor :format

    # 
    attr_accessor :is_sync_completed

    # 
    attr_accessor :downloads

    # 
    attr_accessor :version_orig

    # 
    attr_accessor :architectures

    # 
    attr_accessor :uploader

    # 
    attr_accessor :self_html_url

    # The synchronisation (in progress) stage of the package.
    attr_accessor :stage

    # 
    attr_accessor :self_url

    # 
    attr_accessor :slug

    # The date this package was uploaded.
    attr_accessor :uploaded_at

    # The license of this package.
    attr_accessor :license

    # 
    attr_accessor :extension

    # 
    attr_accessor :stage_str

    # The type of package contents.
    attr_accessor :package_type

    # A one-liner synopsis of this package.
    attr_accessor :summary

    # 
    attr_accessor :num_files

    # 
    attr_accessor :checksum_md5

    # The release of the package version (if any).
    attr_accessor :release

    # 
    attr_accessor :type_display

    # 
    attr_accessor :format_url


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'files' => :'files',
        :'stage_updated_at' => :'stage_updated_at',
        :'is_sync_failed' => :'is_sync_failed',
        :'distro_version' => :'distro_version',
        :'checksum_sha256' => :'checksum_sha256',
        :'repository_url' => :'repository_url',
        :'is_sync_in_progress' => :'is_sync_in_progress',
        :'size' => :'size',
        :'status_str' => :'status_str',
        :'is_sync_awaiting' => :'is_sync_awaiting',
        :'repository' => :'repository',
        :'subtype' => :'subtype',
        :'status_url' => :'status_url',
        :'status_updated_at' => :'status_updated_at',
        :'namespace' => :'namespace',
        :'sync_finished_at' => :'sync_finished_at',
        :'filename' => :'filename',
        :'sync_progress' => :'sync_progress',
        :'epoch' => :'epoch',
        :'version' => :'version',
        :'is_sync_in_flight' => :'is_sync_in_flight',
        :'namespace_url' => :'namespace_url',
        :'slug_perm' => :'slug_perm',
        :'indexed' => :'indexed',
        :'uploader_url' => :'uploader_url',
        :'cdn_url' => :'cdn_url',
        :'checksum_sha1' => :'checksum_sha1',
        :'distro' => :'distro',
        :'status' => :'status',
        :'checksum_sha512' => :'checksum_sha512',
        :'description' => :'description',
        :'name' => :'name',
        :'format' => :'format',
        :'is_sync_completed' => :'is_sync_completed',
        :'downloads' => :'downloads',
        :'version_orig' => :'version_orig',
        :'architectures' => :'architectures',
        :'uploader' => :'uploader',
        :'self_html_url' => :'self_html_url',
        :'stage' => :'stage',
        :'self_url' => :'self_url',
        :'slug' => :'slug',
        :'uploaded_at' => :'uploaded_at',
        :'license' => :'license',
        :'extension' => :'extension',
        :'stage_str' => :'stage_str',
        :'package_type' => :'package_type',
        :'summary' => :'summary',
        :'num_files' => :'num_files',
        :'checksum_md5' => :'checksum_md5',
        :'release' => :'release',
        :'type_display' => :'type_display',
        :'format_url' => :'format_url'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'files' => :'Array<RpmPackageUploadFiles>',
        :'stage_updated_at' => :'String',
        :'is_sync_failed' => :'BOOLEAN',
        :'distro_version' => :'Object',
        :'checksum_sha256' => :'String',
        :'repository_url' => :'String',
        :'is_sync_in_progress' => :'BOOLEAN',
        :'size' => :'Integer',
        :'status_str' => :'String',
        :'is_sync_awaiting' => :'BOOLEAN',
        :'repository' => :'String',
        :'subtype' => :'String',
        :'status_url' => :'String',
        :'status_updated_at' => :'String',
        :'namespace' => :'String',
        :'sync_finished_at' => :'String',
        :'filename' => :'String',
        :'sync_progress' => :'Integer',
        :'epoch' => :'Integer',
        :'version' => :'String',
        :'is_sync_in_flight' => :'BOOLEAN',
        :'namespace_url' => :'String',
        :'slug_perm' => :'String',
        :'indexed' => :'BOOLEAN',
        :'uploader_url' => :'String',
        :'cdn_url' => :'String',
        :'checksum_sha1' => :'String',
        :'distro' => :'Object',
        :'status' => :'String',
        :'checksum_sha512' => :'String',
        :'description' => :'String',
        :'name' => :'String',
        :'format' => :'String',
        :'is_sync_completed' => :'BOOLEAN',
        :'downloads' => :'String',
        :'version_orig' => :'String',
        :'architectures' => :'Array<RpmPackageUploadArchitectures>',
        :'uploader' => :'String',
        :'self_html_url' => :'String',
        :'stage' => :'String',
        :'self_url' => :'String',
        :'slug' => :'String',
        :'uploaded_at' => :'String',
        :'license' => :'String',
        :'extension' => :'String',
        :'stage_str' => :'String',
        :'package_type' => :'String',
        :'summary' => :'String',
        :'num_files' => :'Integer',
        :'checksum_md5' => :'String',
        :'release' => :'String',
        :'type_display' => :'String',
        :'format_url' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.has_key?(:'stage_updated_at')
        self.stage_updated_at = attributes[:'stage_updated_at']
      end

      if attributes.has_key?(:'is_sync_failed')
        self.is_sync_failed = attributes[:'is_sync_failed']
      end

      if attributes.has_key?(:'distro_version')
        self.distro_version = attributes[:'distro_version']
      end

      if attributes.has_key?(:'checksum_sha256')
        self.checksum_sha256 = attributes[:'checksum_sha256']
      end

      if attributes.has_key?(:'repository_url')
        self.repository_url = attributes[:'repository_url']
      end

      if attributes.has_key?(:'is_sync_in_progress')
        self.is_sync_in_progress = attributes[:'is_sync_in_progress']
      end

      if attributes.has_key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.has_key?(:'status_str')
        self.status_str = attributes[:'status_str']
      end

      if attributes.has_key?(:'is_sync_awaiting')
        self.is_sync_awaiting = attributes[:'is_sync_awaiting']
      end

      if attributes.has_key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.has_key?(:'subtype')
        self.subtype = attributes[:'subtype']
      end

      if attributes.has_key?(:'status_url')
        self.status_url = attributes[:'status_url']
      end

      if attributes.has_key?(:'status_updated_at')
        self.status_updated_at = attributes[:'status_updated_at']
      end

      if attributes.has_key?(:'namespace')
        self.namespace = attributes[:'namespace']
      end

      if attributes.has_key?(:'sync_finished_at')
        self.sync_finished_at = attributes[:'sync_finished_at']
      end

      if attributes.has_key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.has_key?(:'sync_progress')
        self.sync_progress = attributes[:'sync_progress']
      end

      if attributes.has_key?(:'epoch')
        self.epoch = attributes[:'epoch']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.has_key?(:'is_sync_in_flight')
        self.is_sync_in_flight = attributes[:'is_sync_in_flight']
      end

      if attributes.has_key?(:'namespace_url')
        self.namespace_url = attributes[:'namespace_url']
      end

      if attributes.has_key?(:'slug_perm')
        self.slug_perm = attributes[:'slug_perm']
      end

      if attributes.has_key?(:'indexed')
        self.indexed = attributes[:'indexed']
      end

      if attributes.has_key?(:'uploader_url')
        self.uploader_url = attributes[:'uploader_url']
      end

      if attributes.has_key?(:'cdn_url')
        self.cdn_url = attributes[:'cdn_url']
      end

      if attributes.has_key?(:'checksum_sha1')
        self.checksum_sha1 = attributes[:'checksum_sha1']
      end

      if attributes.has_key?(:'distro')
        self.distro = attributes[:'distro']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'checksum_sha512')
        self.checksum_sha512 = attributes[:'checksum_sha512']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.has_key?(:'is_sync_completed')
        self.is_sync_completed = attributes[:'is_sync_completed']
      end

      if attributes.has_key?(:'downloads')
        self.downloads = attributes[:'downloads']
      end

      if attributes.has_key?(:'version_orig')
        self.version_orig = attributes[:'version_orig']
      end

      if attributes.has_key?(:'architectures')
        if (value = attributes[:'architectures']).is_a?(Array)
          self.architectures = value
        end
      end

      if attributes.has_key?(:'uploader')
        self.uploader = attributes[:'uploader']
      end

      if attributes.has_key?(:'self_html_url')
        self.self_html_url = attributes[:'self_html_url']
      end

      if attributes.has_key?(:'stage')
        self.stage = attributes[:'stage']
      end

      if attributes.has_key?(:'self_url')
        self.self_url = attributes[:'self_url']
      end

      if attributes.has_key?(:'slug')
        self.slug = attributes[:'slug']
      end

      if attributes.has_key?(:'uploaded_at')
        self.uploaded_at = attributes[:'uploaded_at']
      end

      if attributes.has_key?(:'license')
        self.license = attributes[:'license']
      end

      if attributes.has_key?(:'extension')
        self.extension = attributes[:'extension']
      end

      if attributes.has_key?(:'stage_str')
        self.stage_str = attributes[:'stage_str']
      end

      if attributes.has_key?(:'package_type')
        self.package_type = attributes[:'package_type']
      end

      if attributes.has_key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.has_key?(:'num_files')
        self.num_files = attributes[:'num_files']
      end

      if attributes.has_key?(:'checksum_md5')
        self.checksum_md5 = attributes[:'checksum_md5']
      end

      if attributes.has_key?(:'release')
        self.release = attributes[:'release']
      end

      if attributes.has_key?(:'type_display')
        self.type_display = attributes[:'type_display']
      end

      if attributes.has_key?(:'format_url')
        self.format_url = attributes[:'format_url']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          files == o.files &&
          stage_updated_at == o.stage_updated_at &&
          is_sync_failed == o.is_sync_failed &&
          distro_version == o.distro_version &&
          checksum_sha256 == o.checksum_sha256 &&
          repository_url == o.repository_url &&
          is_sync_in_progress == o.is_sync_in_progress &&
          size == o.size &&
          status_str == o.status_str &&
          is_sync_awaiting == o.is_sync_awaiting &&
          repository == o.repository &&
          subtype == o.subtype &&
          status_url == o.status_url &&
          status_updated_at == o.status_updated_at &&
          namespace == o.namespace &&
          sync_finished_at == o.sync_finished_at &&
          filename == o.filename &&
          sync_progress == o.sync_progress &&
          epoch == o.epoch &&
          version == o.version &&
          is_sync_in_flight == o.is_sync_in_flight &&
          namespace_url == o.namespace_url &&
          slug_perm == o.slug_perm &&
          indexed == o.indexed &&
          uploader_url == o.uploader_url &&
          cdn_url == o.cdn_url &&
          checksum_sha1 == o.checksum_sha1 &&
          distro == o.distro &&
          status == o.status &&
          checksum_sha512 == o.checksum_sha512 &&
          description == o.description &&
          name == o.name &&
          format == o.format &&
          is_sync_completed == o.is_sync_completed &&
          downloads == o.downloads &&
          version_orig == o.version_orig &&
          architectures == o.architectures &&
          uploader == o.uploader &&
          self_html_url == o.self_html_url &&
          stage == o.stage &&
          self_url == o.self_url &&
          slug == o.slug &&
          uploaded_at == o.uploaded_at &&
          license == o.license &&
          extension == o.extension &&
          stage_str == o.stage_str &&
          package_type == o.package_type &&
          summary == o.summary &&
          num_files == o.num_files &&
          checksum_md5 == o.checksum_md5 &&
          release == o.release &&
          type_display == o.type_display &&
          format_url == o.format_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [files, stage_updated_at, is_sync_failed, distro_version, checksum_sha256, repository_url, is_sync_in_progress, size, status_str, is_sync_awaiting, repository, subtype, status_url, status_updated_at, namespace, sync_finished_at, filename, sync_progress, epoch, version, is_sync_in_flight, namespace_url, slug_perm, indexed, uploader_url, cdn_url, checksum_sha1, distro, status, checksum_sha512, description, name, format, is_sync_completed, downloads, version_orig, architectures, uploader, self_html_url, stage, self_url, slug, uploaded_at, license, extension, stage_str, package_type, summary, num_files, checksum_md5, release, type_display, format_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudsmithApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
