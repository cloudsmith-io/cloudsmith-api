=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudsmithApi::PackagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PackagesApi' do
  before do
    # run before each test
    @instance = CloudsmithApi::PackagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PackagesApi' do
    it 'should create an instance of PackagesApi' do
      expect(@instance).to be_instance_of(CloudsmithApi::PackagesApi)
    end
  end

  # unit tests for packages_copy
  # Copy a package to another repository.
  # Copy a package to another repository.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [PackageCopyRequest] :data 
  # @return [PackageCopy]
  describe 'packages_copy test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_delete
  # Delete a specific package in a repository.
  # Delete a specific package in a repository.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_dependencies
  # Get the list of dependencies for a package. Transitive dependencies are included where supported.
  # Get the list of dependencies for a package. Transitive dependencies are included where supported.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [PackageDependencies]
  describe 'packages_dependencies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_list
  # Get a list of all packages associated with repository.
  # Get a list of all packages associated with repository.
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @option opts [String] :query A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages.
  # @option opts [String] :sort A field for sorting objects in ascending or descending order.
  # @return [Array<Package>]
  describe 'packages_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_move
  # Move a package to another repository.
  # Move a package to another repository.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [PackageMoveRequest] :data 
  # @return [PackageMove]
  describe 'packages_move test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_quarantine
  # Quarantine or restore a package.
  # Quarantine or restore a package.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [PackageQuarantineRequest] :data 
  # @return [PackageQuarantine]
  describe 'packages_quarantine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_read
  # Get a specific package in a repository.
  # Get a specific package in a repository.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [Package]
  describe 'packages_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_resync
  # Schedule a package for resynchronisation.
  # Schedule a package for resynchronisation.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [PackageResync]
  describe 'packages_resync test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_scan
  # Schedule a package for scanning.
  # Schedule a package for scanning.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [Package]
  describe 'packages_scan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_status
  # Get the synchronization status for a package.
  # Get the synchronization status for a package.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [PackageStatus]
  describe 'packages_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_tag
  # Add/Replace/Remove tags for a package.
  # Add/Replace/Remove tags for a package.
  # @param owner 
  # @param repo 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [PackageTagRequest] :data 
  # @return [Package]
  describe 'packages_tag test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_alpine
  # Create a new Alpine package
  # Create a new Alpine package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [AlpinePackageUploadRequest] :data 
  # @return [AlpinePackageUpload]
  describe 'packages_upload_alpine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_cargo
  # Create a new Cargo package
  # Create a new Cargo package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CargoPackageUploadRequest] :data 
  # @return [CargoPackageUpload]
  describe 'packages_upload_cargo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_cocoapods
  # Create a new CocoaPods package
  # Create a new CocoaPods package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CocoapodsPackageUploadRequest] :data 
  # @return [CocoapodsPackageUpload]
  describe 'packages_upload_cocoapods test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_composer
  # Create a new Composer package
  # Create a new Composer package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [ComposerPackageUploadRequest] :data 
  # @return [ComposerPackageUpload]
  describe 'packages_upload_composer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_conan
  # Create a new Conan package
  # Create a new Conan package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [ConanPackageUploadRequest] :data 
  # @return [ConanPackageUpload]
  describe 'packages_upload_conan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_conda
  # Create a new Conda package
  # Create a new Conda package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CondaPackageUploadRequest] :data 
  # @return [CondaPackageUpload]
  describe 'packages_upload_conda test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_cran
  # Create a new CRAN package
  # Create a new CRAN package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CranPackageUploadRequest] :data 
  # @return [CranPackageUpload]
  describe 'packages_upload_cran test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_dart
  # Create a new Dart package
  # Create a new Dart package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [DartPackageUploadRequest] :data 
  # @return [DartPackageUpload]
  describe 'packages_upload_dart test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_deb
  # Create a new Debian package
  # Create a new Debian package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [DebPackageUploadRequest] :data 
  # @return [DebPackageUpload]
  describe 'packages_upload_deb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_docker
  # Create a new Docker package
  # Create a new Docker package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [DockerPackageUploadRequest] :data 
  # @return [DockerPackageUpload]
  describe 'packages_upload_docker test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_go
  # Create a new Go package
  # Create a new Go package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [GoPackageUploadRequest] :data 
  # @return [GoPackageUpload]
  describe 'packages_upload_go test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_helm
  # Create a new Helm package
  # Create a new Helm package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [HelmPackageUploadRequest] :data 
  # @return [HelmPackageUpload]
  describe 'packages_upload_helm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_hex
  # Create a new Hex package
  # Create a new Hex package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [HexPackageUploadRequest] :data 
  # @return [HexPackageUpload]
  describe 'packages_upload_hex test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_luarocks
  # Create a new LuaRocks package
  # Create a new LuaRocks package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [LuarocksPackageUploadRequest] :data 
  # @return [LuarocksPackageUpload]
  describe 'packages_upload_luarocks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_maven
  # Create a new Maven package
  # Create a new Maven package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [MavenPackageUploadRequest] :data 
  # @return [MavenPackageUpload]
  describe 'packages_upload_maven test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_npm
  # Create a new npm package
  # Create a new npm package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [NpmPackageUploadRequest] :data 
  # @return [NpmPackageUpload]
  describe 'packages_upload_npm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_nuget
  # Create a new NuGet package
  # Create a new NuGet package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [NugetPackageUploadRequest] :data 
  # @return [NugetPackageUpload]
  describe 'packages_upload_nuget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_p2
  # Create a new P2 package
  # Create a new P2 package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [P2PackageUploadRequest] :data 
  # @return [P2PackageUpload]
  describe 'packages_upload_p2 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_python
  # Create a new Python package
  # Create a new Python package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PythonPackageUploadRequest] :data 
  # @return [PythonPackageUpload]
  describe 'packages_upload_python test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_raw
  # Create a new Raw package
  # Create a new Raw package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RawPackageUploadRequest] :data 
  # @return [RawPackageUpload]
  describe 'packages_upload_raw test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_rpm
  # Create a new RedHat package
  # Create a new RedHat package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RpmPackageUploadRequest] :data 
  # @return [RpmPackageUpload]
  describe 'packages_upload_rpm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_ruby
  # Create a new Ruby package
  # Create a new Ruby package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RubyPackageUploadRequest] :data 
  # @return [RubyPackageUpload]
  describe 'packages_upload_ruby test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_swift
  # Create a new Swift package
  # Create a new Swift package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [SwiftPackageUploadRequest] :data 
  # @return [SwiftPackageUpload]
  describe 'packages_upload_swift test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_terraform
  # Create a new Terraform package
  # Create a new Terraform package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [TerraformPackageUploadRequest] :data 
  # @return [TerraformPackageUpload]
  describe 'packages_upload_terraform test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_vagrant
  # Create a new Vagrant package
  # Create a new Vagrant package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [VagrantPackageUploadRequest] :data 
  # @return [VagrantPackageUpload]
  describe 'packages_upload_vagrant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_alpine
  # Validate parameters for create Alpine package
  # Validate parameters for create Alpine package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [AlpinePackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_alpine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_cargo
  # Validate parameters for create Cargo package
  # Validate parameters for create Cargo package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CargoPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_cargo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_cocoapods
  # Validate parameters for create CocoaPods package
  # Validate parameters for create CocoaPods package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CocoapodsPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_cocoapods test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_composer
  # Validate parameters for create Composer package
  # Validate parameters for create Composer package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [ComposerPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_composer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_conan
  # Validate parameters for create Conan package
  # Validate parameters for create Conan package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [ConanPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_conan test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_conda
  # Validate parameters for create Conda package
  # Validate parameters for create Conda package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CondaPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_conda test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_cran
  # Validate parameters for create CRAN package
  # Validate parameters for create CRAN package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [CranPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_cran test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_dart
  # Validate parameters for create Dart package
  # Validate parameters for create Dart package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [DartPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_dart test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_deb
  # Validate parameters for create Debian package
  # Validate parameters for create Debian package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [DebPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_deb test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_docker
  # Validate parameters for create Docker package
  # Validate parameters for create Docker package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [DockerPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_docker test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_go
  # Validate parameters for create Go package
  # Validate parameters for create Go package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [GoPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_go test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_helm
  # Validate parameters for create Helm package
  # Validate parameters for create Helm package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [HelmPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_helm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_hex
  # Validate parameters for create Hex package
  # Validate parameters for create Hex package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [HexPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_hex test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_luarocks
  # Validate parameters for create LuaRocks package
  # Validate parameters for create LuaRocks package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [LuarocksPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_luarocks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_maven
  # Validate parameters for create Maven package
  # Validate parameters for create Maven package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [MavenPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_maven test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_npm
  # Validate parameters for create npm package
  # Validate parameters for create npm package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [NpmPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_npm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_nuget
  # Validate parameters for create NuGet package
  # Validate parameters for create NuGet package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [NugetPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_nuget test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_p2
  # Validate parameters for create P2 package
  # Validate parameters for create P2 package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [P2PackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_p2 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_python
  # Validate parameters for create Python package
  # Validate parameters for create Python package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PythonPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_python test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_raw
  # Validate parameters for create Raw package
  # Validate parameters for create Raw package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RawPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_raw test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_rpm
  # Validate parameters for create RedHat package
  # Validate parameters for create RedHat package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RpmPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_rpm test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_ruby
  # Validate parameters for create Ruby package
  # Validate parameters for create Ruby package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RubyPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_ruby test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_swift
  # Validate parameters for create Swift package
  # Validate parameters for create Swift package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [SwiftPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_swift test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_terraform
  # Validate parameters for create Terraform package
  # Validate parameters for create Terraform package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [TerraformPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_terraform test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_vagrant
  # Validate parameters for create Vagrant package
  # Validate parameters for create Vagrant package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [VagrantPackageUploadRequest] :data 
  # @return [nil]
  describe 'packages_validate_upload_vagrant test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
