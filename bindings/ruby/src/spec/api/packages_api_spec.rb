=begin
#Cloudsmith API

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudsmithApi::PackagesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PackagesApi' do
  before do
    # run before each test
    @instance = CloudsmithApi::PackagesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PackagesApi' do
    it 'should create an instance of PackagesApi' do
      expect(@instance).to be_instance_of(CloudsmithApi::PackagesApi)
    end
  end

  # unit tests for packages_delete
  # Delete a specific package in a repository.
  # Delete a specific package in a repository.
  # @param owner 
  # @param repo 
  # @param slug 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'packages_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_list
  # Views for working with repository packages.
  # Views for working with repository packages.
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<RpmPackageUpload>]
  describe 'packages_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_read
  # Get a specific package in a repository.
  # Get a specific package in a repository.
  # @param owner 
  # @param repo 
  # @param slug 
  # @param [Hash] opts the optional parameters
  # @return [RpmPackageUpload]
  describe 'packages_read test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_status
  # Get the synchronisation status for a package.
  # Get the synchronisation status for a package.
  # @param owner 
  # @param repo 
  # @param slug 
  # @param [Hash] opts the optional parameters
  # @return [PackageStatus]
  describe 'packages_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_deb
  # Create a new Debian package
  # Create a new Debian package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadDeb] :data 
  # @return [RpmPackageUpload]
  describe 'packages_upload_deb test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_maven
  # Create a new Maven package
  # Create a new Maven package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadMaven] :data 
  # @return [MavenPackageUpload]
  describe 'packages_upload_maven test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_python
  # Create a new Python package
  # Create a new Python package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadPython] :data 
  # @return [RpmPackageUpload]
  describe 'packages_upload_python test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_raw
  # Create a new Raw package
  # Create a new Raw package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadRaw] :data 
  # @return [RpmPackageUpload]
  describe 'packages_upload_raw test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_rpm
  # Create a new RedHat package
  # Create a new RedHat package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadRpm] :data 
  # @return [RpmPackageUpload]
  describe 'packages_upload_rpm test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_ruby
  # Create a new Ruby package
  # Create a new Ruby package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadRuby] :data 
  # @return [RpmPackageUpload]
  describe 'packages_upload_ruby test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_upload_vagrant
  # Create a new Vagrant package
  # Create a new Vagrant package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesUploadVagrant] :data 
  # @return [VagrantPackageUpload]
  describe 'packages_upload_vagrant test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_deb
  # Validate parameters for create Debian package
  # Validate parameters for create Debian package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadDeb] :data 
  # @return [nil]
  describe 'packages_validate_upload_deb test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_maven
  # Validate parameters for create Maven package
  # Validate parameters for create Maven package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadMaven] :data 
  # @return [nil]
  describe 'packages_validate_upload_maven test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_python
  # Validate parameters for create Python package
  # Validate parameters for create Python package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadPython] :data 
  # @return [nil]
  describe 'packages_validate_upload_python test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_raw
  # Validate parameters for create Raw package
  # Validate parameters for create Raw package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadRaw] :data 
  # @return [nil]
  describe 'packages_validate_upload_raw test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_rpm
  # Validate parameters for create RedHat package
  # Validate parameters for create RedHat package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadRpm] :data 
  # @return [nil]
  describe 'packages_validate_upload_rpm test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_ruby
  # Validate parameters for create Ruby package
  # Validate parameters for create Ruby package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadRuby] :data 
  # @return [nil]
  describe 'packages_validate_upload_ruby test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for packages_validate_upload_vagrant
  # Validate parameters for create Vagrant package
  # Validate parameters for create Vagrant package
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [PackagesValidateuploadVagrant] :data 
  # @return [nil]
  describe 'packages_validate_upload_vagrant test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
