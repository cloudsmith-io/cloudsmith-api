=begin
#Cloudsmith API (v1)

#The API to the Cloudsmith Service

OpenAPI spec version: v1
Contact: support@cloudsmith.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.26

=end

require 'spec_helper'
require 'json'

# Unit tests for CloudsmithApi::ReposApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ReposApi' do
  before do
    # run before each test
    @instance = CloudsmithApi::ReposApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReposApi' do
    it 'should create an instance of ReposApi' do
      expect(@instance).to be_instance_of(CloudsmithApi::ReposApi)
    end
  end

  # unit tests for api_repos_geoip_status
  # Retrieve the GeoIP status for this repository.
  # Retrieve the GeoIP status for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryGeoIpStatus]
  describe 'api_repos_geoip_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_retention_partial_update
  # Update the retention rules for the repository.
  # Update the retention rules for the repository.
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryRetentionRulesRequestPatch] :data 
  # @return [RepositoryRetentionRules]
  describe 'repo_retention_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repo_retention_read
  # Retrieve the retention rules for the repository.
  # Retrieve the retention rules for the repository.
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryRetentionRules]
  describe 'repo_retention_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_create
  # Create a new repository in a given namespace.
  # Create a new repository in a given namespace.
  # @param owner 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryCreateRequest] :data 
  # @return [RepositoryCreate]
  describe 'repos_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_delete
  # Delete a repository in a given namespace.
  # Delete a repository in a given namespace.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_ecdsa_create
  # Set the active ECDSA key for the Repository.
  # Set the active ECDSA key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryEcdsaKeyCreate] :data 
  # @return [RepositoryEcdsaKey]
  describe 'repos_ecdsa_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_ecdsa_list
  # Retrieve the active ECDSA key for the Repository.
  # Retrieve the active ECDSA key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryEcdsaKey]
  describe 'repos_ecdsa_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_ecdsa_regenerate
  # Regenerate ECDSA Key for the Repository.
  # Regenerate ECDSA Key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryEcdsaKey]
  describe 'repos_ecdsa_regenerate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_geoip_disable
  # Disable GeoIP for this repository.
  # Disable GeoIP for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RespositoryGeoIpEnableDisableRequest] :data 
  # @return [nil]
  describe 'repos_geoip_disable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_geoip_enable
  # Enable GeoIP for this repository.
  # Enable GeoIP for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RespositoryGeoIpEnableDisableRequest] :data 
  # @return [nil]
  describe 'repos_geoip_enable test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_geoip_partial_update
  # Partially update repository geoip rules.
  # Partially update repository geoip rules.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryGeoIpRulesRequestPatch] :data 
  # @return [RepositoryGeoIpRules]
  describe 'repos_geoip_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_geoip_read
  # List all repository geoip rules.
  # List all repository geoip rules.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryGeoIpRules]
  describe 'repos_geoip_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_geoip_test
  # Test a list of IP addresses against the repository&#39;s current GeoIP rules.
  # Test a list of IP addresses against the repository&#39;s current GeoIP rules.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryGeoIpTestAddress] :data 
  # @return [RepositoryGeoIpTestAddressResponse]
  describe 'repos_geoip_test test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_geoip_update
  # Replace repository geoip rules.
  # Replace repository geoip rules.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryGeoIpRulesRequest] :data 
  # @return [RepositoryGeoIpRules]
  describe 'repos_geoip_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_gpg_create
  # Set the active GPG key for the Repository.
  # Set the active GPG key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryGpgKeyCreate] :data 
  # @return [RepositoryGpgKey]
  describe 'repos_gpg_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_gpg_list
  # Retrieve the active GPG key for the Repository.
  # Retrieve the active GPG key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryGpgKey]
  describe 'repos_gpg_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_gpg_regenerate
  # Regenerate GPG Key for the Repository.
  # Regenerate GPG Key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryGpgKey]
  describe 'repos_gpg_regenerate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_namespace_list
  # Get a list of all repositories within a namespace.
  # Get a list of all repositories within a namespace.
  # @param owner 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<Repository>]
  describe 'repos_namespace_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_partial_update
  # Update details about a repository in a given namespace.
  # Update details about a repository in a given namespace.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryRequestPatch] :data 
  # @return [Repository]
  describe 'repos_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_privileges_list
  # List all explicity created privileges for the repository.
  # List all explicity created privileges for the repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [RepositoryPrivilegeInput]
  describe 'repos_privileges_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_privileges_partial_update
  # Modify privileges for the repository.
  # Modify privileges for the repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryPrivilegeInputRequestPatch] :data 
  # @return [nil]
  describe 'repos_privileges_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_privileges_update
  # Replace all existing repository privileges with those specified.
  # Replace all existing repository privileges with those specified.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryPrivilegeInputRequest] :data 
  # @return [nil]
  describe 'repos_privileges_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_read
  # Get a specific repository.
  # Get a specific repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [Repository]
  describe 'repos_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_rsa_create
  # Set the active RSA key for the Repository.
  # Set the active RSA key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryRsaKeyCreate] :data 
  # @return [RepositoryRsaKey]
  describe 'repos_rsa_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_rsa_list
  # Retrieve the active RSA key for the Repository.
  # Retrieve the active RSA key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryRsaKey]
  describe 'repos_rsa_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_rsa_regenerate
  # Regenerate RSA Key for the Repository.
  # Regenerate RSA Key for the Repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryRsaKey]
  describe 'repos_rsa_regenerate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_transfer_region
  # Transfer a repository to a different region.
  # Transfer a repository to a different region.
  # @param owner 
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [RepositoryTransferRegionRequest] :data 
  # @return [nil]
  describe 'repos_transfer_region test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_composer_create
  # Create a Composer upstream config for this repository.
  # Create a Composer upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [ComposerUpstreamRequest] :data 
  # @return [ComposerUpstream]
  describe 'repos_upstream_composer_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_composer_delete
  # Delete a Composer upstream config for this repository.
  # Delete a Composer upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_composer_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_composer_list
  # List Composer upstream configs for this repository.
  # List Composer upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<ComposerUpstream>]
  describe 'repos_upstream_composer_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_composer_partial_update
  # Partially update a Composer upstream config for this repository.
  # Partially update a Composer upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [ComposerUpstreamRequestPatch] :data 
  # @return [ComposerUpstream]
  describe 'repos_upstream_composer_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_composer_read
  # Retrieve a Composer upstream config for this repository.
  # Retrieve a Composer upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [ComposerUpstream]
  describe 'repos_upstream_composer_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_composer_update
  # Update a Composer upstream config for this repository.
  # Update a Composer upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [ComposerUpstreamRequest] :data 
  # @return [ComposerUpstream]
  describe 'repos_upstream_composer_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_cran_create
  # Create a CRAN upstream config for this repository.
  # Create a CRAN upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [CranUpstreamRequest] :data 
  # @return [CranUpstream]
  describe 'repos_upstream_cran_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_cran_delete
  # Delete a CRAN upstream config for this repository.
  # Delete a CRAN upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_cran_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_cran_list
  # List CRAN upstream configs for this repository.
  # List CRAN upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<CranUpstream>]
  describe 'repos_upstream_cran_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_cran_partial_update
  # Partially update a CRAN upstream config for this repository.
  # Partially update a CRAN upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [CranUpstreamRequestPatch] :data 
  # @return [CranUpstream]
  describe 'repos_upstream_cran_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_cran_read
  # Retrieve a CRAN upstream config for this repository.
  # Retrieve a CRAN upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [CranUpstream]
  describe 'repos_upstream_cran_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_cran_update
  # Update a CRAN upstream config for this repository.
  # Update a CRAN upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [CranUpstreamRequest] :data 
  # @return [CranUpstream]
  describe 'repos_upstream_cran_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_dart_create
  # Create a Dart upstream config for this repository.
  # Create a Dart upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [DartUpstreamRequest] :data 
  # @return [DartUpstream]
  describe 'repos_upstream_dart_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_dart_delete
  # Delete a Dart upstream config for this repository.
  # Delete a Dart upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_dart_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_dart_list
  # List Dart upstream configs for this repository.
  # List Dart upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<DartUpstream>]
  describe 'repos_upstream_dart_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_dart_partial_update
  # Partially update a Dart upstream config for this repository.
  # Partially update a Dart upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [DartUpstreamRequestPatch] :data 
  # @return [DartUpstream]
  describe 'repos_upstream_dart_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_dart_read
  # Retrieve a Dart upstream config for this repository.
  # Retrieve a Dart upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [DartUpstream]
  describe 'repos_upstream_dart_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_dart_update
  # Update a Dart upstream config for this repository.
  # Update a Dart upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [DartUpstreamRequest] :data 
  # @return [DartUpstream]
  describe 'repos_upstream_dart_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_deb_create
  # Create a Debian upstream config for this repository.
  # Create a Debian upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [DebUpstreamRequest] :data 
  # @return [DebUpstream]
  describe 'repos_upstream_deb_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_deb_delete
  # Delete a Debian upstream config for this repository.
  # Delete a Debian upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_deb_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_deb_list
  # List Debian upstream configs for this repository.
  # List Debian upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<DebUpstream>]
  describe 'repos_upstream_deb_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_deb_partial_update
  # Partially update a Debian upstream config for this repository.
  # Partially update a Debian upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [DebUpstreamRequestPatch] :data 
  # @return [DebUpstream]
  describe 'repos_upstream_deb_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_deb_read
  # Retrieve a Debian upstream config for this repository.
  # Retrieve a Debian upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [DebUpstream]
  describe 'repos_upstream_deb_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_deb_update
  # Update a Debian upstream config for this repository.
  # Update a Debian upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [DebUpstreamRequest] :data 
  # @return [DebUpstream]
  describe 'repos_upstream_deb_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_docker_create
  # Create a Docker upstream config for this repository.
  # Create a Docker upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [DockerUpstreamRequest] :data 
  # @return [DockerUpstream]
  describe 'repos_upstream_docker_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_docker_delete
  # Delete a Docker upstream config for this repository.
  # Delete a Docker upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_docker_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_docker_list
  # List Docker upstream configs for this repository.
  # List Docker upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<DockerUpstream>]
  describe 'repos_upstream_docker_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_docker_partial_update
  # Partially update a Docker upstream config for this repository.
  # Partially update a Docker upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [DockerUpstreamRequestPatch] :data 
  # @return [DockerUpstream]
  describe 'repos_upstream_docker_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_docker_read
  # Retrieve a Docker upstream config for this repository.
  # Retrieve a Docker upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [DockerUpstream]
  describe 'repos_upstream_docker_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_docker_update
  # Update a Docker upstream config for this repository.
  # Update a Docker upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [DockerUpstreamRequest] :data 
  # @return [DockerUpstream]
  describe 'repos_upstream_docker_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_helm_create
  # Create a Helm upstream config for this repository.
  # Create a Helm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [HelmUpstreamRequest] :data 
  # @return [HelmUpstream]
  describe 'repos_upstream_helm_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_helm_delete
  # Delete a Helm upstream config for this repository.
  # Delete a Helm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_helm_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_helm_list
  # List Helm upstream configs for this repository.
  # List Helm upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<HelmUpstream>]
  describe 'repos_upstream_helm_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_helm_partial_update
  # Partially update a Helm upstream config for this repository.
  # Partially update a Helm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [HelmUpstreamRequestPatch] :data 
  # @return [HelmUpstream]
  describe 'repos_upstream_helm_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_helm_read
  # Retrieve a Helm upstream config for this repository.
  # Retrieve a Helm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [HelmUpstream]
  describe 'repos_upstream_helm_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_helm_update
  # Update a Helm upstream config for this repository.
  # Update a Helm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [HelmUpstreamRequest] :data 
  # @return [HelmUpstream]
  describe 'repos_upstream_helm_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_hex_create
  # Create a Hex upstream config for this repository.
  # Create a Hex upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [HexUpstreamRequest] :data 
  # @return [HexUpstream]
  describe 'repos_upstream_hex_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_hex_delete
  # Delete a Hex upstream config for this repository.
  # Delete a Hex upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_hex_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_hex_list
  # List Hex upstream configs for this repository.
  # List Hex upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<HexUpstream>]
  describe 'repos_upstream_hex_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_hex_partial_update
  # Partially update a Hex upstream config for this repository.
  # Partially update a Hex upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [HexUpstreamRequestPatch] :data 
  # @return [HexUpstream]
  describe 'repos_upstream_hex_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_hex_read
  # Retrieve a Hex upstream config for this repository.
  # Retrieve a Hex upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [HexUpstream]
  describe 'repos_upstream_hex_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_hex_update
  # Update a Hex upstream config for this repository.
  # Update a Hex upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [HexUpstreamRequest] :data 
  # @return [HexUpstream]
  describe 'repos_upstream_hex_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_maven_create
  # Create a Maven upstream config for this repository.
  # Create a Maven upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [MavenUpstreamRequest] :data 
  # @return [MavenUpstream]
  describe 'repos_upstream_maven_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_maven_delete
  # Delete a Maven upstream config for this repository.
  # Delete a Maven upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_maven_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_maven_list
  # List Maven upstream configs for this repository.
  # List Maven upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<MavenUpstream>]
  describe 'repos_upstream_maven_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_maven_partial_update
  # Partially update a Maven upstream config for this repository.
  # Partially update a Maven upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [MavenUpstreamRequestPatch] :data 
  # @return [MavenUpstream]
  describe 'repos_upstream_maven_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_maven_read
  # Retrieve a Maven upstream config for this repository.
  # Retrieve a Maven upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [MavenUpstream]
  describe 'repos_upstream_maven_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_maven_update
  # Update a Maven upstream config for this repository.
  # Update a Maven upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [MavenUpstreamRequest] :data 
  # @return [MavenUpstream]
  describe 'repos_upstream_maven_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_npm_create
  # Create a npm upstream config for this repository.
  # Create a npm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [NpmUpstreamRequest] :data 
  # @return [NpmUpstream]
  describe 'repos_upstream_npm_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_npm_delete
  # Delete a npm upstream config for this repository.
  # Delete a npm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_npm_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_npm_list
  # List npm upstream configs for this repository.
  # List npm upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<NpmUpstream>]
  describe 'repos_upstream_npm_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_npm_partial_update
  # Partially update a npm upstream config for this repository.
  # Partially update a npm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [NpmUpstreamRequestPatch] :data 
  # @return [NpmUpstream]
  describe 'repos_upstream_npm_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_npm_read
  # Retrieve a npm upstream config for this repository.
  # Retrieve a npm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [NpmUpstream]
  describe 'repos_upstream_npm_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_npm_update
  # Update a npm upstream config for this repository.
  # Update a npm upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [NpmUpstreamRequest] :data 
  # @return [NpmUpstream]
  describe 'repos_upstream_npm_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_nuget_create
  # Create a NuGet upstream config for this repository.
  # Create a NuGet upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [NugetUpstreamRequest] :data 
  # @return [NugetUpstream]
  describe 'repos_upstream_nuget_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_nuget_delete
  # Delete a NuGet upstream config for this repository.
  # Delete a NuGet upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_nuget_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_nuget_list
  # List NuGet upstream configs for this repository.
  # List NuGet upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<NugetUpstream>]
  describe 'repos_upstream_nuget_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_nuget_partial_update
  # Partially update a NuGet upstream config for this repository.
  # Partially update a NuGet upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [NugetUpstreamRequestPatch] :data 
  # @return [NugetUpstream]
  describe 'repos_upstream_nuget_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_nuget_read
  # Retrieve a NuGet upstream config for this repository.
  # Retrieve a NuGet upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [NugetUpstream]
  describe 'repos_upstream_nuget_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_nuget_update
  # Update a NuGet upstream config for this repository.
  # Update a NuGet upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [NugetUpstreamRequest] :data 
  # @return [NugetUpstream]
  describe 'repos_upstream_nuget_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_python_create
  # Create a Python upstream config for this repository.
  # Create a Python upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [PythonUpstreamRequest] :data 
  # @return [PythonUpstream]
  describe 'repos_upstream_python_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_python_delete
  # Delete a Python upstream config for this repository.
  # Delete a Python upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_python_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_python_list
  # List Python upstream configs for this repository.
  # List Python upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<PythonUpstream>]
  describe 'repos_upstream_python_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_python_partial_update
  # Partially update a Python upstream config for this repository.
  # Partially update a Python upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [PythonUpstreamRequestPatch] :data 
  # @return [PythonUpstream]
  describe 'repos_upstream_python_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_python_read
  # Retrieve a Python upstream config for this repository.
  # Retrieve a Python upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [PythonUpstream]
  describe 'repos_upstream_python_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_python_update
  # Update a Python upstream config for this repository.
  # Update a Python upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [PythonUpstreamRequest] :data 
  # @return [PythonUpstream]
  describe 'repos_upstream_python_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_rpm_create
  # Create a RedHat upstream config for this repository.
  # Create a RedHat upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RpmUpstreamRequest] :data 
  # @return [RpmUpstream]
  describe 'repos_upstream_rpm_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_rpm_delete
  # Delete a RedHat upstream config for this repository.
  # Delete a RedHat upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_rpm_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_rpm_list
  # List RedHat upstream configs for this repository.
  # List RedHat upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<RpmUpstream>]
  describe 'repos_upstream_rpm_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_rpm_partial_update
  # Partially update a RedHat upstream config for this repository.
  # Partially update a RedHat upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [RpmUpstreamRequestPatch] :data 
  # @return [RpmUpstream]
  describe 'repos_upstream_rpm_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_rpm_read
  # Retrieve a RedHat upstream config for this repository.
  # Retrieve a RedHat upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [RpmUpstream]
  describe 'repos_upstream_rpm_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_rpm_update
  # Update a RedHat upstream config for this repository.
  # Update a RedHat upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [RpmUpstreamRequest] :data 
  # @return [RpmUpstream]
  describe 'repos_upstream_rpm_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_ruby_create
  # Create a Ruby upstream config for this repository.
  # Create a Ruby upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [RubyUpstreamRequest] :data 
  # @return [RubyUpstream]
  describe 'repos_upstream_ruby_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_ruby_delete
  # Delete a Ruby upstream config for this repository.
  # Delete a Ruby upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_ruby_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_ruby_list
  # List Ruby upstream configs for this repository.
  # List Ruby upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<RubyUpstream>]
  describe 'repos_upstream_ruby_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_ruby_partial_update
  # Partially update a Ruby upstream config for this repository.
  # Partially update a Ruby upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [RubyUpstreamRequestPatch] :data 
  # @return [RubyUpstream]
  describe 'repos_upstream_ruby_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_ruby_read
  # Retrieve a Ruby upstream config for this repository.
  # Retrieve a Ruby upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [RubyUpstream]
  describe 'repos_upstream_ruby_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_ruby_update
  # Update a Ruby upstream config for this repository.
  # Update a Ruby upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [RubyUpstreamRequest] :data 
  # @return [RubyUpstream]
  describe 'repos_upstream_ruby_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_swift_create
  # Create a Swift upstream config for this repository.
  # Create a Swift upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [SwiftUpstreamRequest] :data 
  # @return [SwiftUpstream]
  describe 'repos_upstream_swift_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_swift_delete
  # Delete a Swift upstream config for this repository.
  # Delete a Swift upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'repos_upstream_swift_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_swift_list
  # List Swift upstream configs for this repository.
  # List Swift upstream configs for this repository.
  # @param owner 
  # @param identifier 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<SwiftUpstream>]
  describe 'repos_upstream_swift_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_swift_partial_update
  # Partially update a Swift upstream config for this repository.
  # Partially update a Swift upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [SwiftUpstreamRequestPatch] :data 
  # @return [SwiftUpstream]
  describe 'repos_upstream_swift_partial_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_swift_read
  # Retrieve a Swift upstream config for this repository.
  # Retrieve a Swift upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @return [SwiftUpstream]
  describe 'repos_upstream_swift_read test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_upstream_swift_update
  # Update a Swift upstream config for this repository.
  # Update a Swift upstream config for this repository.
  # @param owner 
  # @param identifier 
  # @param slug_perm 
  # @param [Hash] opts the optional parameters
  # @option opts [SwiftUpstreamRequest] :data 
  # @return [SwiftUpstream]
  describe 'repos_upstream_swift_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repos_user_list
  # Get a list of all repositories associated with current user.
  # Get a list of all repositories associated with current user.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page A page number within the paginated result set.
  # @option opts [Integer] :page_size Number of results to return per page.
  # @return [Array<Repository>]
  describe 'repos_user_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
