/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cloudsmith.api.models.WebhookTemplate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * RepositoryWebhookRequestPatch
 */

public class RepositoryWebhookRequestPatch implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets events
   */
  @JsonAdapter(EventsEnum.Adapter.class)
  public enum EventsEnum {
    STAR("*"),
    
    PACKAGE_CREATED("package.created"),
    
    PACKAGE_DELETED("package.deleted"),
    
    PACKAGE_DOWNLOADED("package.downloaded"),
    
    PACKAGE_FAILED("package.failed"),
    
    PACKAGE_SECURITY_SCANNED("package.security_scanned"),
    
    PACKAGE_SYNCED("package.synced"),
    
    PACKAGE_SYNCING("package.syncing"),
    
    PACKAGE_TAGS_UPDATED("package.tags_updated");

    private String value;

    EventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventsEnum fromValue(String text) {
      for (EventsEnum b : EventsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EventsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("events")
  private List<EventsEnum> events = null;

  @SerializedName("is_active")
  private Boolean isActive = null;

  @SerializedName("package_query")
  private String packageQuery = null;

  @SerializedName("request_body_format")
  private Integer requestBodyFormat = null;

  @SerializedName("request_body_template_format")
  private Integer requestBodyTemplateFormat = null;

  @SerializedName("request_content_type")
  private String requestContentType = null;

  @SerializedName("secret_header")
  private String secretHeader = null;

  @SerializedName("secret_value")
  private String secretValue = null;

  @SerializedName("signature_key")
  private String signatureKey = null;

  @SerializedName("target_url")
  private String targetUrl = null;

  @SerializedName("templates")
  private List<WebhookTemplate> templates = null;

  @SerializedName("verify_ssl")
  private Boolean verifySsl = null;

  public RepositoryWebhookRequestPatch events(List<EventsEnum> events) {
    this.events = events;
    return this;
  }

  public RepositoryWebhookRequestPatch addEventsItem(EventsEnum eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @ApiModelProperty(value = "")
  public List<EventsEnum> getEvents() {
    return events;
  }

  public void setEvents(List<EventsEnum> events) {
    this.events = events;
  }

  public RepositoryWebhookRequestPatch isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.
   * @return isActive
  **/
  @ApiModelProperty(value = "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.")
  public Boolean isIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public RepositoryWebhookRequestPatch packageQuery(String packageQuery) {
    this.packageQuery = packageQuery;
    return this;
  }

   /**
   * The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.
   * @return packageQuery
  **/
 @Size(max=1024)  @ApiModelProperty(value = "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.")
  public String getPackageQuery() {
    return packageQuery;
  }

  public void setPackageQuery(String packageQuery) {
    this.packageQuery = packageQuery;
  }

  public RepositoryWebhookRequestPatch requestBodyFormat(Integer requestBodyFormat) {
    this.requestBodyFormat = requestBodyFormat;
    return this;
  }

   /**
   * The format of the payloads for webhook requests.
   * @return requestBodyFormat
  **/
  @ApiModelProperty(value = "The format of the payloads for webhook requests.")
  public Integer getRequestBodyFormat() {
    return requestBodyFormat;
  }

  public void setRequestBodyFormat(Integer requestBodyFormat) {
    this.requestBodyFormat = requestBodyFormat;
  }

  public RepositoryWebhookRequestPatch requestBodyTemplateFormat(Integer requestBodyTemplateFormat) {
    this.requestBodyTemplateFormat = requestBodyTemplateFormat;
    return this;
  }

   /**
   * The format of the payloads for webhook requests.
   * @return requestBodyTemplateFormat
  **/
  @ApiModelProperty(value = "The format of the payloads for webhook requests.")
  public Integer getRequestBodyTemplateFormat() {
    return requestBodyTemplateFormat;
  }

  public void setRequestBodyTemplateFormat(Integer requestBodyTemplateFormat) {
    this.requestBodyTemplateFormat = requestBodyTemplateFormat;
  }

  public RepositoryWebhookRequestPatch requestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
    return this;
  }

   /**
   * The value that will be sent for the &#39;Content Type&#39; header. 
   * @return requestContentType
  **/
 @Size(max=128)  @ApiModelProperty(value = "The value that will be sent for the 'Content Type' header. ")
  public String getRequestContentType() {
    return requestContentType;
  }

  public void setRequestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
  }

  public RepositoryWebhookRequestPatch secretHeader(String secretHeader) {
    this.secretHeader = secretHeader;
    return this;
  }

   /**
   * The header to send the predefined secret in. This must be unique from existing headers or it won&#39;t be sent. You can use this as a form of authentication on the endpoint side.
   * @return secretHeader
  **/
 @Pattern(regexp="^[-\\w]+$") @Size(max=64)  @ApiModelProperty(value = "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.")
  public String getSecretHeader() {
    return secretHeader;
  }

  public void setSecretHeader(String secretHeader) {
    this.secretHeader = secretHeader;
  }

  public RepositoryWebhookRequestPatch secretValue(String secretValue) {
    this.secretValue = secretValue;
    return this;
  }

   /**
   * The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.
   * @return secretValue
  **/
 @Pattern(regexp="^[^\\n\\r]+$") @Size(max=512)  @ApiModelProperty(value = "The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.")
  public String getSecretValue() {
    return secretValue;
  }

  public void setSecretValue(String secretValue) {
    this.secretValue = secretValue;
  }

  public RepositoryWebhookRequestPatch signatureKey(String signatureKey) {
    this.signatureKey = signatureKey;
    return this;
  }

   /**
   * The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn&#39;t modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).
   * @return signatureKey
  **/
 @Size(min=1,max=512)  @ApiModelProperty(value = "The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).")
  public String getSignatureKey() {
    return signatureKey;
  }

  public void setSignatureKey(String signatureKey) {
    this.signatureKey = signatureKey;
  }

  public RepositoryWebhookRequestPatch targetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

   /**
   * The destination URL that webhook payloads will be POST&#39;ed to.
   * @return targetUrl
  **/
 @Size(min=1,max=255)  @ApiModelProperty(value = "The destination URL that webhook payloads will be POST'ed to.")
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }

  public RepositoryWebhookRequestPatch templates(List<WebhookTemplate> templates) {
    this.templates = templates;
    return this;
  }

  public RepositoryWebhookRequestPatch addTemplatesItem(WebhookTemplate templatesItem) {
    if (this.templates == null) {
      this.templates = new ArrayList<>();
    }
    this.templates.add(templatesItem);
    return this;
  }

   /**
   * Get templates
   * @return templates
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<WebhookTemplate> getTemplates() {
    return templates;
  }

  public void setTemplates(List<WebhookTemplate> templates) {
    this.templates = templates;
  }

  public RepositoryWebhookRequestPatch verifySsl(Boolean verifySsl) {
    this.verifySsl = verifySsl;
    return this;
  }

   /**
   * If enabled, SSL certificates is verified when webhooks are sent. It&#39;s recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
   * @return verifySsl
  **/
  @ApiModelProperty(value = "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.")
  public Boolean isVerifySsl() {
    return verifySsl;
  }

  public void setVerifySsl(Boolean verifySsl) {
    this.verifySsl = verifySsl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryWebhookRequestPatch repositoryWebhookRequestPatch = (RepositoryWebhookRequestPatch) o;
    return Objects.equals(this.events, repositoryWebhookRequestPatch.events) &&
        Objects.equals(this.isActive, repositoryWebhookRequestPatch.isActive) &&
        Objects.equals(this.packageQuery, repositoryWebhookRequestPatch.packageQuery) &&
        Objects.equals(this.requestBodyFormat, repositoryWebhookRequestPatch.requestBodyFormat) &&
        Objects.equals(this.requestBodyTemplateFormat, repositoryWebhookRequestPatch.requestBodyTemplateFormat) &&
        Objects.equals(this.requestContentType, repositoryWebhookRequestPatch.requestContentType) &&
        Objects.equals(this.secretHeader, repositoryWebhookRequestPatch.secretHeader) &&
        Objects.equals(this.secretValue, repositoryWebhookRequestPatch.secretValue) &&
        Objects.equals(this.signatureKey, repositoryWebhookRequestPatch.signatureKey) &&
        Objects.equals(this.targetUrl, repositoryWebhookRequestPatch.targetUrl) &&
        Objects.equals(this.templates, repositoryWebhookRequestPatch.templates) &&
        Objects.equals(this.verifySsl, repositoryWebhookRequestPatch.verifySsl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(events, isActive, packageQuery, requestBodyFormat, requestBodyTemplateFormat, requestContentType, secretHeader, secretValue, signatureKey, targetUrl, templates, verifySsl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryWebhookRequestPatch {\n");
    
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    packageQuery: ").append(toIndentedString(packageQuery)).append("\n");
    sb.append("    requestBodyFormat: ").append(toIndentedString(requestBodyFormat)).append("\n");
    sb.append("    requestBodyTemplateFormat: ").append(toIndentedString(requestBodyTemplateFormat)).append("\n");
    sb.append("    requestContentType: ").append(toIndentedString(requestContentType)).append("\n");
    sb.append("    secretHeader: ").append(toIndentedString(secretHeader)).append("\n");
    sb.append("    secretValue: ").append(toIndentedString(secretValue)).append("\n");
    sb.append("    signatureKey: ").append(toIndentedString(signatureKey)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("    verifySsl: ").append(toIndentedString(verifySsl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

