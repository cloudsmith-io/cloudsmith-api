/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * PackagesUploadDeb
 */

public class PackagesUploadDeb implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("changes_file")
  private String changesFile = null;

  @SerializedName("distribution")
  private String distribution = null;

  @SerializedName("package_file")
  private String packageFile = null;

  @SerializedName("republish")
  private Boolean republish = null;

  @SerializedName("security_scan_status")
  private String securityScanStatus = null;

  @SerializedName("sources_file")
  private String sourcesFile = null;

  @SerializedName("tags")
  private String tags = null;

  public PackagesUploadDeb changesFile(String changesFile) {
    this.changesFile = changesFile;
    return this;
  }

   /**
   * The changes archive containing the changes made to the source and debian packaging files
   * @return changesFile
  **/
  @ApiModelProperty(example = "y123456789", value = "The changes archive containing the changes made to the source and debian packaging files")
  public String getChangesFile() {
    return changesFile;
  }

  public void setChangesFile(String changesFile) {
    this.changesFile = changesFile;
  }

  public PackagesUploadDeb distribution(String distribution) {
    this.distribution = distribution;
    return this;
  }

   /**
   * The distribution to store the package for.
   * @return distribution
  **/
  @NotNull
  @ApiModelProperty(example = "ubuntu/xenial", required = true, value = "The distribution to store the package for.")
  public String getDistribution() {
    return distribution;
  }

  public void setDistribution(String distribution) {
    this.distribution = distribution;
  }

  public PackagesUploadDeb packageFile(String packageFile) {
    this.packageFile = packageFile;
    return this;
  }

   /**
   * The primary file for the package.
   * @return packageFile
  **/
  @NotNull
  @ApiModelProperty(example = "y123456789", required = true, value = "The primary file for the package.")
  public String getPackageFile() {
    return packageFile;
  }

  public void setPackageFile(String packageFile) {
    this.packageFile = packageFile;
  }

  public PackagesUploadDeb republish(Boolean republish) {
    this.republish = republish;
    return this;
  }

   /**
   * If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
   * @return republish
  **/
  @ApiModelProperty(value = "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.")
  public Boolean getRepublish() {
    return republish;
  }

  public void setRepublish(Boolean republish) {
    this.republish = republish;
  }

  public PackagesUploadDeb securityScanStatus(String securityScanStatus) {
    this.securityScanStatus = securityScanStatus;
    return this;
  }

   /**
   * None
   * @return securityScanStatus
  **/
  @ApiModelProperty(value = "None")
  public String getSecurityScanStatus() {
    return securityScanStatus;
  }

  public void setSecurityScanStatus(String securityScanStatus) {
    this.securityScanStatus = securityScanStatus;
  }

  public PackagesUploadDeb sourcesFile(String sourcesFile) {
    this.sourcesFile = sourcesFile;
    return this;
  }

   /**
   * The sources archive containing the source code for the binary
   * @return sourcesFile
  **/
  @ApiModelProperty(example = "y123456789", value = "The sources archive containing the source code for the binary")
  public String getSourcesFile() {
    return sourcesFile;
  }

  public void setSourcesFile(String sourcesFile) {
    this.sourcesFile = sourcesFile;
  }

  public PackagesUploadDeb tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * A comma-separated values list of tags to add to the package.
   * @return tags
  **/
  @ApiModelProperty(value = "A comma-separated values list of tags to add to the package.")
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackagesUploadDeb packagesUploadDeb = (PackagesUploadDeb) o;
    return Objects.equals(this.changesFile, packagesUploadDeb.changesFile) &&
        Objects.equals(this.distribution, packagesUploadDeb.distribution) &&
        Objects.equals(this.packageFile, packagesUploadDeb.packageFile) &&
        Objects.equals(this.republish, packagesUploadDeb.republish) &&
        Objects.equals(this.securityScanStatus, packagesUploadDeb.securityScanStatus) &&
        Objects.equals(this.sourcesFile, packagesUploadDeb.sourcesFile) &&
        Objects.equals(this.tags, packagesUploadDeb.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changesFile, distribution, packageFile, republish, securityScanStatus, sourcesFile, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackagesUploadDeb {\n");
    
    sb.append("    changesFile: ").append(toIndentedString(changesFile)).append("\n");
    sb.append("    distribution: ").append(toIndentedString(distribution)).append("\n");
    sb.append("    packageFile: ").append(toIndentedString(packageFile)).append("\n");
    sb.append("    republish: ").append(toIndentedString(republish)).append("\n");
    sb.append("    securityScanStatus: ").append(toIndentedString(securityScanStatus)).append("\n");
    sb.append("    sourcesFile: ").append(toIndentedString(sourcesFile)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

