/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.ApiCallback;
import io.cloudsmith.api.ApiClient;
import io.cloudsmith.api.ApiException;
import io.cloudsmith.api.ApiResponse;
import io.cloudsmith.api.Configuration;
import io.cloudsmith.api.Pair;
import io.cloudsmith.api.ProgressRequestBody;
import io.cloudsmith.api.ProgressResponseBody;
import io.cloudsmith.api.BeanValidationException;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;
import java.util.Set;
import java.lang.reflect.Method;
import java.lang.reflect.Type;

import io.cloudsmith.api.models.ErrorDetail;
import io.cloudsmith.api.models.PackageVersionBadge;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BadgesApi {
    private ApiClient apiClient;

    public BadgesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BadgesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for badgesVersionList
     * @param owner  (required)
     * @param repo  (required)
     * @param packageFormat  (required)
     * @param packageName  (required)
     * @param packageVersion  (required)
     * @param packageIdentifiers  (required)
     * @param badgeToken Badge token to authenticate for private packages (optional, default to )
     * @param cacheSeconds Override the shields.io badge cacheSeconds value. (optional, default to 300)
     * @param color Override the shields.io badge color value. (optional, default to 12577E)
     * @param label Override the shields.io badge label value. (optional, default to cloudsmith)
     * @param labelColor Override the shields.io badge labelColor value. (optional, default to 021F2F)
     * @param logoColor Override the shields.io badge logoColor value. (optional, default to 45B6EE)
     * @param logoWidth Override the shields.io badge logoWidth value. (optional, default to 10)
     * @param render If true, badge will be rendered (optional, default to false)
     * @param shields If true, a shields response will be generated (optional, default to false)
     * @param showLatest If true, for latest version badges a &#39;(latest)&#39; suffix is added (optional, default to false)
     * @param style Override the shields.io badge style value. (optional, default to flat-square)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call badgesVersionListCall(String owner, String repo, String packageFormat, String packageName, String packageVersion, String packageIdentifiers, String badgeToken, String cacheSeconds, String color, String label, String labelColor, String logoColor, String logoWidth, Boolean render, Boolean shields, Boolean showLatest, String style, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "package_format" + "\\}", apiClient.escapeString(packageFormat.toString()))
            .replaceAll("\\{" + "package_name" + "\\}", apiClient.escapeString(packageName.toString()))
            .replaceAll("\\{" + "package_version" + "\\}", apiClient.escapeString(packageVersion.toString()))
            .replaceAll("\\{" + "package_identifiers" + "\\}", apiClient.escapeString(packageIdentifiers.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (badgeToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("badge_token", badgeToken));
        if (cacheSeconds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cacheSeconds", cacheSeconds));
        if (color != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("color", color));
        if (label != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("label", label));
        if (labelColor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("labelColor", labelColor));
        if (logoColor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logoColor", logoColor));
        if (logoWidth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("logoWidth", logoWidth));
        if (render != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("render", render));
        if (shields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("shields", shields));
        if (showLatest != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("show_latest", showLatest));
        if (style != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("style", style));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call badgesVersionListValidateBeforeCall(String owner, String repo, String packageFormat, String packageName, String packageVersion, String packageIdentifiers, String badgeToken, String cacheSeconds, String color, String label, String labelColor, String logoColor, String logoWidth, Boolean render, Boolean shields, Boolean showLatest, String style, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, packageFormat, packageName, packageVersion, packageIdentifiers, badgeToken, cacheSeconds, color, label, labelColor, logoColor, logoWidth, render, shields, showLatest, style };
            Method method = this.getClass().getMethod("badgesVersionListWithHttpInfo", String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, Boolean.class, Boolean.class, Boolean.class, String.class);
            Set<ConstraintViolation<BadgesApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = badgesVersionListCall(owner, repo, packageFormat, packageName, packageVersion, packageIdentifiers, badgeToken, cacheSeconds, color, label, labelColor, logoColor, logoWidth, render, shields, showLatest, style, progressListener, progressRequestListener);
                return call;

            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }

    }

    /**
     * Get latest package version for a package or package group.
     * Get latest package version for a package or package group.
     * @param owner  (required)
     * @param repo  (required)
     * @param packageFormat  (required)
     * @param packageName  (required)
     * @param packageVersion  (required)
     * @param packageIdentifiers  (required)
     * @param badgeToken Badge token to authenticate for private packages (optional, default to )
     * @param cacheSeconds Override the shields.io badge cacheSeconds value. (optional, default to 300)
     * @param color Override the shields.io badge color value. (optional, default to 12577E)
     * @param label Override the shields.io badge label value. (optional, default to cloudsmith)
     * @param labelColor Override the shields.io badge labelColor value. (optional, default to 021F2F)
     * @param logoColor Override the shields.io badge logoColor value. (optional, default to 45B6EE)
     * @param logoWidth Override the shields.io badge logoWidth value. (optional, default to 10)
     * @param render If true, badge will be rendered (optional, default to false)
     * @param shields If true, a shields response will be generated (optional, default to false)
     * @param showLatest If true, for latest version badges a &#39;(latest)&#39; suffix is added (optional, default to false)
     * @param style Override the shields.io badge style value. (optional, default to flat-square)
     * @return PackageVersionBadge
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PackageVersionBadge badgesVersionList(String owner, String repo, String packageFormat, String packageName, String packageVersion, String packageIdentifiers, String badgeToken, String cacheSeconds, String color, String label, String labelColor, String logoColor, String logoWidth, Boolean render, Boolean shields, Boolean showLatest, String style) throws ApiException {
        ApiResponse<PackageVersionBadge> resp = badgesVersionListWithHttpInfo(owner, repo, packageFormat, packageName, packageVersion, packageIdentifiers, badgeToken, cacheSeconds, color, label, labelColor, logoColor, logoWidth, render, shields, showLatest, style);
        return resp.getData();
    }

    /**
     * Get latest package version for a package or package group.
     * Get latest package version for a package or package group.
     * @param owner  (required)
     * @param repo  (required)
     * @param packageFormat  (required)
     * @param packageName  (required)
     * @param packageVersion  (required)
     * @param packageIdentifiers  (required)
     * @param badgeToken Badge token to authenticate for private packages (optional, default to )
     * @param cacheSeconds Override the shields.io badge cacheSeconds value. (optional, default to 300)
     * @param color Override the shields.io badge color value. (optional, default to 12577E)
     * @param label Override the shields.io badge label value. (optional, default to cloudsmith)
     * @param labelColor Override the shields.io badge labelColor value. (optional, default to 021F2F)
     * @param logoColor Override the shields.io badge logoColor value. (optional, default to 45B6EE)
     * @param logoWidth Override the shields.io badge logoWidth value. (optional, default to 10)
     * @param render If true, badge will be rendered (optional, default to false)
     * @param shields If true, a shields response will be generated (optional, default to false)
     * @param showLatest If true, for latest version badges a &#39;(latest)&#39; suffix is added (optional, default to false)
     * @param style Override the shields.io badge style value. (optional, default to flat-square)
     * @return ApiResponse&lt;PackageVersionBadge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PackageVersionBadge> badgesVersionListWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String packageFormat,  @NotNull String packageName,  @NotNull String packageVersion,  @NotNull String packageIdentifiers,  String badgeToken,  String cacheSeconds,  String color,  String label,  String labelColor,  String logoColor,  String logoWidth,  Boolean render,  Boolean shields,  Boolean showLatest,  String style) throws ApiException {
        com.squareup.okhttp.Call call = badgesVersionListValidateBeforeCall(owner, repo, packageFormat, packageName, packageVersion, packageIdentifiers, badgeToken, cacheSeconds, color, label, labelColor, logoColor, logoWidth, render, shields, showLatest, style, null, null);
        Type localVarReturnType = new TypeToken<PackageVersionBadge>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get latest package version for a package or package group. (asynchronously)
     * Get latest package version for a package or package group.
     * @param owner  (required)
     * @param repo  (required)
     * @param packageFormat  (required)
     * @param packageName  (required)
     * @param packageVersion  (required)
     * @param packageIdentifiers  (required)
     * @param badgeToken Badge token to authenticate for private packages (optional, default to )
     * @param cacheSeconds Override the shields.io badge cacheSeconds value. (optional, default to 300)
     * @param color Override the shields.io badge color value. (optional, default to 12577E)
     * @param label Override the shields.io badge label value. (optional, default to cloudsmith)
     * @param labelColor Override the shields.io badge labelColor value. (optional, default to 021F2F)
     * @param logoColor Override the shields.io badge logoColor value. (optional, default to 45B6EE)
     * @param logoWidth Override the shields.io badge logoWidth value. (optional, default to 10)
     * @param render If true, badge will be rendered (optional, default to false)
     * @param shields If true, a shields response will be generated (optional, default to false)
     * @param showLatest If true, for latest version badges a &#39;(latest)&#39; suffix is added (optional, default to false)
     * @param style Override the shields.io badge style value. (optional, default to flat-square)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call badgesVersionListAsync(String owner, String repo, String packageFormat, String packageName, String packageVersion, String packageIdentifiers, String badgeToken, String cacheSeconds, String color, String label, String labelColor, String logoColor, String logoWidth, Boolean render, Boolean shields, Boolean showLatest, String style, final ApiCallback<PackageVersionBadge> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = badgesVersionListValidateBeforeCall(owner, repo, packageFormat, packageName, packageVersion, packageIdentifiers, badgeToken, cacheSeconds, color, label, labelColor, logoColor, logoWidth, render, shields, showLatest, style, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PackageVersionBadge>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
