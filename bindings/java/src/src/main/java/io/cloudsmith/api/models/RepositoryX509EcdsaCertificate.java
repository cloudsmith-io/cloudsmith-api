/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * RepositoryX509EcdsaCertificate
 */

public class RepositoryX509EcdsaCertificate implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("certificate")
  private String certificate = null;

  @SerializedName("certificate_chain")
  private String certificateChain = null;

  @SerializedName("certificate_chain_fingerprint")
  private String certificateChainFingerprint = null;

  @SerializedName("certificate_chain_fingerprint_short")
  private String certificateChainFingerprintShort = null;

  @SerializedName("certificate_fingerprint")
  private String certificateFingerprint = null;

  @SerializedName("certificate_fingerprint_short")
  private String certificateFingerprintShort = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("default")
  private Boolean _default = null;

  /**
   * Gets or Sets issuingStatus
   */
  @JsonAdapter(IssuingStatusEnum.Adapter.class)
  public enum IssuingStatusEnum {
    CERTIFICATE_IS_PENDING_TO_BE_ISSUED("Certificate is pending to be issued"),
    
    CERTIFICATE_SUCCESSFULLY_ISSUED("Certificate successfully issued"),
    
    ERROR_ISSUING_CERTIFICATE("Error issuing certificate");

    private String value;

    IssuingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssuingStatusEnum fromValue(String text) {
      for (IssuingStatusEnum b : IssuingStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IssuingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssuingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IssuingStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("issuing_status")
  private IssuingStatusEnum issuingStatus = IssuingStatusEnum.CERTIFICATE_IS_PENDING_TO_BE_ISSUED;

   /**
   * If selected this is the active key for this repository.
   * @return active
  **/
  @ApiModelProperty(value = "If selected this is the active key for this repository.")
  public Boolean isActive() {
    return active;
  }

   /**
   * The issued certificate.
   * @return certificate
  **/
  @ApiModelProperty(value = "The issued certificate.")
  public String getCertificate() {
    return certificate;
  }

   /**
   * Base64 encoded CA certificate chain.
   * @return certificateChain
  **/
  @ApiModelProperty(value = "Base64 encoded CA certificate chain.")
  public String getCertificateChain() {
    return certificateChain;
  }

   /**
   * Get certificateChainFingerprint
   * @return certificateChainFingerprint
  **/
  @ApiModelProperty(value = "")
  public String getCertificateChainFingerprint() {
    return certificateChainFingerprint;
  }

   /**
   * Get certificateChainFingerprintShort
   * @return certificateChainFingerprintShort
  **/
  @ApiModelProperty(value = "")
  public String getCertificateChainFingerprintShort() {
    return certificateChainFingerprintShort;
  }

   /**
   * The SHA-256 long identifier used
   * @return certificateFingerprint
  **/
  @ApiModelProperty(value = "The SHA-256 long identifier used")
  public String getCertificateFingerprint() {
    return certificateFingerprint;
  }

   /**
   * Get certificateFingerprintShort
   * @return certificateFingerprintShort
  **/
  @ApiModelProperty(value = "")
  public String getCertificateFingerprintShort() {
    return certificateFingerprintShort;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * If selected this is the default key for this repository.
   * @return _default
  **/
  @ApiModelProperty(value = "If selected this is the default key for this repository.")
  public Boolean isDefault() {
    return _default;
  }

  public RepositoryX509EcdsaCertificate issuingStatus(IssuingStatusEnum issuingStatus) {
    this.issuingStatus = issuingStatus;
    return this;
  }

   /**
   * Get issuingStatus
   * @return issuingStatus
  **/
  @ApiModelProperty(value = "")
  public IssuingStatusEnum getIssuingStatus() {
    return issuingStatus;
  }

  public void setIssuingStatus(IssuingStatusEnum issuingStatus) {
    this.issuingStatus = issuingStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryX509EcdsaCertificate repositoryX509EcdsaCertificate = (RepositoryX509EcdsaCertificate) o;
    return Objects.equals(this.active, repositoryX509EcdsaCertificate.active) &&
        Objects.equals(this.certificate, repositoryX509EcdsaCertificate.certificate) &&
        Objects.equals(this.certificateChain, repositoryX509EcdsaCertificate.certificateChain) &&
        Objects.equals(this.certificateChainFingerprint, repositoryX509EcdsaCertificate.certificateChainFingerprint) &&
        Objects.equals(this.certificateChainFingerprintShort, repositoryX509EcdsaCertificate.certificateChainFingerprintShort) &&
        Objects.equals(this.certificateFingerprint, repositoryX509EcdsaCertificate.certificateFingerprint) &&
        Objects.equals(this.certificateFingerprintShort, repositoryX509EcdsaCertificate.certificateFingerprintShort) &&
        Objects.equals(this.createdAt, repositoryX509EcdsaCertificate.createdAt) &&
        Objects.equals(this._default, repositoryX509EcdsaCertificate._default) &&
        Objects.equals(this.issuingStatus, repositoryX509EcdsaCertificate.issuingStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, certificate, certificateChain, certificateChainFingerprint, certificateChainFingerprintShort, certificateFingerprint, certificateFingerprintShort, createdAt, _default, issuingStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryX509EcdsaCertificate {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    certificateChainFingerprint: ").append(toIndentedString(certificateChainFingerprint)).append("\n");
    sb.append("    certificateChainFingerprintShort: ").append(toIndentedString(certificateChainFingerprintShort)).append("\n");
    sb.append("    certificateFingerprint: ").append(toIndentedString(certificateFingerprint)).append("\n");
    sb.append("    certificateFingerprintShort: ").append(toIndentedString(certificateFingerprintShort)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    issuingStatus: ").append(toIndentedString(issuingStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

