/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * PackagesUploadRaw
 */

public class PackagesUploadRaw implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("content_type")
  private String contentType = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("package_file")
  private String packageFile = null;

  @SerializedName("republish")
  private Boolean republish = null;

  @SerializedName("security_scan_status")
  private String securityScanStatus = null;

  @SerializedName("summary")
  private String summary = null;

  @SerializedName("tags")
  private String tags = null;

  @SerializedName("version")
  private String version = null;

  public PackagesUploadRaw contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * A custom content/media (also known as MIME) type to be sent when downloading this file. By default Cloudsmith will attempt to detect the type, but if you need to override it, you can specify it here.
   * @return contentType
  **/
  @ApiModelProperty(value = "A custom content/media (also known as MIME) type to be sent when downloading this file. By default Cloudsmith will attempt to detect the type, but if you need to override it, you can specify it here.")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public PackagesUploadRaw description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A textual description of this package.
   * @return description
  **/
  @ApiModelProperty(example = "Everything about packaging files.", value = "A textual description of this package.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public PackagesUploadRaw name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this package.
   * @return name
  **/
  @ApiModelProperty(example = "my-package", value = "The name of this package.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PackagesUploadRaw packageFile(String packageFile) {
    this.packageFile = packageFile;
    return this;
  }

   /**
   * The primary file for the package.
   * @return packageFile
  **/
  @NotNull
  @ApiModelProperty(example = "y123456789", required = true, value = "The primary file for the package.")
  public String getPackageFile() {
    return packageFile;
  }

  public void setPackageFile(String packageFile) {
    this.packageFile = packageFile;
  }

  public PackagesUploadRaw republish(Boolean republish) {
    this.republish = republish;
    return this;
  }

   /**
   * If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
   * @return republish
  **/
  @ApiModelProperty(value = "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.")
  public Boolean getRepublish() {
    return republish;
  }

  public void setRepublish(Boolean republish) {
    this.republish = republish;
  }

  public PackagesUploadRaw securityScanStatus(String securityScanStatus) {
    this.securityScanStatus = securityScanStatus;
    return this;
  }

   /**
   * None
   * @return securityScanStatus
  **/
  @ApiModelProperty(value = "None")
  public String getSecurityScanStatus() {
    return securityScanStatus;
  }

  public void setSecurityScanStatus(String securityScanStatus) {
    this.securityScanStatus = securityScanStatus;
  }

  public PackagesUploadRaw summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * A one-liner synopsis of this package.
   * @return summary
  **/
  @ApiModelProperty(example = "My Package File", value = "A one-liner synopsis of this package.")
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }

  public PackagesUploadRaw tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * A comma-separated values list of tags to add to the package.
   * @return tags
  **/
  @ApiModelProperty(value = "A comma-separated values list of tags to add to the package.")
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }

  public PackagesUploadRaw version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The raw version for this package.
   * @return version
  **/
  @ApiModelProperty(example = "1.0", value = "The raw version for this package.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackagesUploadRaw packagesUploadRaw = (PackagesUploadRaw) o;
    return Objects.equals(this.contentType, packagesUploadRaw.contentType) &&
        Objects.equals(this.description, packagesUploadRaw.description) &&
        Objects.equals(this.name, packagesUploadRaw.name) &&
        Objects.equals(this.packageFile, packagesUploadRaw.packageFile) &&
        Objects.equals(this.republish, packagesUploadRaw.republish) &&
        Objects.equals(this.securityScanStatus, packagesUploadRaw.securityScanStatus) &&
        Objects.equals(this.summary, packagesUploadRaw.summary) &&
        Objects.equals(this.tags, packagesUploadRaw.tags) &&
        Objects.equals(this.version, packagesUploadRaw.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, description, name, packageFile, republish, securityScanStatus, summary, tags, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackagesUploadRaw {\n");
    
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packageFile: ").append(toIndentedString(packageFile)).append("\n");
    sb.append("    republish: ").append(toIndentedString(republish)).append("\n");
    sb.append("    securityScanStatus: ").append(toIndentedString(securityScanStatus)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

