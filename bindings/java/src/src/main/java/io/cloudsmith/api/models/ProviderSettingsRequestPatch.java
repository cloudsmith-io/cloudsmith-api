/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * ProviderSettingsRequestPatch
 */

public class ProviderSettingsRequestPatch implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("claims")
  private Object claims = null;

  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("provider_url")
  private String providerUrl = null;

  @SerializedName("service_accounts")
  private List<String> serviceAccounts = null;

  public ProviderSettingsRequestPatch claims(Object claims) {
    this.claims = claims;
    return this;
  }

   /**
   * The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.
   * @return claims
  **/
  @ApiModelProperty(value = "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.")
  public Object getClaims() {
    return claims;
  }

  public void setClaims(Object claims) {
    this.claims = claims;
  }

  public ProviderSettingsRequestPatch enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether the provider settings should be used for incoming OIDC requests.
   * @return enabled
  **/
  @ApiModelProperty(value = "Whether the provider settings should be used for incoming OIDC requests.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ProviderSettingsRequestPatch name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the provider settings are being configured for
   * @return name
  **/
 @Size(min=1)  @ApiModelProperty(value = "The name of the provider settings are being configured for")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProviderSettingsRequestPatch providerUrl(String providerUrl) {
    this.providerUrl = providerUrl;
    return this;
  }

   /**
   * The URL from the provider that serves as the base for the OpenID configuration. For example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/
   * @return providerUrl
  **/
 @Size(min=1)  @ApiModelProperty(value = "The URL from the provider that serves as the base for the OpenID configuration. For example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/")
  public String getProviderUrl() {
    return providerUrl;
  }

  public void setProviderUrl(String providerUrl) {
    this.providerUrl = providerUrl;
  }

  public ProviderSettingsRequestPatch serviceAccounts(List<String> serviceAccounts) {
    this.serviceAccounts = serviceAccounts;
    return this;
  }

  public ProviderSettingsRequestPatch addServiceAccountsItem(String serviceAccountsItem) {
    if (this.serviceAccounts == null) {
      this.serviceAccounts = new ArrayList<>();
    }
    this.serviceAccounts.add(serviceAccountsItem);
    return this;
  }

   /**
   * The service accounts associated with these provider settings
   * @return serviceAccounts
  **/
  @ApiModelProperty(value = "The service accounts associated with these provider settings")
  public List<String> getServiceAccounts() {
    return serviceAccounts;
  }

  public void setServiceAccounts(List<String> serviceAccounts) {
    this.serviceAccounts = serviceAccounts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderSettingsRequestPatch providerSettingsRequestPatch = (ProviderSettingsRequestPatch) o;
    return Objects.equals(this.claims, providerSettingsRequestPatch.claims) &&
        Objects.equals(this.enabled, providerSettingsRequestPatch.enabled) &&
        Objects.equals(this.name, providerSettingsRequestPatch.name) &&
        Objects.equals(this.providerUrl, providerSettingsRequestPatch.providerUrl) &&
        Objects.equals(this.serviceAccounts, providerSettingsRequestPatch.serviceAccounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(claims, enabled, name, providerUrl, serviceAccounts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderSettingsRequestPatch {\n");
    
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    providerUrl: ").append(toIndentedString(providerUrl)).append("\n");
    sb.append("    serviceAccounts: ").append(toIndentedString(serviceAccounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

