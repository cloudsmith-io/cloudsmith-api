/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * PackagesUploadConan
 */

public class PackagesUploadConan implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("conan_channel")
  private String conanChannel = null;

  @SerializedName("conan_prefix")
  private String conanPrefix = null;

  @SerializedName("info_file")
  private String infoFile = null;

  @SerializedName("manifest_file")
  private String manifestFile = null;

  @SerializedName("metadata_file")
  private String metadataFile = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("package_file")
  private String packageFile = null;

  @SerializedName("republish")
  private Boolean republish = null;

  @SerializedName("tags")
  private String tags = null;

  @SerializedName("version")
  private String version = null;

  public PackagesUploadConan conanChannel(String conanChannel) {
    this.conanChannel = conanChannel;
    return this;
  }

   /**
   * Conan channel.
   * @return conanChannel
  **/
  @ApiModelProperty(example = "alpha", value = "Conan channel.")
  public String getConanChannel() {
    return conanChannel;
  }

  public void setConanChannel(String conanChannel) {
    this.conanChannel = conanChannel;
  }

  public PackagesUploadConan conanPrefix(String conanPrefix) {
    this.conanPrefix = conanPrefix;
    return this;
  }

   /**
   * Conan prefix (User).
   * @return conanPrefix
  **/
  @ApiModelProperty(example = "my-repository", value = "Conan prefix (User).")
  public String getConanPrefix() {
    return conanPrefix;
  }

  public void setConanPrefix(String conanPrefix) {
    this.conanPrefix = conanPrefix;
  }

  public PackagesUploadConan infoFile(String infoFile) {
    this.infoFile = infoFile;
    return this;
  }

   /**
   * The info file is an python file containing the package metadata.
   * @return infoFile
  **/
  @NotNull
  @ApiModelProperty(example = "y1234456789b", required = true, value = "The info file is an python file containing the package metadata.")
  public String getInfoFile() {
    return infoFile;
  }

  public void setInfoFile(String infoFile) {
    this.infoFile = infoFile;
  }

  public PackagesUploadConan manifestFile(String manifestFile) {
    this.manifestFile = manifestFile;
    return this;
  }

   /**
   * The info file is an python file containing the package metadata.
   * @return manifestFile
  **/
  @NotNull
  @ApiModelProperty(example = "y1234456789c", required = true, value = "The info file is an python file containing the package metadata.")
  public String getManifestFile() {
    return manifestFile;
  }

  public void setManifestFile(String manifestFile) {
    this.manifestFile = manifestFile;
  }

  public PackagesUploadConan metadataFile(String metadataFile) {
    this.metadataFile = metadataFile;
    return this;
  }

   /**
   * The conan file is an python file containing the package metadata.
   * @return metadataFile
  **/
  @NotNull
  @ApiModelProperty(example = "y1234456789a", required = true, value = "The conan file is an python file containing the package metadata.")
  public String getMetadataFile() {
    return metadataFile;
  }

  public void setMetadataFile(String metadataFile) {
    this.metadataFile = metadataFile;
  }

  public PackagesUploadConan name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of this package.
   * @return name
  **/
  @ApiModelProperty(example = "conan_package.tgz", value = "The name of this package.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PackagesUploadConan packageFile(String packageFile) {
    this.packageFile = packageFile;
    return this;
  }

   /**
   * The primary file for the package.
   * @return packageFile
  **/
  @NotNull
  @ApiModelProperty(example = "x123456789a", required = true, value = "The primary file for the package.")
  public String getPackageFile() {
    return packageFile;
  }

  public void setPackageFile(String packageFile) {
    this.packageFile = packageFile;
  }

  public PackagesUploadConan republish(Boolean republish) {
    this.republish = republish;
    return this;
  }

   /**
   * If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
   * @return republish
  **/
  @ApiModelProperty(value = "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.")
  public Boolean isRepublish() {
    return republish;
  }

  public void setRepublish(Boolean republish) {
    this.republish = republish;
  }

  public PackagesUploadConan tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * A comma-separated values list of tags to add to the package.
   * @return tags
  **/
  @ApiModelProperty(value = "A comma-separated values list of tags to add to the package.")
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }

  public PackagesUploadConan version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The raw version for this package.
   * @return version
  **/
  @ApiModelProperty(example = "1.0.0", value = "The raw version for this package.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackagesUploadConan packagesUploadConan = (PackagesUploadConan) o;
    return Objects.equals(this.conanChannel, packagesUploadConan.conanChannel) &&
        Objects.equals(this.conanPrefix, packagesUploadConan.conanPrefix) &&
        Objects.equals(this.infoFile, packagesUploadConan.infoFile) &&
        Objects.equals(this.manifestFile, packagesUploadConan.manifestFile) &&
        Objects.equals(this.metadataFile, packagesUploadConan.metadataFile) &&
        Objects.equals(this.name, packagesUploadConan.name) &&
        Objects.equals(this.packageFile, packagesUploadConan.packageFile) &&
        Objects.equals(this.republish, packagesUploadConan.republish) &&
        Objects.equals(this.tags, packagesUploadConan.tags) &&
        Objects.equals(this.version, packagesUploadConan.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conanChannel, conanPrefix, infoFile, manifestFile, metadataFile, name, packageFile, republish, tags, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackagesUploadConan {\n");
    
    sb.append("    conanChannel: ").append(toIndentedString(conanChannel)).append("\n");
    sb.append("    conanPrefix: ").append(toIndentedString(conanPrefix)).append("\n");
    sb.append("    infoFile: ").append(toIndentedString(infoFile)).append("\n");
    sb.append("    manifestFile: ").append(toIndentedString(manifestFile)).append("\n");
    sb.append("    metadataFile: ").append(toIndentedString(metadataFile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    packageFile: ").append(toIndentedString(packageFile)).append("\n");
    sb.append("    republish: ").append(toIndentedString(republish)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

