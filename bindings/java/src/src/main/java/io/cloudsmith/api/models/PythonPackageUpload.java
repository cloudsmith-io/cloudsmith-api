/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cloudsmith.api.models.Architecture;
import io.cloudsmith.api.models.Distribution;
import io.cloudsmith.api.models.DistributionVersion;
import io.cloudsmith.api.models.PackageFile;
import io.cloudsmith.api.models.Tags;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * PythonPackageUpload
 */

public class PythonPackageUpload implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("architectures")
  private List<Architecture> architectures = null;

  @SerializedName("cdn_url")
  private String cdnUrl = null;

  @SerializedName("checksum_md5")
  private String checksumMd5 = null;

  @SerializedName("checksum_sha1")
  private String checksumSha1 = null;

  @SerializedName("checksum_sha256")
  private String checksumSha256 = null;

  @SerializedName("checksum_sha512")
  private String checksumSha512 = null;

  @SerializedName("dependencies_checksum_md5")
  private String dependenciesChecksumMd5 = null;

  @SerializedName("dependencies_url")
  private String dependenciesUrl = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("distro")
  private Distribution distro = null;

  @SerializedName("distro_version")
  private DistributionVersion distroVersion = null;

  @SerializedName("downloads")
  private java.math.BigInteger downloads = null;

  @SerializedName("epoch")
  private java.math.BigInteger epoch = null;

  @SerializedName("extension")
  private String extension = null;

  @SerializedName("filename")
  private String filename = null;

  @SerializedName("files")
  private List<PackageFile> files = null;

  @SerializedName("format")
  private String format = null;

  @SerializedName("format_url")
  private String formatUrl = null;

  @SerializedName("identifier_perm")
  private String identifierPerm = null;

  @SerializedName("indexed")
  private Boolean indexed = null;

  @SerializedName("is_cancellable")
  private Boolean isCancellable = null;

  @SerializedName("is_copyable")
  private Boolean isCopyable = null;

  @SerializedName("is_deleteable")
  private Boolean isDeleteable = null;

  @SerializedName("is_downloadable")
  private Boolean isDownloadable = null;

  @SerializedName("is_moveable")
  private Boolean isMoveable = null;

  @SerializedName("is_quarantinable")
  private Boolean isQuarantinable = null;

  @SerializedName("is_quarantined")
  private Boolean isQuarantined = null;

  @SerializedName("is_resyncable")
  private Boolean isResyncable = null;

  @SerializedName("is_security_scannable")
  private Boolean isSecurityScannable = null;

  @SerializedName("is_sync_awaiting")
  private Boolean isSyncAwaiting = null;

  @SerializedName("is_sync_completed")
  private Boolean isSyncCompleted = null;

  @SerializedName("is_sync_failed")
  private Boolean isSyncFailed = null;

  @SerializedName("is_sync_in_flight")
  private Boolean isSyncInFlight = null;

  @SerializedName("is_sync_in_progress")
  private Boolean isSyncInProgress = null;

  @SerializedName("license")
  private String license = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("namespace")
  private String namespace = null;

  @SerializedName("namespace_url")
  private String namespaceUrl = null;

  @SerializedName("num_files")
  private java.math.BigInteger numFiles = null;

  @SerializedName("origin_repository")
  private String originRepository = null;

  @SerializedName("origin_repository_url")
  private String originRepositoryUrl = null;

  @SerializedName("package_type")
  private java.math.BigInteger packageType = null;

  @SerializedName("release")
  private String release = null;

  @SerializedName("repository")
  private String repository = null;

  @SerializedName("repository_url")
  private String repositoryUrl = null;

  @SerializedName("security_scan_completed_at")
  private OffsetDateTime securityScanCompletedAt = null;

  @SerializedName("security_scan_started_at")
  private OffsetDateTime securityScanStartedAt = null;

  /**
   * Gets or Sets securityScanStatus
   */
  @JsonAdapter(SecurityScanStatusEnum.Adapter.class)
  public enum SecurityScanStatusEnum {
    AWAITING_SECURITY_SCAN("Awaiting Security Scan"),
    
    SECURITY_SCANNING_IN_PROGRESS("Security Scanning in Progress"),
    
    SCAN_DETECTED_VULNERABILITIES("Scan Detected Vulnerabilities"),
    
    SCAN_DETECTED_NO_VULNERABILITIES("Scan Detected No Vulnerabilities"),
    
    SECURITY_SCANNING_DISABLED("Security Scanning Disabled"),
    
    SECURITY_SCANNING_FAILED("Security Scanning Failed"),
    
    SECURITY_SCANNING_SKIPPED("Security Scanning Skipped"),
    
    SECURITY_SCANNING_NOT_SUPPORTED("Security Scanning Not Supported");

    private String value;

    SecurityScanStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecurityScanStatusEnum fromValue(String text) {
      for (SecurityScanStatusEnum b : SecurityScanStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SecurityScanStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecurityScanStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecurityScanStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SecurityScanStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("security_scan_status")
  private SecurityScanStatusEnum securityScanStatus = SecurityScanStatusEnum.AWAITING_SECURITY_SCAN;

  @SerializedName("security_scan_status_updated_at")
  private OffsetDateTime securityScanStatusUpdatedAt = null;

  @SerializedName("self_html_url")
  private String selfHtmlUrl = null;

  @SerializedName("self_url")
  private String selfUrl = null;

  @SerializedName("signature_url")
  private String signatureUrl = null;

  @SerializedName("size")
  private java.math.BigInteger size = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("slug_perm")
  private String slugPerm = null;

  @SerializedName("stage")
  private java.math.BigInteger stage = null;

  @SerializedName("stage_str")
  private String stageStr = null;

  @SerializedName("stage_updated_at")
  private OffsetDateTime stageUpdatedAt = null;

  @SerializedName("status")
  private java.math.BigInteger status = null;

  @SerializedName("status_reason")
  private String statusReason = null;

  @SerializedName("status_str")
  private String statusStr = null;

  @SerializedName("status_updated_at")
  private OffsetDateTime statusUpdatedAt = null;

  @SerializedName("status_url")
  private String statusUrl = null;

  @SerializedName("subtype")
  private String subtype = null;

  @SerializedName("summary")
  private String summary = null;

  @SerializedName("sync_finished_at")
  private OffsetDateTime syncFinishedAt = null;

  @SerializedName("sync_progress")
  private java.math.BigInteger syncProgress = null;

  @SerializedName("tags_immutable")
  private Tags tagsImmutable = null;

  @SerializedName("type_display")
  private String typeDisplay = null;

  @SerializedName("uploaded_at")
  private OffsetDateTime uploadedAt = null;

  @SerializedName("uploader")
  private String uploader = null;

  @SerializedName("uploader_url")
  private String uploaderUrl = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("version_orig")
  private String versionOrig = null;

  @SerializedName("vulnerability_scan_results_url")
  private String vulnerabilityScanResultsUrl = null;

   /**
   * Get architectures
   * @return architectures
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<Architecture> getArchitectures() {
    return architectures;
  }

   /**
   * Get cdnUrl
   * @return cdnUrl
  **/
  @ApiModelProperty(value = "")
  public String getCdnUrl() {
    return cdnUrl;
  }

   /**
   * Get checksumMd5
   * @return checksumMd5
  **/
  @ApiModelProperty(value = "")
  public String getChecksumMd5() {
    return checksumMd5;
  }

   /**
   * Get checksumSha1
   * @return checksumSha1
  **/
  @ApiModelProperty(value = "")
  public String getChecksumSha1() {
    return checksumSha1;
  }

   /**
   * Get checksumSha256
   * @return checksumSha256
  **/
  @ApiModelProperty(value = "")
  public String getChecksumSha256() {
    return checksumSha256;
  }

   /**
   * Get checksumSha512
   * @return checksumSha512
  **/
  @ApiModelProperty(value = "")
  public String getChecksumSha512() {
    return checksumSha512;
  }

   /**
   * A checksum of all of the package&#39;s dependencies.
   * @return dependenciesChecksumMd5
  **/
  @ApiModelProperty(value = "A checksum of all of the package's dependencies.")
  public String getDependenciesChecksumMd5() {
    return dependenciesChecksumMd5;
  }

   /**
   * Get dependenciesUrl
   * @return dependenciesUrl
  **/
  @ApiModelProperty(value = "")
  public String getDependenciesUrl() {
    return dependenciesUrl;
  }

   /**
   * A textual description of this package.
   * @return description
  **/
  @ApiModelProperty(value = "A textual description of this package.")
  public String getDescription() {
    return description;
  }

  public PythonPackageUpload distro(Distribution distro) {
    this.distro = distro;
    return this;
  }

   /**
   * Get distro
   * @return distro
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Distribution getDistro() {
    return distro;
  }

  public void setDistro(Distribution distro) {
    this.distro = distro;
  }

  public PythonPackageUpload distroVersion(DistributionVersion distroVersion) {
    this.distroVersion = distroVersion;
    return this;
  }

   /**
   * Get distroVersion
   * @return distroVersion
  **/
  @Valid
  @ApiModelProperty(value = "")
  public DistributionVersion getDistroVersion() {
    return distroVersion;
  }

  public void setDistroVersion(DistributionVersion distroVersion) {
    this.distroVersion = distroVersion;
  }

   /**
   * Get downloads
   * @return downloads
  **/
  @ApiModelProperty(value = "")
  public java.math.BigInteger getDownloads() {
    return downloads;
  }

   /**
   * The epoch of the package version (if any).
   * @return epoch
  **/
  @ApiModelProperty(value = "The epoch of the package version (if any).")
  public java.math.BigInteger getEpoch() {
    return epoch;
  }

   /**
   * Get extension
   * @return extension
  **/
  @ApiModelProperty(value = "")
  public String getExtension() {
    return extension;
  }

   /**
   * Get filename
   * @return filename
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getFilename() {
    return filename;
  }

   /**
   * Get files
   * @return files
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<PackageFile> getFiles() {
    return files;
  }

   /**
   * Get format
   * @return format
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getFormat() {
    return format;
  }

   /**
   * Get formatUrl
   * @return formatUrl
  **/
  @ApiModelProperty(value = "")
  public String getFormatUrl() {
    return formatUrl;
  }

   /**
   * Unique and permanent identifier for the package.
   * @return identifierPerm
  **/
 @Size(min=1)  @ApiModelProperty(value = "Unique and permanent identifier for the package.")
  public String getIdentifierPerm() {
    return identifierPerm;
  }

   /**
   * Get indexed
   * @return indexed
  **/
  @ApiModelProperty(value = "")
  public Boolean isIndexed() {
    return indexed;
  }

   /**
   * Get isCancellable
   * @return isCancellable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsCancellable() {
    return isCancellable;
  }

   /**
   * Get isCopyable
   * @return isCopyable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsCopyable() {
    return isCopyable;
  }

   /**
   * Get isDeleteable
   * @return isDeleteable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDeleteable() {
    return isDeleteable;
  }

   /**
   * Get isDownloadable
   * @return isDownloadable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsDownloadable() {
    return isDownloadable;
  }

   /**
   * Get isMoveable
   * @return isMoveable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsMoveable() {
    return isMoveable;
  }

   /**
   * Get isQuarantinable
   * @return isQuarantinable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsQuarantinable() {
    return isQuarantinable;
  }

   /**
   * Get isQuarantined
   * @return isQuarantined
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsQuarantined() {
    return isQuarantined;
  }

   /**
   * Get isResyncable
   * @return isResyncable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsResyncable() {
    return isResyncable;
  }

   /**
   * Get isSecurityScannable
   * @return isSecurityScannable
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSecurityScannable() {
    return isSecurityScannable;
  }

   /**
   * Get isSyncAwaiting
   * @return isSyncAwaiting
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSyncAwaiting() {
    return isSyncAwaiting;
  }

   /**
   * Get isSyncCompleted
   * @return isSyncCompleted
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSyncCompleted() {
    return isSyncCompleted;
  }

   /**
   * Get isSyncFailed
   * @return isSyncFailed
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSyncFailed() {
    return isSyncFailed;
  }

   /**
   * Get isSyncInFlight
   * @return isSyncInFlight
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSyncInFlight() {
    return isSyncInFlight;
  }

   /**
   * Get isSyncInProgress
   * @return isSyncInProgress
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsSyncInProgress() {
    return isSyncInProgress;
  }

   /**
   * The license of this package.
   * @return license
  **/
  @ApiModelProperty(value = "The license of this package.")
  public String getLicense() {
    return license;
  }

   /**
   * The name of this package.
   * @return name
  **/
  @ApiModelProperty(value = "The name of this package.")
  public String getName() {
    return name;
  }

   /**
   * Get namespace
   * @return namespace
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getNamespace() {
    return namespace;
  }

   /**
   * Get namespaceUrl
   * @return namespaceUrl
  **/
  @ApiModelProperty(value = "")
  public String getNamespaceUrl() {
    return namespaceUrl;
  }

   /**
   * Get numFiles
   * @return numFiles
  **/
  @ApiModelProperty(value = "")
  public java.math.BigInteger getNumFiles() {
    return numFiles;
  }

   /**
   * Get originRepository
   * @return originRepository
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getOriginRepository() {
    return originRepository;
  }

   /**
   * Get originRepositoryUrl
   * @return originRepositoryUrl
  **/
  @ApiModelProperty(value = "")
  public String getOriginRepositoryUrl() {
    return originRepositoryUrl;
  }

   /**
   * The type of package contents.
   * @return packageType
  **/
  @ApiModelProperty(value = "The type of package contents.")
  public java.math.BigInteger getPackageType() {
    return packageType;
  }

   /**
   * The release of the package version (if any).
   * @return release
  **/
  @ApiModelProperty(value = "The release of the package version (if any).")
  public String getRelease() {
    return release;
  }

   /**
   * Get repository
   * @return repository
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getRepository() {
    return repository;
  }

   /**
   * Get repositoryUrl
   * @return repositoryUrl
  **/
  @ApiModelProperty(value = "")
  public String getRepositoryUrl() {
    return repositoryUrl;
  }

   /**
   * The datetime the security scanning was completed.
   * @return securityScanCompletedAt
  **/
  @Valid
  @ApiModelProperty(value = "The datetime the security scanning was completed.")
  public OffsetDateTime getSecurityScanCompletedAt() {
    return securityScanCompletedAt;
  }

   /**
   * The datetime the security scanning was started.
   * @return securityScanStartedAt
  **/
  @Valid
  @ApiModelProperty(value = "The datetime the security scanning was started.")
  public OffsetDateTime getSecurityScanStartedAt() {
    return securityScanStartedAt;
  }

   /**
   * Get securityScanStatus
   * @return securityScanStatus
  **/
  @ApiModelProperty(value = "")
  public SecurityScanStatusEnum getSecurityScanStatus() {
    return securityScanStatus;
  }

   /**
   * The datetime the security scanning status was updated.
   * @return securityScanStatusUpdatedAt
  **/
  @Valid
  @ApiModelProperty(value = "The datetime the security scanning status was updated.")
  public OffsetDateTime getSecurityScanStatusUpdatedAt() {
    return securityScanStatusUpdatedAt;
  }

   /**
   * Get selfHtmlUrl
   * @return selfHtmlUrl
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getSelfHtmlUrl() {
    return selfHtmlUrl;
  }

   /**
   * Get selfUrl
   * @return selfUrl
  **/
  @ApiModelProperty(value = "")
  public String getSelfUrl() {
    return selfUrl;
  }

   /**
   * Get signatureUrl
   * @return signatureUrl
  **/
  @ApiModelProperty(value = "")
  public String getSignatureUrl() {
    return signatureUrl;
  }

   /**
   * The calculated size of the package.
   * @return size
  **/
  @ApiModelProperty(value = "The calculated size of the package.")
  public java.math.BigInteger getSize() {
    return size;
  }

   /**
   * The public unique identifier for the package.
   * @return slug
  **/
 @Pattern(regexp="^[-a-zA-Z0-9_]+$") @Size(min=1)  @ApiModelProperty(value = "The public unique identifier for the package.")
  public String getSlug() {
    return slug;
  }

   /**
   * Get slugPerm
   * @return slugPerm
  **/
 @Pattern(regexp="^[-a-zA-Z0-9_]+$") @Size(min=1)  @ApiModelProperty(value = "")
  public String getSlugPerm() {
    return slugPerm;
  }

   /**
   * The synchronisation (in progress) stage of the package.
   * @return stage
  **/
  @ApiModelProperty(value = "The synchronisation (in progress) stage of the package.")
  public java.math.BigInteger getStage() {
    return stage;
  }

   /**
   * Get stageStr
   * @return stageStr
  **/
  @ApiModelProperty(value = "")
  public String getStageStr() {
    return stageStr;
  }

   /**
   * The datetime the package stage was updated at.
   * @return stageUpdatedAt
  **/
  @Valid
  @ApiModelProperty(value = "The datetime the package stage was updated at.")
  public OffsetDateTime getStageUpdatedAt() {
    return stageUpdatedAt;
  }

   /**
   * The synchronisation status of the package.
   * @return status
  **/
  @ApiModelProperty(value = "The synchronisation status of the package.")
  public java.math.BigInteger getStatus() {
    return status;
  }

   /**
   * A textual description for the synchronous status reason (if any
   * @return statusReason
  **/
  @ApiModelProperty(value = "A textual description for the synchronous status reason (if any")
  public String getStatusReason() {
    return statusReason;
  }

   /**
   * Get statusStr
   * @return statusStr
  **/
  @ApiModelProperty(value = "")
  public String getStatusStr() {
    return statusStr;
  }

   /**
   * The datetime the package status was updated at.
   * @return statusUpdatedAt
  **/
  @Valid
  @ApiModelProperty(value = "The datetime the package status was updated at.")
  public OffsetDateTime getStatusUpdatedAt() {
    return statusUpdatedAt;
  }

   /**
   * Get statusUrl
   * @return statusUrl
  **/
  @ApiModelProperty(value = "")
  public String getStatusUrl() {
    return statusUrl;
  }

   /**
   * Get subtype
   * @return subtype
  **/
  @ApiModelProperty(value = "")
  public String getSubtype() {
    return subtype;
  }

   /**
   * A one-liner synopsis of this package.
   * @return summary
  **/
  @ApiModelProperty(value = "A one-liner synopsis of this package.")
  public String getSummary() {
    return summary;
  }

   /**
   * The datetime the package sync was finished at.
   * @return syncFinishedAt
  **/
  @Valid
  @ApiModelProperty(value = "The datetime the package sync was finished at.")
  public OffsetDateTime getSyncFinishedAt() {
    return syncFinishedAt;
  }

   /**
   * Synchronisation progress (from 0-100)
   * @return syncProgress
  **/
  @ApiModelProperty(value = "Synchronisation progress (from 0-100)")
  public java.math.BigInteger getSyncProgress() {
    return syncProgress;
  }

  public PythonPackageUpload tagsImmutable(Tags tagsImmutable) {
    this.tagsImmutable = tagsImmutable;
    return this;
  }

   /**
   * Get tagsImmutable
   * @return tagsImmutable
  **/
  @Valid
  @ApiModelProperty(value = "")
  public Tags getTagsImmutable() {
    return tagsImmutable;
  }

  public void setTagsImmutable(Tags tagsImmutable) {
    this.tagsImmutable = tagsImmutable;
  }

   /**
   * Get typeDisplay
   * @return typeDisplay
  **/
  @ApiModelProperty(value = "")
  public String getTypeDisplay() {
    return typeDisplay;
  }

   /**
   * The date this package was uploaded.
   * @return uploadedAt
  **/
  @Valid
  @ApiModelProperty(value = "The date this package was uploaded.")
  public OffsetDateTime getUploadedAt() {
    return uploadedAt;
  }

   /**
   * Get uploader
   * @return uploader
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getUploader() {
    return uploader;
  }

   /**
   * Get uploaderUrl
   * @return uploaderUrl
  **/
  @ApiModelProperty(value = "")
  public String getUploaderUrl() {
    return uploaderUrl;
  }

   /**
   * The raw version for this package.
   * @return version
  **/
  @ApiModelProperty(value = "The raw version for this package.")
  public String getVersion() {
    return version;
  }

   /**
   * Get versionOrig
   * @return versionOrig
  **/
  @ApiModelProperty(value = "")
  public String getVersionOrig() {
    return versionOrig;
  }

   /**
   * Get vulnerabilityScanResultsUrl
   * @return vulnerabilityScanResultsUrl
  **/
  @ApiModelProperty(value = "")
  public String getVulnerabilityScanResultsUrl() {
    return vulnerabilityScanResultsUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PythonPackageUpload pythonPackageUpload = (PythonPackageUpload) o;
    return Objects.equals(this.architectures, pythonPackageUpload.architectures) &&
        Objects.equals(this.cdnUrl, pythonPackageUpload.cdnUrl) &&
        Objects.equals(this.checksumMd5, pythonPackageUpload.checksumMd5) &&
        Objects.equals(this.checksumSha1, pythonPackageUpload.checksumSha1) &&
        Objects.equals(this.checksumSha256, pythonPackageUpload.checksumSha256) &&
        Objects.equals(this.checksumSha512, pythonPackageUpload.checksumSha512) &&
        Objects.equals(this.dependenciesChecksumMd5, pythonPackageUpload.dependenciesChecksumMd5) &&
        Objects.equals(this.dependenciesUrl, pythonPackageUpload.dependenciesUrl) &&
        Objects.equals(this.description, pythonPackageUpload.description) &&
        Objects.equals(this.distro, pythonPackageUpload.distro) &&
        Objects.equals(this.distroVersion, pythonPackageUpload.distroVersion) &&
        Objects.equals(this.downloads, pythonPackageUpload.downloads) &&
        Objects.equals(this.epoch, pythonPackageUpload.epoch) &&
        Objects.equals(this.extension, pythonPackageUpload.extension) &&
        Objects.equals(this.filename, pythonPackageUpload.filename) &&
        Objects.equals(this.files, pythonPackageUpload.files) &&
        Objects.equals(this.format, pythonPackageUpload.format) &&
        Objects.equals(this.formatUrl, pythonPackageUpload.formatUrl) &&
        Objects.equals(this.identifierPerm, pythonPackageUpload.identifierPerm) &&
        Objects.equals(this.indexed, pythonPackageUpload.indexed) &&
        Objects.equals(this.isCancellable, pythonPackageUpload.isCancellable) &&
        Objects.equals(this.isCopyable, pythonPackageUpload.isCopyable) &&
        Objects.equals(this.isDeleteable, pythonPackageUpload.isDeleteable) &&
        Objects.equals(this.isDownloadable, pythonPackageUpload.isDownloadable) &&
        Objects.equals(this.isMoveable, pythonPackageUpload.isMoveable) &&
        Objects.equals(this.isQuarantinable, pythonPackageUpload.isQuarantinable) &&
        Objects.equals(this.isQuarantined, pythonPackageUpload.isQuarantined) &&
        Objects.equals(this.isResyncable, pythonPackageUpload.isResyncable) &&
        Objects.equals(this.isSecurityScannable, pythonPackageUpload.isSecurityScannable) &&
        Objects.equals(this.isSyncAwaiting, pythonPackageUpload.isSyncAwaiting) &&
        Objects.equals(this.isSyncCompleted, pythonPackageUpload.isSyncCompleted) &&
        Objects.equals(this.isSyncFailed, pythonPackageUpload.isSyncFailed) &&
        Objects.equals(this.isSyncInFlight, pythonPackageUpload.isSyncInFlight) &&
        Objects.equals(this.isSyncInProgress, pythonPackageUpload.isSyncInProgress) &&
        Objects.equals(this.license, pythonPackageUpload.license) &&
        Objects.equals(this.name, pythonPackageUpload.name) &&
        Objects.equals(this.namespace, pythonPackageUpload.namespace) &&
        Objects.equals(this.namespaceUrl, pythonPackageUpload.namespaceUrl) &&
        Objects.equals(this.numFiles, pythonPackageUpload.numFiles) &&
        Objects.equals(this.originRepository, pythonPackageUpload.originRepository) &&
        Objects.equals(this.originRepositoryUrl, pythonPackageUpload.originRepositoryUrl) &&
        Objects.equals(this.packageType, pythonPackageUpload.packageType) &&
        Objects.equals(this.release, pythonPackageUpload.release) &&
        Objects.equals(this.repository, pythonPackageUpload.repository) &&
        Objects.equals(this.repositoryUrl, pythonPackageUpload.repositoryUrl) &&
        Objects.equals(this.securityScanCompletedAt, pythonPackageUpload.securityScanCompletedAt) &&
        Objects.equals(this.securityScanStartedAt, pythonPackageUpload.securityScanStartedAt) &&
        Objects.equals(this.securityScanStatus, pythonPackageUpload.securityScanStatus) &&
        Objects.equals(this.securityScanStatusUpdatedAt, pythonPackageUpload.securityScanStatusUpdatedAt) &&
        Objects.equals(this.selfHtmlUrl, pythonPackageUpload.selfHtmlUrl) &&
        Objects.equals(this.selfUrl, pythonPackageUpload.selfUrl) &&
        Objects.equals(this.signatureUrl, pythonPackageUpload.signatureUrl) &&
        Objects.equals(this.size, pythonPackageUpload.size) &&
        Objects.equals(this.slug, pythonPackageUpload.slug) &&
        Objects.equals(this.slugPerm, pythonPackageUpload.slugPerm) &&
        Objects.equals(this.stage, pythonPackageUpload.stage) &&
        Objects.equals(this.stageStr, pythonPackageUpload.stageStr) &&
        Objects.equals(this.stageUpdatedAt, pythonPackageUpload.stageUpdatedAt) &&
        Objects.equals(this.status, pythonPackageUpload.status) &&
        Objects.equals(this.statusReason, pythonPackageUpload.statusReason) &&
        Objects.equals(this.statusStr, pythonPackageUpload.statusStr) &&
        Objects.equals(this.statusUpdatedAt, pythonPackageUpload.statusUpdatedAt) &&
        Objects.equals(this.statusUrl, pythonPackageUpload.statusUrl) &&
        Objects.equals(this.subtype, pythonPackageUpload.subtype) &&
        Objects.equals(this.summary, pythonPackageUpload.summary) &&
        Objects.equals(this.syncFinishedAt, pythonPackageUpload.syncFinishedAt) &&
        Objects.equals(this.syncProgress, pythonPackageUpload.syncProgress) &&
        Objects.equals(this.tagsImmutable, pythonPackageUpload.tagsImmutable) &&
        Objects.equals(this.typeDisplay, pythonPackageUpload.typeDisplay) &&
        Objects.equals(this.uploadedAt, pythonPackageUpload.uploadedAt) &&
        Objects.equals(this.uploader, pythonPackageUpload.uploader) &&
        Objects.equals(this.uploaderUrl, pythonPackageUpload.uploaderUrl) &&
        Objects.equals(this.version, pythonPackageUpload.version) &&
        Objects.equals(this.versionOrig, pythonPackageUpload.versionOrig) &&
        Objects.equals(this.vulnerabilityScanResultsUrl, pythonPackageUpload.vulnerabilityScanResultsUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(architectures, cdnUrl, checksumMd5, checksumSha1, checksumSha256, checksumSha512, dependenciesChecksumMd5, dependenciesUrl, description, distro, distroVersion, downloads, epoch, extension, filename, files, format, formatUrl, identifierPerm, indexed, isCancellable, isCopyable, isDeleteable, isDownloadable, isMoveable, isQuarantinable, isQuarantined, isResyncable, isSecurityScannable, isSyncAwaiting, isSyncCompleted, isSyncFailed, isSyncInFlight, isSyncInProgress, license, name, namespace, namespaceUrl, numFiles, originRepository, originRepositoryUrl, packageType, release, repository, repositoryUrl, securityScanCompletedAt, securityScanStartedAt, securityScanStatus, securityScanStatusUpdatedAt, selfHtmlUrl, selfUrl, signatureUrl, size, slug, slugPerm, stage, stageStr, stageUpdatedAt, status, statusReason, statusStr, statusUpdatedAt, statusUrl, subtype, summary, syncFinishedAt, syncProgress, tagsImmutable, typeDisplay, uploadedAt, uploader, uploaderUrl, version, versionOrig, vulnerabilityScanResultsUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PythonPackageUpload {\n");
    
    sb.append("    architectures: ").append(toIndentedString(architectures)).append("\n");
    sb.append("    cdnUrl: ").append(toIndentedString(cdnUrl)).append("\n");
    sb.append("    checksumMd5: ").append(toIndentedString(checksumMd5)).append("\n");
    sb.append("    checksumSha1: ").append(toIndentedString(checksumSha1)).append("\n");
    sb.append("    checksumSha256: ").append(toIndentedString(checksumSha256)).append("\n");
    sb.append("    checksumSha512: ").append(toIndentedString(checksumSha512)).append("\n");
    sb.append("    dependenciesChecksumMd5: ").append(toIndentedString(dependenciesChecksumMd5)).append("\n");
    sb.append("    dependenciesUrl: ").append(toIndentedString(dependenciesUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    distro: ").append(toIndentedString(distro)).append("\n");
    sb.append("    distroVersion: ").append(toIndentedString(distroVersion)).append("\n");
    sb.append("    downloads: ").append(toIndentedString(downloads)).append("\n");
    sb.append("    epoch: ").append(toIndentedString(epoch)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    formatUrl: ").append(toIndentedString(formatUrl)).append("\n");
    sb.append("    identifierPerm: ").append(toIndentedString(identifierPerm)).append("\n");
    sb.append("    indexed: ").append(toIndentedString(indexed)).append("\n");
    sb.append("    isCancellable: ").append(toIndentedString(isCancellable)).append("\n");
    sb.append("    isCopyable: ").append(toIndentedString(isCopyable)).append("\n");
    sb.append("    isDeleteable: ").append(toIndentedString(isDeleteable)).append("\n");
    sb.append("    isDownloadable: ").append(toIndentedString(isDownloadable)).append("\n");
    sb.append("    isMoveable: ").append(toIndentedString(isMoveable)).append("\n");
    sb.append("    isQuarantinable: ").append(toIndentedString(isQuarantinable)).append("\n");
    sb.append("    isQuarantined: ").append(toIndentedString(isQuarantined)).append("\n");
    sb.append("    isResyncable: ").append(toIndentedString(isResyncable)).append("\n");
    sb.append("    isSecurityScannable: ").append(toIndentedString(isSecurityScannable)).append("\n");
    sb.append("    isSyncAwaiting: ").append(toIndentedString(isSyncAwaiting)).append("\n");
    sb.append("    isSyncCompleted: ").append(toIndentedString(isSyncCompleted)).append("\n");
    sb.append("    isSyncFailed: ").append(toIndentedString(isSyncFailed)).append("\n");
    sb.append("    isSyncInFlight: ").append(toIndentedString(isSyncInFlight)).append("\n");
    sb.append("    isSyncInProgress: ").append(toIndentedString(isSyncInProgress)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    namespaceUrl: ").append(toIndentedString(namespaceUrl)).append("\n");
    sb.append("    numFiles: ").append(toIndentedString(numFiles)).append("\n");
    sb.append("    originRepository: ").append(toIndentedString(originRepository)).append("\n");
    sb.append("    originRepositoryUrl: ").append(toIndentedString(originRepositoryUrl)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    release: ").append(toIndentedString(release)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    securityScanCompletedAt: ").append(toIndentedString(securityScanCompletedAt)).append("\n");
    sb.append("    securityScanStartedAt: ").append(toIndentedString(securityScanStartedAt)).append("\n");
    sb.append("    securityScanStatus: ").append(toIndentedString(securityScanStatus)).append("\n");
    sb.append("    securityScanStatusUpdatedAt: ").append(toIndentedString(securityScanStatusUpdatedAt)).append("\n");
    sb.append("    selfHtmlUrl: ").append(toIndentedString(selfHtmlUrl)).append("\n");
    sb.append("    selfUrl: ").append(toIndentedString(selfUrl)).append("\n");
    sb.append("    signatureUrl: ").append(toIndentedString(signatureUrl)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    slugPerm: ").append(toIndentedString(slugPerm)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    stageStr: ").append(toIndentedString(stageStr)).append("\n");
    sb.append("    stageUpdatedAt: ").append(toIndentedString(stageUpdatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    statusStr: ").append(toIndentedString(statusStr)).append("\n");
    sb.append("    statusUpdatedAt: ").append(toIndentedString(statusUpdatedAt)).append("\n");
    sb.append("    statusUrl: ").append(toIndentedString(statusUrl)).append("\n");
    sb.append("    subtype: ").append(toIndentedString(subtype)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    syncFinishedAt: ").append(toIndentedString(syncFinishedAt)).append("\n");
    sb.append("    syncProgress: ").append(toIndentedString(syncProgress)).append("\n");
    sb.append("    tagsImmutable: ").append(toIndentedString(tagsImmutable)).append("\n");
    sb.append("    typeDisplay: ").append(toIndentedString(typeDisplay)).append("\n");
    sb.append("    uploadedAt: ").append(toIndentedString(uploadedAt)).append("\n");
    sb.append("    uploader: ").append(toIndentedString(uploader)).append("\n");
    sb.append("    uploaderUrl: ").append(toIndentedString(uploaderUrl)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionOrig: ").append(toIndentedString(versionOrig)).append("\n");
    sb.append("    vulnerabilityScanResultsUrl: ").append(toIndentedString(vulnerabilityScanResultsUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

