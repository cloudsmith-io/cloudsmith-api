/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * A set of what the package format supports
 */
@ApiModel(description = "A set of what the package format supports")

public class FormatSupport implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("dependencies")
  private Boolean dependencies = null;

  @SerializedName("distributions")
  private Boolean distributions = null;

  @SerializedName("file_lists")
  private Boolean fileLists = null;

  @SerializedName("metadata")
  private Boolean metadata = null;

  @SerializedName("versioning")
  private Boolean versioning = null;

  public FormatSupport dependencies(Boolean dependencies) {
    this.dependencies = dependencies;
    return this;
  }

   /**
   * If true the package format supports dependencies
   * @return dependencies
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "If true the package format supports dependencies")
  public Boolean isDependencies() {
    return dependencies;
  }

  public void setDependencies(Boolean dependencies) {
    this.dependencies = dependencies;
  }

  public FormatSupport distributions(Boolean distributions) {
    this.distributions = distributions;
    return this;
  }

   /**
   * If true the package format supports distributions
   * @return distributions
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "If true the package format supports distributions")
  public Boolean isDistributions() {
    return distributions;
  }

  public void setDistributions(Boolean distributions) {
    this.distributions = distributions;
  }

  public FormatSupport fileLists(Boolean fileLists) {
    this.fileLists = fileLists;
    return this;
  }

   /**
   * If true the package format supports file lists
   * @return fileLists
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "If true the package format supports file lists")
  public Boolean isFileLists() {
    return fileLists;
  }

  public void setFileLists(Boolean fileLists) {
    this.fileLists = fileLists;
  }

  public FormatSupport metadata(Boolean metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * If true the package format supports metadata
   * @return metadata
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "If true the package format supports metadata")
  public Boolean isMetadata() {
    return metadata;
  }

  public void setMetadata(Boolean metadata) {
    this.metadata = metadata;
  }

  public FormatSupport versioning(Boolean versioning) {
    this.versioning = versioning;
    return this;
  }

   /**
   * If true the package format supports versioning
   * @return versioning
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "If true the package format supports versioning")
  public Boolean isVersioning() {
    return versioning;
  }

  public void setVersioning(Boolean versioning) {
    this.versioning = versioning;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormatSupport formatSupport = (FormatSupport) o;
    return Objects.equals(this.dependencies, formatSupport.dependencies) &&
        Objects.equals(this.distributions, formatSupport.distributions) &&
        Objects.equals(this.fileLists, formatSupport.fileLists) &&
        Objects.equals(this.metadata, formatSupport.metadata) &&
        Objects.equals(this.versioning, formatSupport.versioning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dependencies, distributions, fileLists, metadata, versioning);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormatSupport {\n");
    
    sb.append("    dependencies: ").append(toIndentedString(dependencies)).append("\n");
    sb.append("    distributions: ").append(toIndentedString(distributions)).append("\n");
    sb.append("    fileLists: ").append(toIndentedString(fileLists)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    versioning: ").append(toIndentedString(versioning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

