/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cloudsmith.api.models.RepositoryGpgKey;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * RepositoryResponse
 */

public class RepositoryResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("cdn_url")
  private String cdnUrl = null;

  @SerializedName("content_kind")
  private String contentKind = "Standard";

  @SerializedName("contextual_auth_realm")
  private Boolean contextualAuthRealm = null;

  @SerializedName("copy_own")
  private Boolean copyOwn = null;

  @SerializedName("copy_packages")
  private String copyPackages = "Read";

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("default_privilege")
  private String defaultPrivilege = "None";

  @SerializedName("delete_own")
  private Boolean deleteOwn = null;

  @SerializedName("delete_packages")
  private String deletePackages = "Admin";

  @SerializedName("deleted_at")
  private OffsetDateTime deletedAt = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("distributes")
  private List<String> distributes = null;

  @SerializedName("docker_refresh_tokens_enabled")
  private Boolean dockerRefreshTokensEnabled = null;

  @SerializedName("gpg_keys")
  private List<RepositoryGpgKey> gpgKeys = null;

  @SerializedName("index_files")
  private Boolean indexFiles = null;

  @SerializedName("is_open_source")
  private Boolean isOpenSource = null;

  @SerializedName("is_private")
  private Boolean isPrivate = null;

  @SerializedName("is_public")
  private Boolean isPublic = null;

  @SerializedName("move_own")
  private Boolean moveOwn = null;

  @SerializedName("move_packages")
  private String movePackages = "Admin";

  @SerializedName("name")
  private String name = null;

  @SerializedName("namespace")
  private String namespace = null;

  @SerializedName("namespace_url")
  private String namespaceUrl = null;

  @SerializedName("num_downloads")
  private Integer numDownloads = null;

  @SerializedName("package_count")
  private Integer packageCount = null;

  @SerializedName("package_group_count")
  private Integer packageGroupCount = null;

  @SerializedName("proxy_npmjs")
  private Boolean proxyNpmjs = null;

  @SerializedName("proxy_pypi")
  private Boolean proxyPypi = null;

  @SerializedName("raw_package_index_enabled")
  private Boolean rawPackageIndexEnabled = null;

  @SerializedName("raw_package_index_signatures_enabled")
  private Boolean rawPackageIndexSignaturesEnabled = null;

  @SerializedName("replace_packages")
  private String replacePackages = "Write";

  @SerializedName("replace_packages_by_default")
  private Boolean replacePackagesByDefault = null;

  @SerializedName("repository_type")
  private Integer repositoryType = null;

  @SerializedName("repository_type_str")
  private String repositoryTypeStr = "Public";

  @SerializedName("resync_own")
  private Boolean resyncOwn = null;

  @SerializedName("resync_packages")
  private String resyncPackages = "Admin";

  @SerializedName("scan_own")
  private Boolean scanOwn = null;

  @SerializedName("scan_packages")
  private String scanPackages = "Read";

  @SerializedName("self_html_url")
  private String selfHtmlUrl = null;

  @SerializedName("self_url")
  private String selfUrl = null;

  @SerializedName("show_setup_all")
  private Boolean showSetupAll = null;

  @SerializedName("size")
  private Integer size = null;

  @SerializedName("size_str")
  private String sizeStr = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("slug_perm")
  private String slugPerm = null;

  @SerializedName("storage_region")
  private String storageRegion = "default";

  @SerializedName("strict_npm_validation")
  private Boolean strictNpmValidation = null;

  @SerializedName("use_debian_labels")
  private Boolean useDebianLabels = null;

  @SerializedName("use_default_cargo_upstream")
  private Boolean useDefaultCargoUpstream = null;

  @SerializedName("use_noarch_packages")
  private Boolean useNoarchPackages = null;

  @SerializedName("use_source_packages")
  private Boolean useSourcePackages = null;

  @SerializedName("use_vulnerability_scanning")
  private Boolean useVulnerabilityScanning = null;

  @SerializedName("user_entitlements_enabled")
  private Boolean userEntitlementsEnabled = null;

  @SerializedName("view_statistics")
  private String viewStatistics = "Read";

   /**
   * Base URL from which packages and other artifacts are downloaded.
   * @return cdnUrl
  **/
  @ApiModelProperty(value = "Base URL from which packages and other artifacts are downloaded.")
  public String getCdnUrl() {
    return cdnUrl;
  }

  public RepositoryResponse contentKind(String contentKind) {
    this.contentKind = contentKind;
    return this;
  }

   /**
   * The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.
   * @return contentKind
  **/
  @ApiModelProperty(value = "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.")
  public String getContentKind() {
    return contentKind;
  }

  public void setContentKind(String contentKind) {
    this.contentKind = contentKind;
  }

  public RepositoryResponse contextualAuthRealm(Boolean contextualAuthRealm) {
    this.contextualAuthRealm = contextualAuthRealm;
    return this;
  }

   /**
   * If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the &#39;WWW-Authenticate&#39; header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.
   * @return contextualAuthRealm
  **/
  @ApiModelProperty(value = "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.")
  public Boolean isContextualAuthRealm() {
    return contextualAuthRealm;
  }

  public void setContextualAuthRealm(Boolean contextualAuthRealm) {
    this.contextualAuthRealm = contextualAuthRealm;
  }

  public RepositoryResponse copyOwn(Boolean copyOwn) {
    this.copyOwn = copyOwn;
    return this;
  }

   /**
   * If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the &#39;Access Controls&#39; section of the repository, and any inherited from the org.
   * @return copyOwn
  **/
  @ApiModelProperty(value = "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.")
  public Boolean isCopyOwn() {
    return copyOwn;
  }

  public void setCopyOwn(Boolean copyOwn) {
    this.copyOwn = copyOwn;
  }

  public RepositoryResponse copyPackages(String copyPackages) {
    this.copyPackages = copyPackages;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.
   * @return copyPackages
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.")
  public String getCopyPackages() {
    return copyPackages;
  }

  public void setCopyPackages(String copyPackages) {
    this.copyPackages = copyPackages;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public RepositoryResponse defaultPrivilege(String defaultPrivilege) {
    this.defaultPrivilege = defaultPrivilege;
    return this;
  }

   /**
   * This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.
   * @return defaultPrivilege
  **/
  @ApiModelProperty(value = "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.")
  public String getDefaultPrivilege() {
    return defaultPrivilege;
  }

  public void setDefaultPrivilege(String defaultPrivilege) {
    this.defaultPrivilege = defaultPrivilege;
  }

  public RepositoryResponse deleteOwn(Boolean deleteOwn) {
    this.deleteOwn = deleteOwn;
    return this;
  }

   /**
   * If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the &#39;Access Controls&#39; section of the repository, and any inherited from the org.
   * @return deleteOwn
  **/
  @ApiModelProperty(value = "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.")
  public Boolean isDeleteOwn() {
    return deleteOwn;
  }

  public void setDeleteOwn(Boolean deleteOwn) {
    this.deleteOwn = deleteOwn;
  }

  public RepositoryResponse deletePackages(String deletePackages) {
    this.deletePackages = deletePackages;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.
   * @return deletePackages
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.")
  public String getDeletePackages() {
    return deletePackages;
  }

  public void setDeletePackages(String deletePackages) {
    this.deletePackages = deletePackages;
  }

   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public RepositoryResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the repository&#39;s purpose/contents.
   * @return description
  **/
  @ApiModelProperty(value = "A description of the repository's purpose/contents.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public RepositoryResponse distributes(List<String> distributes) {
    this.distributes = distributes;
    return this;
  }

  public RepositoryResponse addDistributesItem(String distributesItem) {
    if (this.distributes == null) {
      this.distributes = new ArrayList<>();
    }
    this.distributes.add(distributesItem);
    return this;
  }

   /**
   * The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.
   * @return distributes
  **/
  @ApiModelProperty(value = "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.")
  public List<String> getDistributes() {
    return distributes;
  }

  public void setDistributes(List<String> distributes) {
    this.distributes = distributes;
  }

  public RepositoryResponse dockerRefreshTokensEnabled(Boolean dockerRefreshTokensEnabled) {
    this.dockerRefreshTokensEnabled = dockerRefreshTokensEnabled;
    return this;
  }

   /**
   * If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.
   * @return dockerRefreshTokensEnabled
  **/
  @ApiModelProperty(value = "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.")
  public Boolean isDockerRefreshTokensEnabled() {
    return dockerRefreshTokensEnabled;
  }

  public void setDockerRefreshTokensEnabled(Boolean dockerRefreshTokensEnabled) {
    this.dockerRefreshTokensEnabled = dockerRefreshTokensEnabled;
  }

   /**
   * Get gpgKeys
   * @return gpgKeys
  **/
  @Valid
  @ApiModelProperty(value = "")
  public List<RepositoryGpgKey> getGpgKeys() {
    return gpgKeys;
  }

  public RepositoryResponse indexFiles(Boolean indexFiles) {
    this.indexFiles = indexFiles;
    return this;
  }

   /**
   * If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
   * @return indexFiles
  **/
  @ApiModelProperty(value = "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.")
  public Boolean isIndexFiles() {
    return indexFiles;
  }

  public void setIndexFiles(Boolean indexFiles) {
    this.indexFiles = indexFiles;
  }

   /**
   * Get isOpenSource
   * @return isOpenSource
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsOpenSource() {
    return isOpenSource;
  }

   /**
   * Get isPrivate
   * @return isPrivate
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsPrivate() {
    return isPrivate;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsPublic() {
    return isPublic;
  }

  public RepositoryResponse moveOwn(Boolean moveOwn) {
    this.moveOwn = moveOwn;
    return this;
  }

   /**
   * If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the &#39;Access Controls&#39; section of the repository, and any inherited from the org.
   * @return moveOwn
  **/
  @ApiModelProperty(value = "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.")
  public Boolean isMoveOwn() {
    return moveOwn;
  }

  public void setMoveOwn(Boolean moveOwn) {
    this.moveOwn = moveOwn;
  }

  public RepositoryResponse movePackages(String movePackages) {
    this.movePackages = movePackages;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.
   * @return movePackages
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.")
  public String getMovePackages() {
    return movePackages;
  }

  public void setMovePackages(String movePackages) {
    this.movePackages = movePackages;
  }

  public RepositoryResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A descriptive name for the repository.
   * @return name
  **/
  @NotNull
 @Pattern(regexp="^\\w[\\w \\-'\\./]+$") @Size(min=1,max=50)  @ApiModelProperty(required = true, value = "A descriptive name for the repository.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Namespace to which this repository belongs.
   * @return namespace
  **/
 @Pattern(regexp="^[-a-zA-Z0-9_]+$")  @ApiModelProperty(value = "Namespace to which this repository belongs.")
  public String getNamespace() {
    return namespace;
  }

   /**
   * API endpoint where data about this namespace can be retrieved.
   * @return namespaceUrl
  **/
  @ApiModelProperty(value = "API endpoint where data about this namespace can be retrieved.")
  public String getNamespaceUrl() {
    return namespaceUrl;
  }

   /**
   * The number of downloads for packages in the repository.
   * @return numDownloads
  **/
  @ApiModelProperty(value = "The number of downloads for packages in the repository.")
  public Integer getNumDownloads() {
    return numDownloads;
  }

   /**
   * The number of packages in the repository.
   * @return packageCount
  **/
  @ApiModelProperty(value = "The number of packages in the repository.")
  public Integer getPackageCount() {
    return packageCount;
  }

   /**
   * The number of groups in the repository.
   * @return packageGroupCount
  **/
  @ApiModelProperty(value = "The number of groups in the repository.")
  public Integer getPackageGroupCount() {
    return packageGroupCount;
  }

  public RepositoryResponse proxyNpmjs(Boolean proxyNpmjs) {
    this.proxyNpmjs = proxyNpmjs;
    return this;
  }

   /**
   * If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.
   * @return proxyNpmjs
  **/
  @ApiModelProperty(value = "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.")
  public Boolean isProxyNpmjs() {
    return proxyNpmjs;
  }

  public void setProxyNpmjs(Boolean proxyNpmjs) {
    this.proxyNpmjs = proxyNpmjs;
  }

  public RepositoryResponse proxyPypi(Boolean proxyPypi) {
    this.proxyPypi = proxyPypi;
    return this;
  }

   /**
   * If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.
   * @return proxyPypi
  **/
  @ApiModelProperty(value = "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.")
  public Boolean isProxyPypi() {
    return proxyPypi;
  }

  public void setProxyPypi(Boolean proxyPypi) {
    this.proxyPypi = proxyPypi;
  }

  public RepositoryResponse rawPackageIndexEnabled(Boolean rawPackageIndexEnabled) {
    this.rawPackageIndexEnabled = rawPackageIndexEnabled;
    return this;
  }

   /**
   * If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.
   * @return rawPackageIndexEnabled
  **/
  @ApiModelProperty(value = "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.")
  public Boolean isRawPackageIndexEnabled() {
    return rawPackageIndexEnabled;
  }

  public void setRawPackageIndexEnabled(Boolean rawPackageIndexEnabled) {
    this.rawPackageIndexEnabled = rawPackageIndexEnabled;
  }

  public RepositoryResponse rawPackageIndexSignaturesEnabled(Boolean rawPackageIndexSignaturesEnabled) {
    this.rawPackageIndexSignaturesEnabled = rawPackageIndexSignaturesEnabled;
    return this;
  }

   /**
   * If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.
   * @return rawPackageIndexSignaturesEnabled
  **/
  @ApiModelProperty(value = "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.")
  public Boolean isRawPackageIndexSignaturesEnabled() {
    return rawPackageIndexSignaturesEnabled;
  }

  public void setRawPackageIndexSignaturesEnabled(Boolean rawPackageIndexSignaturesEnabled) {
    this.rawPackageIndexSignaturesEnabled = rawPackageIndexSignaturesEnabled;
  }

  public RepositoryResponse replacePackages(String replacePackages) {
    this.replacePackages = replacePackages;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.
   * @return replacePackages
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.")
  public String getReplacePackages() {
    return replacePackages;
  }

  public void setReplacePackages(String replacePackages) {
    this.replacePackages = replacePackages;
  }

  public RepositoryResponse replacePackagesByDefault(Boolean replacePackagesByDefault) {
    this.replacePackagesByDefault = replacePackagesByDefault;
    return this;
  }

   /**
   * If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don&#39;t own.
   * @return replacePackagesByDefault
  **/
  @ApiModelProperty(value = "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.")
  public Boolean isReplacePackagesByDefault() {
    return replacePackagesByDefault;
  }

  public void setReplacePackagesByDefault(Boolean replacePackagesByDefault) {
    this.replacePackagesByDefault = replacePackagesByDefault;
  }

   /**
   * The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.
   * @return repositoryType
  **/
  @ApiModelProperty(value = "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.")
  public Integer getRepositoryType() {
    return repositoryType;
  }

  public RepositoryResponse repositoryTypeStr(String repositoryTypeStr) {
    this.repositoryTypeStr = repositoryTypeStr;
    return this;
  }

   /**
   * The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.
   * @return repositoryTypeStr
  **/
  @ApiModelProperty(value = "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.")
  public String getRepositoryTypeStr() {
    return repositoryTypeStr;
  }

  public void setRepositoryTypeStr(String repositoryTypeStr) {
    this.repositoryTypeStr = repositoryTypeStr;
  }

  public RepositoryResponse resyncOwn(Boolean resyncOwn) {
    this.resyncOwn = resyncOwn;
    return this;
  }

   /**
   * If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the &#39;Access Controls&#39; section of the repository, and any inherited from the org.
   * @return resyncOwn
  **/
  @ApiModelProperty(value = "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.")
  public Boolean isResyncOwn() {
    return resyncOwn;
  }

  public void setResyncOwn(Boolean resyncOwn) {
    this.resyncOwn = resyncOwn;
  }

  public RepositoryResponse resyncPackages(String resyncPackages) {
    this.resyncPackages = resyncPackages;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.
   * @return resyncPackages
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.")
  public String getResyncPackages() {
    return resyncPackages;
  }

  public void setResyncPackages(String resyncPackages) {
    this.resyncPackages = resyncPackages;
  }

  public RepositoryResponse scanOwn(Boolean scanOwn) {
    this.scanOwn = scanOwn;
    return this;
  }

   /**
   * If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the &#39;Access Controls&#39; section of the repository, and any inherited from the org.
   * @return scanOwn
  **/
  @ApiModelProperty(value = "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.")
  public Boolean isScanOwn() {
    return scanOwn;
  }

  public void setScanOwn(Boolean scanOwn) {
    this.scanOwn = scanOwn;
  }

  public RepositoryResponse scanPackages(String scanPackages) {
    this.scanPackages = scanPackages;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.
   * @return scanPackages
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.")
  public String getScanPackages() {
    return scanPackages;
  }

  public void setScanPackages(String scanPackages) {
    this.scanPackages = scanPackages;
  }

   /**
   * Website URL for this repository.
   * @return selfHtmlUrl
  **/
 @Size(min=1)  @ApiModelProperty(value = "Website URL for this repository.")
  public String getSelfHtmlUrl() {
    return selfHtmlUrl;
  }

   /**
   * API endpoint where data about this repository can be retrieved.
   * @return selfUrl
  **/
  @ApiModelProperty(value = "API endpoint where data about this repository can be retrieved.")
  public String getSelfUrl() {
    return selfUrl;
  }

  public RepositoryResponse showSetupAll(Boolean showSetupAll) {
    this.showSetupAll = showSetupAll;
    return this;
  }

   /**
   * If checked, the Set Me Up help for all formats will always be shown, even if you don&#39;t have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.
   * @return showSetupAll
  **/
  @ApiModelProperty(value = "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.")
  public Boolean isShowSetupAll() {
    return showSetupAll;
  }

  public void setShowSetupAll(Boolean showSetupAll) {
    this.showSetupAll = showSetupAll;
  }

   /**
   * The calculated size of the repository.
   * @return size
  **/
  @ApiModelProperty(value = "The calculated size of the repository.")
  public Integer getSize() {
    return size;
  }

   /**
   * The calculated size of the repository (human readable).
   * @return sizeStr
  **/
  @ApiModelProperty(value = "The calculated size of the repository (human readable).")
  public String getSizeStr() {
    return sizeStr;
  }

  public RepositoryResponse slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * The slug identifies the repository in URIs.
   * @return slug
  **/
  @ApiModelProperty(value = "The slug identifies the repository in URIs.")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

   /**
   * The slug_perm immutably identifies the repository. It will never change once a repository has been created.
   * @return slugPerm
  **/
 @Pattern(regexp="^[-a-zA-Z0-9_]+$") @Size(min=1)  @ApiModelProperty(value = "The slug_perm immutably identifies the repository. It will never change once a repository has been created.")
  public String getSlugPerm() {
    return slugPerm;
  }

   /**
   * The Cloudsmith region in which package files are stored.
   * @return storageRegion
  **/
  @ApiModelProperty(value = "The Cloudsmith region in which package files are stored.")
  public String getStorageRegion() {
    return storageRegion;
  }

  public RepositoryResponse strictNpmValidation(Boolean strictNpmValidation) {
    this.strictNpmValidation = strictNpmValidation;
    return this;
  }

   /**
   * If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this off if you have packages that are old or otherwise mildly off-spec, but we can&#39;t guarantee the packages will work with npm-cli or other tooling correctly. Turn off at your own risk!
   * @return strictNpmValidation
  **/
  @ApiModelProperty(value = "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this off if you have packages that are old or otherwise mildly off-spec, but we can't guarantee the packages will work with npm-cli or other tooling correctly. Turn off at your own risk!")
  public Boolean isStrictNpmValidation() {
    return strictNpmValidation;
  }

  public void setStrictNpmValidation(Boolean strictNpmValidation) {
    this.strictNpmValidation = strictNpmValidation;
  }

  public RepositoryResponse useDebianLabels(Boolean useDebianLabels) {
    this.useDebianLabels = useDebianLabels;
    return this;
  }

   /**
   * If checked, a &#39;Label&#39; field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of &#39;source&#x3D;t-&lt;identifier&gt;&#39;; or &#39;source&#x3D;none&#39; if no token was used. You can use this to help with pinning.
   * @return useDebianLabels
  **/
  @ApiModelProperty(value = "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-<identifier>'; or 'source=none' if no token was used. You can use this to help with pinning.")
  public Boolean isUseDebianLabels() {
    return useDebianLabels;
  }

  public void setUseDebianLabels(Boolean useDebianLabels) {
    this.useDebianLabels = useDebianLabels;
  }

  public RepositoryResponse useDefaultCargoUpstream(Boolean useDefaultCargoUpstream) {
    this.useDefaultCargoUpstream = useDefaultCargoUpstream;
    return this;
  }

   /**
   * If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \&quot;registry\&quot; will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \&quot;registry\&quot; values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.
   * @return useDefaultCargoUpstream
  **/
  @ApiModelProperty(value = "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.")
  public Boolean isUseDefaultCargoUpstream() {
    return useDefaultCargoUpstream;
  }

  public void setUseDefaultCargoUpstream(Boolean useDefaultCargoUpstream) {
    this.useDefaultCargoUpstream = useDefaultCargoUpstream;
  }

  public RepositoryResponse useNoarchPackages(Boolean useNoarchPackages) {
    this.useNoarchPackages = useNoarchPackages;
    return this;
  }

   /**
   * If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).
   * @return useNoarchPackages
  **/
  @ApiModelProperty(value = "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).")
  public Boolean isUseNoarchPackages() {
    return useNoarchPackages;
  }

  public void setUseNoarchPackages(Boolean useNoarchPackages) {
    this.useNoarchPackages = useNoarchPackages;
  }

  public RepositoryResponse useSourcePackages(Boolean useSourcePackages) {
    this.useSourcePackages = useSourcePackages;
    return this;
  }

   /**
   * If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.
   * @return useSourcePackages
  **/
  @ApiModelProperty(value = "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.")
  public Boolean isUseSourcePackages() {
    return useSourcePackages;
  }

  public void setUseSourcePackages(Boolean useSourcePackages) {
    this.useSourcePackages = useSourcePackages;
  }

  public RepositoryResponse useVulnerabilityScanning(Boolean useVulnerabilityScanning) {
    this.useVulnerabilityScanning = useVulnerabilityScanning;
    return this;
  }

   /**
   * If checked, vulnerability scanning will be enabled for all supported packages within this repository.
   * @return useVulnerabilityScanning
  **/
  @ApiModelProperty(value = "If checked, vulnerability scanning will be enabled for all supported packages within this repository.")
  public Boolean isUseVulnerabilityScanning() {
    return useVulnerabilityScanning;
  }

  public void setUseVulnerabilityScanning(Boolean useVulnerabilityScanning) {
    this.useVulnerabilityScanning = useVulnerabilityScanning;
  }

  public RepositoryResponse userEntitlementsEnabled(Boolean userEntitlementsEnabled) {
    this.userEntitlementsEnabled = userEntitlementsEnabled;
    return this;
  }

   /**
   * If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.
   * @return userEntitlementsEnabled
  **/
  @ApiModelProperty(value = "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.")
  public Boolean isUserEntitlementsEnabled() {
    return userEntitlementsEnabled;
  }

  public void setUserEntitlementsEnabled(Boolean userEntitlementsEnabled) {
    this.userEntitlementsEnabled = userEntitlementsEnabled;
  }

  public RepositoryResponse viewStatistics(String viewStatistics) {
    this.viewStatistics = viewStatistics;
    return this;
  }

   /**
   * This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won&#39;t be able to view any statistics, either via the UI, API or CLI.
   * @return viewStatistics
  **/
  @ApiModelProperty(value = "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.")
  public String getViewStatistics() {
    return viewStatistics;
  }

  public void setViewStatistics(String viewStatistics) {
    this.viewStatistics = viewStatistics;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryResponse repositoryResponse = (RepositoryResponse) o;
    return Objects.equals(this.cdnUrl, repositoryResponse.cdnUrl) &&
        Objects.equals(this.contentKind, repositoryResponse.contentKind) &&
        Objects.equals(this.contextualAuthRealm, repositoryResponse.contextualAuthRealm) &&
        Objects.equals(this.copyOwn, repositoryResponse.copyOwn) &&
        Objects.equals(this.copyPackages, repositoryResponse.copyPackages) &&
        Objects.equals(this.createdAt, repositoryResponse.createdAt) &&
        Objects.equals(this.defaultPrivilege, repositoryResponse.defaultPrivilege) &&
        Objects.equals(this.deleteOwn, repositoryResponse.deleteOwn) &&
        Objects.equals(this.deletePackages, repositoryResponse.deletePackages) &&
        Objects.equals(this.deletedAt, repositoryResponse.deletedAt) &&
        Objects.equals(this.description, repositoryResponse.description) &&
        Objects.equals(this.distributes, repositoryResponse.distributes) &&
        Objects.equals(this.dockerRefreshTokensEnabled, repositoryResponse.dockerRefreshTokensEnabled) &&
        Objects.equals(this.gpgKeys, repositoryResponse.gpgKeys) &&
        Objects.equals(this.indexFiles, repositoryResponse.indexFiles) &&
        Objects.equals(this.isOpenSource, repositoryResponse.isOpenSource) &&
        Objects.equals(this.isPrivate, repositoryResponse.isPrivate) &&
        Objects.equals(this.isPublic, repositoryResponse.isPublic) &&
        Objects.equals(this.moveOwn, repositoryResponse.moveOwn) &&
        Objects.equals(this.movePackages, repositoryResponse.movePackages) &&
        Objects.equals(this.name, repositoryResponse.name) &&
        Objects.equals(this.namespace, repositoryResponse.namespace) &&
        Objects.equals(this.namespaceUrl, repositoryResponse.namespaceUrl) &&
        Objects.equals(this.numDownloads, repositoryResponse.numDownloads) &&
        Objects.equals(this.packageCount, repositoryResponse.packageCount) &&
        Objects.equals(this.packageGroupCount, repositoryResponse.packageGroupCount) &&
        Objects.equals(this.proxyNpmjs, repositoryResponse.proxyNpmjs) &&
        Objects.equals(this.proxyPypi, repositoryResponse.proxyPypi) &&
        Objects.equals(this.rawPackageIndexEnabled, repositoryResponse.rawPackageIndexEnabled) &&
        Objects.equals(this.rawPackageIndexSignaturesEnabled, repositoryResponse.rawPackageIndexSignaturesEnabled) &&
        Objects.equals(this.replacePackages, repositoryResponse.replacePackages) &&
        Objects.equals(this.replacePackagesByDefault, repositoryResponse.replacePackagesByDefault) &&
        Objects.equals(this.repositoryType, repositoryResponse.repositoryType) &&
        Objects.equals(this.repositoryTypeStr, repositoryResponse.repositoryTypeStr) &&
        Objects.equals(this.resyncOwn, repositoryResponse.resyncOwn) &&
        Objects.equals(this.resyncPackages, repositoryResponse.resyncPackages) &&
        Objects.equals(this.scanOwn, repositoryResponse.scanOwn) &&
        Objects.equals(this.scanPackages, repositoryResponse.scanPackages) &&
        Objects.equals(this.selfHtmlUrl, repositoryResponse.selfHtmlUrl) &&
        Objects.equals(this.selfUrl, repositoryResponse.selfUrl) &&
        Objects.equals(this.showSetupAll, repositoryResponse.showSetupAll) &&
        Objects.equals(this.size, repositoryResponse.size) &&
        Objects.equals(this.sizeStr, repositoryResponse.sizeStr) &&
        Objects.equals(this.slug, repositoryResponse.slug) &&
        Objects.equals(this.slugPerm, repositoryResponse.slugPerm) &&
        Objects.equals(this.storageRegion, repositoryResponse.storageRegion) &&
        Objects.equals(this.strictNpmValidation, repositoryResponse.strictNpmValidation) &&
        Objects.equals(this.useDebianLabels, repositoryResponse.useDebianLabels) &&
        Objects.equals(this.useDefaultCargoUpstream, repositoryResponse.useDefaultCargoUpstream) &&
        Objects.equals(this.useNoarchPackages, repositoryResponse.useNoarchPackages) &&
        Objects.equals(this.useSourcePackages, repositoryResponse.useSourcePackages) &&
        Objects.equals(this.useVulnerabilityScanning, repositoryResponse.useVulnerabilityScanning) &&
        Objects.equals(this.userEntitlementsEnabled, repositoryResponse.userEntitlementsEnabled) &&
        Objects.equals(this.viewStatistics, repositoryResponse.viewStatistics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cdnUrl, contentKind, contextualAuthRealm, copyOwn, copyPackages, createdAt, defaultPrivilege, deleteOwn, deletePackages, deletedAt, description, distributes, dockerRefreshTokensEnabled, gpgKeys, indexFiles, isOpenSource, isPrivate, isPublic, moveOwn, movePackages, name, namespace, namespaceUrl, numDownloads, packageCount, packageGroupCount, proxyNpmjs, proxyPypi, rawPackageIndexEnabled, rawPackageIndexSignaturesEnabled, replacePackages, replacePackagesByDefault, repositoryType, repositoryTypeStr, resyncOwn, resyncPackages, scanOwn, scanPackages, selfHtmlUrl, selfUrl, showSetupAll, size, sizeStr, slug, slugPerm, storageRegion, strictNpmValidation, useDebianLabels, useDefaultCargoUpstream, useNoarchPackages, useSourcePackages, useVulnerabilityScanning, userEntitlementsEnabled, viewStatistics);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryResponse {\n");
    
    sb.append("    cdnUrl: ").append(toIndentedString(cdnUrl)).append("\n");
    sb.append("    contentKind: ").append(toIndentedString(contentKind)).append("\n");
    sb.append("    contextualAuthRealm: ").append(toIndentedString(contextualAuthRealm)).append("\n");
    sb.append("    copyOwn: ").append(toIndentedString(copyOwn)).append("\n");
    sb.append("    copyPackages: ").append(toIndentedString(copyPackages)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultPrivilege: ").append(toIndentedString(defaultPrivilege)).append("\n");
    sb.append("    deleteOwn: ").append(toIndentedString(deleteOwn)).append("\n");
    sb.append("    deletePackages: ").append(toIndentedString(deletePackages)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    distributes: ").append(toIndentedString(distributes)).append("\n");
    sb.append("    dockerRefreshTokensEnabled: ").append(toIndentedString(dockerRefreshTokensEnabled)).append("\n");
    sb.append("    gpgKeys: ").append(toIndentedString(gpgKeys)).append("\n");
    sb.append("    indexFiles: ").append(toIndentedString(indexFiles)).append("\n");
    sb.append("    isOpenSource: ").append(toIndentedString(isOpenSource)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    moveOwn: ").append(toIndentedString(moveOwn)).append("\n");
    sb.append("    movePackages: ").append(toIndentedString(movePackages)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    namespaceUrl: ").append(toIndentedString(namespaceUrl)).append("\n");
    sb.append("    numDownloads: ").append(toIndentedString(numDownloads)).append("\n");
    sb.append("    packageCount: ").append(toIndentedString(packageCount)).append("\n");
    sb.append("    packageGroupCount: ").append(toIndentedString(packageGroupCount)).append("\n");
    sb.append("    proxyNpmjs: ").append(toIndentedString(proxyNpmjs)).append("\n");
    sb.append("    proxyPypi: ").append(toIndentedString(proxyPypi)).append("\n");
    sb.append("    rawPackageIndexEnabled: ").append(toIndentedString(rawPackageIndexEnabled)).append("\n");
    sb.append("    rawPackageIndexSignaturesEnabled: ").append(toIndentedString(rawPackageIndexSignaturesEnabled)).append("\n");
    sb.append("    replacePackages: ").append(toIndentedString(replacePackages)).append("\n");
    sb.append("    replacePackagesByDefault: ").append(toIndentedString(replacePackagesByDefault)).append("\n");
    sb.append("    repositoryType: ").append(toIndentedString(repositoryType)).append("\n");
    sb.append("    repositoryTypeStr: ").append(toIndentedString(repositoryTypeStr)).append("\n");
    sb.append("    resyncOwn: ").append(toIndentedString(resyncOwn)).append("\n");
    sb.append("    resyncPackages: ").append(toIndentedString(resyncPackages)).append("\n");
    sb.append("    scanOwn: ").append(toIndentedString(scanOwn)).append("\n");
    sb.append("    scanPackages: ").append(toIndentedString(scanPackages)).append("\n");
    sb.append("    selfHtmlUrl: ").append(toIndentedString(selfHtmlUrl)).append("\n");
    sb.append("    selfUrl: ").append(toIndentedString(selfUrl)).append("\n");
    sb.append("    showSetupAll: ").append(toIndentedString(showSetupAll)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    sizeStr: ").append(toIndentedString(sizeStr)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    slugPerm: ").append(toIndentedString(slugPerm)).append("\n");
    sb.append("    storageRegion: ").append(toIndentedString(storageRegion)).append("\n");
    sb.append("    strictNpmValidation: ").append(toIndentedString(strictNpmValidation)).append("\n");
    sb.append("    useDebianLabels: ").append(toIndentedString(useDebianLabels)).append("\n");
    sb.append("    useDefaultCargoUpstream: ").append(toIndentedString(useDefaultCargoUpstream)).append("\n");
    sb.append("    useNoarchPackages: ").append(toIndentedString(useNoarchPackages)).append("\n");
    sb.append("    useSourcePackages: ").append(toIndentedString(useSourcePackages)).append("\n");
    sb.append("    useVulnerabilityScanning: ").append(toIndentedString(useVulnerabilityScanning)).append("\n");
    sb.append("    userEntitlementsEnabled: ").append(toIndentedString(userEntitlementsEnabled)).append("\n");
    sb.append("    viewStatistics: ").append(toIndentedString(viewStatistics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

