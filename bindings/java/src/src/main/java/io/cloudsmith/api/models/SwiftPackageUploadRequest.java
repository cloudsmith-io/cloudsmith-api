/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * SwiftPackageUploadRequest
 */

public class SwiftPackageUploadRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("author_name")
  private String authorName = null;

  @SerializedName("author_org")
  private String authorOrg = null;

  @SerializedName("license_url")
  private String licenseUrl = null;

  @SerializedName("package_file")
  private String packageFile = null;

  @SerializedName("readme_url")
  private String readmeUrl = null;

  @SerializedName("repository_url")
  private String repositoryUrl = null;

  @SerializedName("republish")
  private Boolean republish = null;

  @SerializedName("scope")
  private String scope = null;

  @SerializedName("tags")
  private String tags = null;

  @SerializedName("version")
  private String version = null;

  public SwiftPackageUploadRequest authorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

   /**
   * The name of the author of the package.
   * @return authorName
  **/
 @Size(min=1)  @ApiModelProperty(value = "The name of the author of the package.")
  public String getAuthorName() {
    return authorName;
  }

  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }

  public SwiftPackageUploadRequest authorOrg(String authorOrg) {
    this.authorOrg = authorOrg;
    return this;
  }

   /**
   * The organization of the author.
   * @return authorOrg
  **/
 @Size(min=1)  @ApiModelProperty(value = "The organization of the author.")
  public String getAuthorOrg() {
    return authorOrg;
  }

  public void setAuthorOrg(String authorOrg) {
    this.authorOrg = authorOrg;
  }

  public SwiftPackageUploadRequest licenseUrl(String licenseUrl) {
    this.licenseUrl = licenseUrl;
    return this;
  }

   /**
   * The license URL of this package.
   * @return licenseUrl
  **/
 @Size(max=200)  @ApiModelProperty(value = "The license URL of this package.")
  public String getLicenseUrl() {
    return licenseUrl;
  }

  public void setLicenseUrl(String licenseUrl) {
    this.licenseUrl = licenseUrl;
  }

  public SwiftPackageUploadRequest packageFile(String packageFile) {
    this.packageFile = packageFile;
    return this;
  }

   /**
   * The primary file for the package.
   * @return packageFile
  **/
  @NotNull
 @Size(min=1)  @ApiModelProperty(required = true, value = "The primary file for the package.")
  public String getPackageFile() {
    return packageFile;
  }

  public void setPackageFile(String packageFile) {
    this.packageFile = packageFile;
  }

  public SwiftPackageUploadRequest readmeUrl(String readmeUrl) {
    this.readmeUrl = readmeUrl;
    return this;
  }

   /**
   * The URL of the readme for the package.
   * @return readmeUrl
  **/
 @Size(min=1)  @ApiModelProperty(value = "The URL of the readme for the package.")
  public String getReadmeUrl() {
    return readmeUrl;
  }

  public void setReadmeUrl(String readmeUrl) {
    this.readmeUrl = readmeUrl;
  }

  public SwiftPackageUploadRequest repositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
    return this;
  }

   /**
   * The URL of the SCM repository for the package.
   * @return repositoryUrl
  **/
 @Size(min=1)  @ApiModelProperty(value = "The URL of the SCM repository for the package.")
  public String getRepositoryUrl() {
    return repositoryUrl;
  }

  public void setRepositoryUrl(String repositoryUrl) {
    this.repositoryUrl = repositoryUrl;
  }

  public SwiftPackageUploadRequest republish(Boolean republish) {
    this.republish = republish;
    return this;
  }

   /**
   * If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
   * @return republish
  **/
  @ApiModelProperty(value = "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.")
  public Boolean isRepublish() {
    return republish;
  }

  public void setRepublish(Boolean republish) {
    this.republish = republish;
  }

  public SwiftPackageUploadRequest scope(String scope) {
    this.scope = scope;
    return this;
  }

   /**
   * A scope provides a namespace for related packages within the package registry.
   * @return scope
  **/
  @NotNull
 @Size(min=1,max=39)  @ApiModelProperty(required = true, value = "A scope provides a namespace for related packages within the package registry.")
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }

  public SwiftPackageUploadRequest tags(String tags) {
    this.tags = tags;
    return this;
  }

   /**
   * A comma-separated values list of tags to add to the package.
   * @return tags
  **/
 @Size(min=1,max=1024)  @ApiModelProperty(value = "A comma-separated values list of tags to add to the package.")
  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }

  public SwiftPackageUploadRequest version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The raw version for this package.
   * @return version
  **/
  @NotNull
 @Size(max=128)  @ApiModelProperty(required = true, value = "The raw version for this package.")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwiftPackageUploadRequest swiftPackageUploadRequest = (SwiftPackageUploadRequest) o;
    return Objects.equals(this.authorName, swiftPackageUploadRequest.authorName) &&
        Objects.equals(this.authorOrg, swiftPackageUploadRequest.authorOrg) &&
        Objects.equals(this.licenseUrl, swiftPackageUploadRequest.licenseUrl) &&
        Objects.equals(this.packageFile, swiftPackageUploadRequest.packageFile) &&
        Objects.equals(this.readmeUrl, swiftPackageUploadRequest.readmeUrl) &&
        Objects.equals(this.repositoryUrl, swiftPackageUploadRequest.repositoryUrl) &&
        Objects.equals(this.republish, swiftPackageUploadRequest.republish) &&
        Objects.equals(this.scope, swiftPackageUploadRequest.scope) &&
        Objects.equals(this.tags, swiftPackageUploadRequest.tags) &&
        Objects.equals(this.version, swiftPackageUploadRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorName, authorOrg, licenseUrl, packageFile, readmeUrl, repositoryUrl, republish, scope, tags, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwiftPackageUploadRequest {\n");
    
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    authorOrg: ").append(toIndentedString(authorOrg)).append("\n");
    sb.append("    licenseUrl: ").append(toIndentedString(licenseUrl)).append("\n");
    sb.append("    packageFile: ").append(toIndentedString(packageFile)).append("\n");
    sb.append("    readmeUrl: ").append(toIndentedString(readmeUrl)).append("\n");
    sb.append("    repositoryUrl: ").append(toIndentedString(repositoryUrl)).append("\n");
    sb.append("    republish: ").append(toIndentedString(republish)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

