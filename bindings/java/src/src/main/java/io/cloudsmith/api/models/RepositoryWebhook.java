/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.cloudsmith.api.models.WebhookTemplate;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * RepositoryWebhook
 */

public class RepositoryWebhook implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("created_by")
  private String createdBy = null;

  @SerializedName("created_by_url")
  private String createdByUrl = null;

  @SerializedName("disable_reason")
  private java.math.BigInteger disableReason = null;

  @SerializedName("disable_reason_str")
  private String disableReasonStr = null;

  /**
   * Gets or Sets events
   */
  @JsonAdapter(EventsEnum.Adapter.class)
  public enum EventsEnum {
    STAR("*"),
    
    PACKAGE_CREATED("package.created"),
    
    PACKAGE_DELETED("package.deleted"),
    
    PACKAGE_DOWNLOADED("package.downloaded"),
    
    PACKAGE_FAILED("package.failed"),
    
    PACKAGE_SECURITY_SCANNED("package.security_scanned"),
    
    PACKAGE_SYNCED("package.synced"),
    
    PACKAGE_SYNCING("package.syncing"),
    
    PACKAGE_TAGS_UPDATED("package.tags_updated");

    private String value;

    EventsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventsEnum fromValue(String text) {
      for (EventsEnum b : EventsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EventsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EventsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("events")
  private List<EventsEnum> events = new ArrayList<>();

  @SerializedName("identifier")
  private java.math.BigInteger identifier = null;

  @SerializedName("is_active")
  private Boolean isActive = null;

  @SerializedName("is_last_response_bad")
  private Boolean isLastResponseBad = null;

  @SerializedName("last_response_status")
  private java.math.BigInteger lastResponseStatus = null;

  @SerializedName("last_response_status_str")
  private String lastResponseStatusStr = null;

  @SerializedName("num_sent")
  private java.math.BigInteger numSent = null;

  @SerializedName("package_query")
  private String packageQuery = null;

  @SerializedName("request_body_format")
  private java.math.BigInteger requestBodyFormat = null;

  @SerializedName("request_body_format_str")
  private String requestBodyFormatStr = null;

  @SerializedName("request_body_template_format")
  private java.math.BigInteger requestBodyTemplateFormat = null;

  @SerializedName("request_body_template_format_str")
  private String requestBodyTemplateFormatStr = null;

  @SerializedName("request_content_type")
  private String requestContentType = null;

  @SerializedName("secret_header")
  private String secretHeader = null;

  @SerializedName("self_url")
  private String selfUrl = null;

  @SerializedName("slug_perm")
  private String slugPerm = null;

  @SerializedName("target_url")
  private String targetUrl = null;

  @SerializedName("templates")
  private List<WebhookTemplate> templates = new ArrayList<>();

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("updated_by")
  private String updatedBy = null;

  @SerializedName("updated_by_url")
  private String updatedByUrl = null;

  @SerializedName("verify_ssl")
  private Boolean verifySsl = null;

   /**
   * Get createdAt
   * @return createdAt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getCreatedBy() {
    return createdBy;
  }

   /**
   * Get createdByUrl
   * @return createdByUrl
  **/
  @ApiModelProperty(value = "")
  public String getCreatedByUrl() {
    return createdByUrl;
  }

   /**
   * Get disableReason
   * @return disableReason
  **/
  @ApiModelProperty(value = "")
  public java.math.BigInteger getDisableReason() {
    return disableReason;
  }

   /**
   * Get disableReasonStr
   * @return disableReasonStr
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getDisableReasonStr() {
    return disableReasonStr;
  }

  public RepositoryWebhook events(List<EventsEnum> events) {
    this.events = events;
    return this;
  }

  public RepositoryWebhook addEventsItem(EventsEnum eventsItem) {
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "")
  public List<EventsEnum> getEvents() {
    return events;
  }

  public void setEvents(List<EventsEnum> events) {
    this.events = events;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @ApiModelProperty(value = "")
  public java.math.BigInteger getIdentifier() {
    return identifier;
  }

  public RepositoryWebhook isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.
   * @return isActive
  **/
  @ApiModelProperty(value = "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.")
  public Boolean isIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

   /**
   * Get isLastResponseBad
   * @return isLastResponseBad
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsLastResponseBad() {
    return isLastResponseBad;
  }

   /**
   * Get lastResponseStatus
   * @return lastResponseStatus
  **/
  @ApiModelProperty(value = "")
  public java.math.BigInteger getLastResponseStatus() {
    return lastResponseStatus;
  }

   /**
   * Get lastResponseStatusStr
   * @return lastResponseStatusStr
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getLastResponseStatusStr() {
    return lastResponseStatusStr;
  }

   /**
   * Get numSent
   * @return numSent
  **/
  @ApiModelProperty(value = "")
  public java.math.BigInteger getNumSent() {
    return numSent;
  }

  public RepositoryWebhook packageQuery(String packageQuery) {
    this.packageQuery = packageQuery;
    return this;
  }

   /**
   * The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.
   * @return packageQuery
  **/
 @Size(max=1024)  @ApiModelProperty(value = "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.")
  public String getPackageQuery() {
    return packageQuery;
  }

  public void setPackageQuery(String packageQuery) {
    this.packageQuery = packageQuery;
  }

  public RepositoryWebhook requestBodyFormat(java.math.BigInteger requestBodyFormat) {
    this.requestBodyFormat = requestBodyFormat;
    return this;
  }

   /**
   * The format of the payloads for webhook requests.
   * @return requestBodyFormat
  **/
  @ApiModelProperty(value = "The format of the payloads for webhook requests.")
  public java.math.BigInteger getRequestBodyFormat() {
    return requestBodyFormat;
  }

  public void setRequestBodyFormat(java.math.BigInteger requestBodyFormat) {
    this.requestBodyFormat = requestBodyFormat;
  }

   /**
   * Get requestBodyFormatStr
   * @return requestBodyFormatStr
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getRequestBodyFormatStr() {
    return requestBodyFormatStr;
  }

  public RepositoryWebhook requestBodyTemplateFormat(java.math.BigInteger requestBodyTemplateFormat) {
    this.requestBodyTemplateFormat = requestBodyTemplateFormat;
    return this;
  }

   /**
   * The format of the payloads for webhook requests.
   * @return requestBodyTemplateFormat
  **/
  @ApiModelProperty(value = "The format of the payloads for webhook requests.")
  public java.math.BigInteger getRequestBodyTemplateFormat() {
    return requestBodyTemplateFormat;
  }

  public void setRequestBodyTemplateFormat(java.math.BigInteger requestBodyTemplateFormat) {
    this.requestBodyTemplateFormat = requestBodyTemplateFormat;
  }

   /**
   * Get requestBodyTemplateFormatStr
   * @return requestBodyTemplateFormatStr
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getRequestBodyTemplateFormatStr() {
    return requestBodyTemplateFormatStr;
  }

  public RepositoryWebhook requestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
    return this;
  }

   /**
   * The value that will be sent for the &#39;Content Type&#39; header. 
   * @return requestContentType
  **/
 @Size(max=128)  @ApiModelProperty(value = "The value that will be sent for the 'Content Type' header. ")
  public String getRequestContentType() {
    return requestContentType;
  }

  public void setRequestContentType(String requestContentType) {
    this.requestContentType = requestContentType;
  }

  public RepositoryWebhook secretHeader(String secretHeader) {
    this.secretHeader = secretHeader;
    return this;
  }

   /**
   * The header to send the predefined secret in. This must be unique from existing headers or it won&#39;t be sent. You can use this as a form of authentication on the endpoint side.
   * @return secretHeader
  **/
 @Pattern(regexp="^[-\\w]+$") @Size(max=64)  @ApiModelProperty(value = "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.")
  public String getSecretHeader() {
    return secretHeader;
  }

  public void setSecretHeader(String secretHeader) {
    this.secretHeader = secretHeader;
  }

   /**
   * Get selfUrl
   * @return selfUrl
  **/
  @ApiModelProperty(value = "")
  public String getSelfUrl() {
    return selfUrl;
  }

   /**
   * Get slugPerm
   * @return slugPerm
  **/
 @Pattern(regexp="^[-a-zA-Z0-9_]+$") @Size(min=1)  @ApiModelProperty(value = "")
  public String getSlugPerm() {
    return slugPerm;
  }

  public RepositoryWebhook targetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
    return this;
  }

   /**
   * The destination URL that webhook payloads will be POST&#39;ed to.
   * @return targetUrl
  **/
  @NotNull
 @Size(min=1,max=255)  @ApiModelProperty(required = true, value = "The destination URL that webhook payloads will be POST'ed to.")
  public String getTargetUrl() {
    return targetUrl;
  }

  public void setTargetUrl(String targetUrl) {
    this.targetUrl = targetUrl;
  }

  public RepositoryWebhook templates(List<WebhookTemplate> templates) {
    this.templates = templates;
    return this;
  }

  public RepositoryWebhook addTemplatesItem(WebhookTemplate templatesItem) {
    this.templates.add(templatesItem);
    return this;
  }

   /**
   * Get templates
   * @return templates
  **/
  @NotNull
  @Valid
  @ApiModelProperty(required = true, value = "")
  public List<WebhookTemplate> getTemplates() {
    return templates;
  }

  public void setTemplates(List<WebhookTemplate> templates) {
    this.templates = templates;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @Valid
  @ApiModelProperty(value = "")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

   /**
   * Get updatedBy
   * @return updatedBy
  **/
 @Size(min=1)  @ApiModelProperty(value = "")
  public String getUpdatedBy() {
    return updatedBy;
  }

   /**
   * Get updatedByUrl
   * @return updatedByUrl
  **/
  @ApiModelProperty(value = "")
  public String getUpdatedByUrl() {
    return updatedByUrl;
  }

  public RepositoryWebhook verifySsl(Boolean verifySsl) {
    this.verifySsl = verifySsl;
    return this;
  }

   /**
   * If enabled, SSL certificates is verified when webhooks are sent. It&#39;s recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
   * @return verifySsl
  **/
  @ApiModelProperty(value = "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.")
  public Boolean isVerifySsl() {
    return verifySsl;
  }

  public void setVerifySsl(Boolean verifySsl) {
    this.verifySsl = verifySsl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryWebhook repositoryWebhook = (RepositoryWebhook) o;
    return Objects.equals(this.createdAt, repositoryWebhook.createdAt) &&
        Objects.equals(this.createdBy, repositoryWebhook.createdBy) &&
        Objects.equals(this.createdByUrl, repositoryWebhook.createdByUrl) &&
        Objects.equals(this.disableReason, repositoryWebhook.disableReason) &&
        Objects.equals(this.disableReasonStr, repositoryWebhook.disableReasonStr) &&
        Objects.equals(this.events, repositoryWebhook.events) &&
        Objects.equals(this.identifier, repositoryWebhook.identifier) &&
        Objects.equals(this.isActive, repositoryWebhook.isActive) &&
        Objects.equals(this.isLastResponseBad, repositoryWebhook.isLastResponseBad) &&
        Objects.equals(this.lastResponseStatus, repositoryWebhook.lastResponseStatus) &&
        Objects.equals(this.lastResponseStatusStr, repositoryWebhook.lastResponseStatusStr) &&
        Objects.equals(this.numSent, repositoryWebhook.numSent) &&
        Objects.equals(this.packageQuery, repositoryWebhook.packageQuery) &&
        Objects.equals(this.requestBodyFormat, repositoryWebhook.requestBodyFormat) &&
        Objects.equals(this.requestBodyFormatStr, repositoryWebhook.requestBodyFormatStr) &&
        Objects.equals(this.requestBodyTemplateFormat, repositoryWebhook.requestBodyTemplateFormat) &&
        Objects.equals(this.requestBodyTemplateFormatStr, repositoryWebhook.requestBodyTemplateFormatStr) &&
        Objects.equals(this.requestContentType, repositoryWebhook.requestContentType) &&
        Objects.equals(this.secretHeader, repositoryWebhook.secretHeader) &&
        Objects.equals(this.selfUrl, repositoryWebhook.selfUrl) &&
        Objects.equals(this.slugPerm, repositoryWebhook.slugPerm) &&
        Objects.equals(this.targetUrl, repositoryWebhook.targetUrl) &&
        Objects.equals(this.templates, repositoryWebhook.templates) &&
        Objects.equals(this.updatedAt, repositoryWebhook.updatedAt) &&
        Objects.equals(this.updatedBy, repositoryWebhook.updatedBy) &&
        Objects.equals(this.updatedByUrl, repositoryWebhook.updatedByUrl) &&
        Objects.equals(this.verifySsl, repositoryWebhook.verifySsl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, createdBy, createdByUrl, disableReason, disableReasonStr, events, identifier, isActive, isLastResponseBad, lastResponseStatus, lastResponseStatusStr, numSent, packageQuery, requestBodyFormat, requestBodyFormatStr, requestBodyTemplateFormat, requestBodyTemplateFormatStr, requestContentType, secretHeader, selfUrl, slugPerm, targetUrl, templates, updatedAt, updatedBy, updatedByUrl, verifySsl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryWebhook {\n");
    
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdByUrl: ").append(toIndentedString(createdByUrl)).append("\n");
    sb.append("    disableReason: ").append(toIndentedString(disableReason)).append("\n");
    sb.append("    disableReasonStr: ").append(toIndentedString(disableReasonStr)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isLastResponseBad: ").append(toIndentedString(isLastResponseBad)).append("\n");
    sb.append("    lastResponseStatus: ").append(toIndentedString(lastResponseStatus)).append("\n");
    sb.append("    lastResponseStatusStr: ").append(toIndentedString(lastResponseStatusStr)).append("\n");
    sb.append("    numSent: ").append(toIndentedString(numSent)).append("\n");
    sb.append("    packageQuery: ").append(toIndentedString(packageQuery)).append("\n");
    sb.append("    requestBodyFormat: ").append(toIndentedString(requestBodyFormat)).append("\n");
    sb.append("    requestBodyFormatStr: ").append(toIndentedString(requestBodyFormatStr)).append("\n");
    sb.append("    requestBodyTemplateFormat: ").append(toIndentedString(requestBodyTemplateFormat)).append("\n");
    sb.append("    requestBodyTemplateFormatStr: ").append(toIndentedString(requestBodyTemplateFormatStr)).append("\n");
    sb.append("    requestContentType: ").append(toIndentedString(requestContentType)).append("\n");
    sb.append("    secretHeader: ").append(toIndentedString(secretHeader)).append("\n");
    sb.append("    selfUrl: ").append(toIndentedString(selfUrl)).append("\n");
    sb.append("    slugPerm: ").append(toIndentedString(slugPerm)).append("\n");
    sb.append("    targetUrl: ").append(toIndentedString(targetUrl)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    updatedByUrl: ").append(toIndentedString(updatedByUrl)).append("\n");
    sb.append("    verifySsl: ").append(toIndentedString(verifySsl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

