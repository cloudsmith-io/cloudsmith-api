/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * UserAuthToken
 */

public class UserAuthToken implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("token")
  private String token = null;

  @SerializedName("two_factor_required")
  private Boolean twoFactorRequired = null;

  @SerializedName("two_factor_token")
  private String twoFactorToken = null;

   /**
   * API token for the authenticated user
   * @return token
  **/
 @Size(min=1)  @ApiModelProperty(value = "API token for the authenticated user")
  public String getToken() {
    return token;
  }

   /**
   * Flag indicating whether a 2FA code is required to complete authentication
   * @return twoFactorRequired
  **/
  @ApiModelProperty(value = "Flag indicating whether a 2FA code is required to complete authentication")
  public Boolean isTwoFactorRequired() {
    return twoFactorRequired;
  }

   /**
   * Token to use when providing 2FA code
   * @return twoFactorToken
  **/
 @Size(min=1)  @ApiModelProperty(value = "Token to use when providing 2FA code")
  public String getTwoFactorToken() {
    return twoFactorToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAuthToken userAuthToken = (UserAuthToken) o;
    return Objects.equals(this.token, userAuthToken.token) &&
        Objects.equals(this.twoFactorRequired, userAuthToken.twoFactorRequired) &&
        Objects.equals(this.twoFactorToken, userAuthToken.twoFactorToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, twoFactorRequired, twoFactorToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAuthToken {\n");
    
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    twoFactorRequired: ").append(toIndentedString(twoFactorRequired)).append("\n");
    sb.append("    twoFactorToken: ").append(toIndentedString(twoFactorToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

