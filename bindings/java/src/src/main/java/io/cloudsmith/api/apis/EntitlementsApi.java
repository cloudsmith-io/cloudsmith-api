/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.ApiCallback;
import io.cloudsmith.api.ApiClient;
import io.cloudsmith.api.ApiException;
import io.cloudsmith.api.ApiResponse;
import io.cloudsmith.api.Configuration;
import io.cloudsmith.api.Pair;
import io.cloudsmith.api.ProgressRequestBody;
import io.cloudsmith.api.ProgressResponseBody;
import io.cloudsmith.api.BeanValidationException;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import javax.validation.constraints.*;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.ValidatorFactory;
import javax.validation.executable.ExecutableValidator;
import java.util.Set;
import java.lang.reflect.Method;
import java.lang.reflect.Type;

import io.cloudsmith.api.models.EntitlementsCreate;
import io.cloudsmith.api.models.EntitlementsPartialUpdate;
import io.cloudsmith.api.models.EntitlementsRefresh;
import io.cloudsmith.api.models.EntitlementsSync;
import io.cloudsmith.api.models.RepositoryToken;
import io.cloudsmith.api.models.RepositoryTokenRefresh;
import io.cloudsmith.api.models.RepositoryTokenSync;
import io.cloudsmith.api.models.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitlementsApi {
    private ApiClient apiClient;

    public EntitlementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitlementsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for entitlementsCreate
     * @param owner  (required)
     * @param repo  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsCreateCall(String owner, String repo, Boolean showTokens, EntitlementsCreate data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showTokens != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_tokens", showTokens));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsCreateValidateBeforeCall(String owner, String repo, Boolean showTokens, EntitlementsCreate data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, showTokens, data };
            Method method = this.getClass().getMethod("entitlementsCreateWithHttpInfo", String.class, String.class, Boolean.class, EntitlementsCreate.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsCreateCall(owner, repo, showTokens, data, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Create a specific entitlement in a repository.
     * Create a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @return RepositoryToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RepositoryToken entitlementsCreate(String owner, String repo, Boolean showTokens, EntitlementsCreate data) throws ApiException {
        ApiResponse<RepositoryToken> resp = entitlementsCreateWithHttpInfo(owner, repo, showTokens, data);
        return resp.getData();
    }

    /**
     * Create a specific entitlement in a repository.
     * Create a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @return ApiResponse&lt;RepositoryToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RepositoryToken> entitlementsCreateWithHttpInfo( @NotNull String owner,  @NotNull String repo,  Boolean showTokens,  EntitlementsCreate data) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsCreateValidateBeforeCall(owner, repo, showTokens, data, null, null);
        Type localVarReturnType = new TypeToken<RepositoryToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a specific entitlement in a repository. (asynchronously)
     * Create a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsCreateAsync(String owner, String repo, Boolean showTokens, EntitlementsCreate data, final ApiCallback<RepositoryToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsCreateValidateBeforeCall(owner, repo, showTokens, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RepositoryToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entitlementsDelete
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsDeleteCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsDeleteValidateBeforeCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier };
            Method method = this.getClass().getMethod("entitlementsDeleteWithHttpInfo", String.class, String.class, String.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsDeleteCall(owner, repo, identifier, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Delete a specific entitlement in a repository.
     * Delete a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entitlementsDelete(String owner, String repo, String identifier) throws ApiException {
        entitlementsDeleteWithHttpInfo(owner, repo, identifier);
    }

    /**
     * Delete a specific entitlement in a repository.
     * Delete a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entitlementsDeleteWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsDeleteValidateBeforeCall(owner, repo, identifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a specific entitlement in a repository. (asynchronously)
     * Delete a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsDeleteAsync(String owner, String repo, String identifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsDeleteValidateBeforeCall(owner, repo, identifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for entitlementsDisable
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsDisableCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/disable/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsDisableValidateBeforeCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier };
            Method method = this.getClass().getMethod("entitlementsDisableWithHttpInfo", String.class, String.class, String.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsDisableCall(owner, repo, identifier, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Disable an entitlement token in a repository.
     * Disable an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entitlementsDisable(String owner, String repo, String identifier) throws ApiException {
        entitlementsDisableWithHttpInfo(owner, repo, identifier);
    }

    /**
     * Disable an entitlement token in a repository.
     * Disable an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entitlementsDisableWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsDisableValidateBeforeCall(owner, repo, identifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Disable an entitlement token in a repository. (asynchronously)
     * Disable an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsDisableAsync(String owner, String repo, String identifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsDisableValidateBeforeCall(owner, repo, identifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for entitlementsEnable
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsEnableCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/enable/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsEnableValidateBeforeCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier };
            Method method = this.getClass().getMethod("entitlementsEnableWithHttpInfo", String.class, String.class, String.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsEnableCall(owner, repo, identifier, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Enable an entitlement token in a repository.
     * Enable an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entitlementsEnable(String owner, String repo, String identifier) throws ApiException {
        entitlementsEnableWithHttpInfo(owner, repo, identifier);
    }

    /**
     * Enable an entitlement token in a repository.
     * Enable an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entitlementsEnableWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsEnableValidateBeforeCall(owner, repo, identifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Enable an entitlement token in a repository. (asynchronously)
     * Enable an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsEnableAsync(String owner, String repo, String identifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsEnableValidateBeforeCall(owner, repo, identifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for entitlementsList
     * @param owner  (required)
     * @param repo  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsListCall(String owner, String repo, Integer page, Integer pageSize, Boolean showTokens, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "page_size", pageSize));
        if (showTokens != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_tokens", showTokens));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsListValidateBeforeCall(String owner, String repo, Integer page, Integer pageSize, Boolean showTokens, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, page, pageSize, showTokens };
            Method method = this.getClass().getMethod("entitlementsListWithHttpInfo", String.class, String.class, Integer.class, Integer.class, Boolean.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsListCall(owner, repo, page, pageSize, showTokens, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Get a list of all entitlements in a repository.
     * Get a list of all entitlements in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param showTokens Show entitlement token strings in results (optional)
     * @return List&lt;RepositoryToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RepositoryToken> entitlementsList(String owner, String repo, Integer page, Integer pageSize, Boolean showTokens) throws ApiException {
        ApiResponse<List<RepositoryToken>> resp = entitlementsListWithHttpInfo(owner, repo, page, pageSize, showTokens);
        return resp.getData();
    }

    /**
     * Get a list of all entitlements in a repository.
     * Get a list of all entitlements in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param showTokens Show entitlement token strings in results (optional)
     * @return ApiResponse&lt;List&lt;RepositoryToken&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RepositoryToken>> entitlementsListWithHttpInfo( @NotNull String owner,  @NotNull String repo,  Integer page,  Integer pageSize,  Boolean showTokens) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsListValidateBeforeCall(owner, repo, page, pageSize, showTokens, null, null);
        Type localVarReturnType = new TypeToken<List<RepositoryToken>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of all entitlements in a repository. (asynchronously)
     * Get a list of all entitlements in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsListAsync(String owner, String repo, Integer page, Integer pageSize, Boolean showTokens, final ApiCallback<List<RepositoryToken>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsListValidateBeforeCall(owner, repo, page, pageSize, showTokens, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RepositoryToken>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entitlementsPartialUpdate
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsPartialUpdateCall(String owner, String repo, String identifier, Boolean showTokens, EntitlementsPartialUpdate data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showTokens != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_tokens", showTokens));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsPartialUpdateValidateBeforeCall(String owner, String repo, String identifier, Boolean showTokens, EntitlementsPartialUpdate data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier, showTokens, data };
            Method method = this.getClass().getMethod("entitlementsPartialUpdateWithHttpInfo", String.class, String.class, String.class, Boolean.class, EntitlementsPartialUpdate.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsPartialUpdateCall(owner, repo, identifier, showTokens, data, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Update a specific entitlement in a repository.
     * Update a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @return RepositoryToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RepositoryToken entitlementsPartialUpdate(String owner, String repo, String identifier, Boolean showTokens, EntitlementsPartialUpdate data) throws ApiException {
        ApiResponse<RepositoryToken> resp = entitlementsPartialUpdateWithHttpInfo(owner, repo, identifier, showTokens, data);
        return resp.getData();
    }

    /**
     * Update a specific entitlement in a repository.
     * Update a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @return ApiResponse&lt;RepositoryToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RepositoryToken> entitlementsPartialUpdateWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier,  Boolean showTokens,  EntitlementsPartialUpdate data) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsPartialUpdateValidateBeforeCall(owner, repo, identifier, showTokens, data, null, null);
        Type localVarReturnType = new TypeToken<RepositoryToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a specific entitlement in a repository. (asynchronously)
     * Update a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsPartialUpdateAsync(String owner, String repo, String identifier, Boolean showTokens, EntitlementsPartialUpdate data, final ApiCallback<RepositoryToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsPartialUpdateValidateBeforeCall(owner, repo, identifier, showTokens, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RepositoryToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entitlementsRead
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsReadCall(String owner, String repo, String identifier, Boolean showTokens, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showTokens != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_tokens", showTokens));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsReadValidateBeforeCall(String owner, String repo, String identifier, Boolean showTokens, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier, showTokens };
            Method method = this.getClass().getMethod("entitlementsReadWithHttpInfo", String.class, String.class, String.class, Boolean.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsReadCall(owner, repo, identifier, showTokens, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Get a specific entitlement in a repository.
     * Get a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @return RepositoryToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RepositoryToken entitlementsRead(String owner, String repo, String identifier, Boolean showTokens) throws ApiException {
        ApiResponse<RepositoryToken> resp = entitlementsReadWithHttpInfo(owner, repo, identifier, showTokens);
        return resp.getData();
    }

    /**
     * Get a specific entitlement in a repository.
     * Get a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @return ApiResponse&lt;RepositoryToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RepositoryToken> entitlementsReadWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier,  Boolean showTokens) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsReadValidateBeforeCall(owner, repo, identifier, showTokens, null, null);
        Type localVarReturnType = new TypeToken<RepositoryToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific entitlement in a repository. (asynchronously)
     * Get a specific entitlement in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsReadAsync(String owner, String repo, String identifier, Boolean showTokens, final ApiCallback<RepositoryToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsReadValidateBeforeCall(owner, repo, identifier, showTokens, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RepositoryToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entitlementsRefresh
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsRefreshCall(String owner, String repo, String identifier, Boolean showTokens, EntitlementsRefresh data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/refresh/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (showTokens != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "show_tokens", showTokens));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsRefreshValidateBeforeCall(String owner, String repo, String identifier, Boolean showTokens, EntitlementsRefresh data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier, showTokens, data };
            Method method = this.getClass().getMethod("entitlementsRefreshWithHttpInfo", String.class, String.class, String.class, Boolean.class, EntitlementsRefresh.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsRefreshCall(owner, repo, identifier, showTokens, data, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Refresh an entitlement token in a repository.
     * Refresh an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @return RepositoryTokenRefresh
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RepositoryTokenRefresh entitlementsRefresh(String owner, String repo, String identifier, Boolean showTokens, EntitlementsRefresh data) throws ApiException {
        ApiResponse<RepositoryTokenRefresh> resp = entitlementsRefreshWithHttpInfo(owner, repo, identifier, showTokens, data);
        return resp.getData();
    }

    /**
     * Refresh an entitlement token in a repository.
     * Refresh an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @return ApiResponse&lt;RepositoryTokenRefresh&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RepositoryTokenRefresh> entitlementsRefreshWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier,  Boolean showTokens,  EntitlementsRefresh data) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsRefreshValidateBeforeCall(owner, repo, identifier, showTokens, data, null, null);
        Type localVarReturnType = new TypeToken<RepositoryTokenRefresh>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Refresh an entitlement token in a repository. (asynchronously)
     * Refresh an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param showTokens Show entitlement token strings in results (optional)
     * @param data  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsRefreshAsync(String owner, String repo, String identifier, Boolean showTokens, EntitlementsRefresh data, final ApiCallback<RepositoryTokenRefresh> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsRefreshValidateBeforeCall(owner, repo, identifier, showTokens, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RepositoryTokenRefresh>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for entitlementsReset
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsResetCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/{identifier}/reset/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()))
            .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsResetValidateBeforeCall(String owner, String repo, String identifier, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, identifier };
            Method method = this.getClass().getMethod("entitlementsResetWithHttpInfo", String.class, String.class, String.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsResetCall(owner, repo, identifier, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Reset the statistics for an entitlement token in a repository.
     * Reset the statistics for an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void entitlementsReset(String owner, String repo, String identifier) throws ApiException {
        entitlementsResetWithHttpInfo(owner, repo, identifier);
    }

    /**
     * Reset the statistics for an entitlement token in a repository.
     * Reset the statistics for an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> entitlementsResetWithHttpInfo( @NotNull String owner,  @NotNull String repo,  @NotNull String identifier) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsResetValidateBeforeCall(owner, repo, identifier, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reset the statistics for an entitlement token in a repository. (asynchronously)
     * Reset the statistics for an entitlement token in a repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param identifier  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsResetAsync(String owner, String repo, String identifier, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsResetValidateBeforeCall(owner, repo, identifier, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for entitlementsSync
     * @param owner  (required)
     * @param repo  (required)
     * @param data  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call entitlementsSyncCall(String owner, String repo, EntitlementsSync data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;
        
        // create path and map variables
        String localVarPath = "/entitlements/{owner}/{repo}/sync/"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "repo" + "\\}", apiClient.escapeString(repo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apikey", "basic", "csrf_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call entitlementsSyncValidateBeforeCall(String owner, String repo, EntitlementsSync data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        try {
            ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
            ExecutableValidator executableValidator = factory.getValidator().forExecutables();

            Object[] parameterValues = { owner, repo, data };
            Method method = this.getClass().getMethod("entitlementsSyncWithHttpInfo", String.class, String.class, EntitlementsSync.class);
            Set<ConstraintViolation<EntitlementsApi>> violations = executableValidator.validateParameters(this, method,
                    parameterValues);

            if (violations.size() == 0) {
                com.squareup.okhttp.Call call = entitlementsSyncCall(owner, repo, data, progressListener, progressRequestListener);
                return call;
            
            } else {
                throw new BeanValidationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
            
        
        
        
        
    }

    /**
     * Synchronise tokens from a source repository.
     * Synchronise tokens from a source repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param data  (optional)
     * @return RepositoryTokenSync
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RepositoryTokenSync entitlementsSync(String owner, String repo, EntitlementsSync data) throws ApiException {
        ApiResponse<RepositoryTokenSync> resp = entitlementsSyncWithHttpInfo(owner, repo, data);
        return resp.getData();
    }

    /**
     * Synchronise tokens from a source repository.
     * Synchronise tokens from a source repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param data  (optional)
     * @return ApiResponse&lt;RepositoryTokenSync&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RepositoryTokenSync> entitlementsSyncWithHttpInfo( @NotNull String owner,  @NotNull String repo,  EntitlementsSync data) throws ApiException {
        com.squareup.okhttp.Call call = entitlementsSyncValidateBeforeCall(owner, repo, data, null, null);
        Type localVarReturnType = new TypeToken<RepositoryTokenSync>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Synchronise tokens from a source repository. (asynchronously)
     * Synchronise tokens from a source repository.
     * @param owner  (required)
     * @param repo  (required)
     * @param data  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call entitlementsSyncAsync(String owner, String repo, EntitlementsSync data, final ApiCallback<RepositoryTokenSync> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = entitlementsSyncValidateBeforeCall(owner, repo, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RepositoryTokenSync>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
