/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * RepositoryGeoIpTestAddressResponseDict
 */

public class RepositoryGeoIpTestAddressResponseDict implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("allowed")
  private Boolean allowed = null;

  @SerializedName("country_code")
  private String countryCode = null;

  @SerializedName("ip_address")
  private String ipAddress = null;

  @SerializedName("reason")
  private String reason = null;

  public RepositoryGeoIpTestAddressResponseDict allowed(Boolean allowed) {
    this.allowed = allowed;
    return this;
  }

   /**
   * The result of the IP test
   * @return allowed
  **/
  @NotNull
  @ApiModelProperty(required = true, value = "The result of the IP test")
  public Boolean isAllowed() {
    return allowed;
  }

  public void setAllowed(Boolean allowed) {
    this.allowed = allowed;
  }

  public RepositoryGeoIpTestAddressResponseDict countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The country code of the tested IP address
   * @return countryCode
  **/
  @NotNull
 @Size(min=1)  @ApiModelProperty(required = true, value = "The country code of the tested IP address")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public RepositoryGeoIpTestAddressResponseDict ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * The IP address that was tested
   * @return ipAddress
  **/
  @NotNull
 @Size(min=1)  @ApiModelProperty(required = true, value = "The IP address that was tested")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public RepositoryGeoIpTestAddressResponseDict reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * The reason for the result
   * @return reason
  **/
  @NotNull
 @Size(min=1)  @ApiModelProperty(required = true, value = "The reason for the result")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepositoryGeoIpTestAddressResponseDict repositoryGeoIpTestAddressResponseDict = (RepositoryGeoIpTestAddressResponseDict) o;
    return Objects.equals(this.allowed, repositoryGeoIpTestAddressResponseDict.allowed) &&
        Objects.equals(this.countryCode, repositoryGeoIpTestAddressResponseDict.countryCode) &&
        Objects.equals(this.ipAddress, repositoryGeoIpTestAddressResponseDict.ipAddress) &&
        Objects.equals(this.reason, repositoryGeoIpTestAddressResponseDict.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowed, countryCode, ipAddress, reason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepositoryGeoIpTestAddressResponseDict {\n");
    
    sb.append("    allowed: ").append(toIndentedString(allowed)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

