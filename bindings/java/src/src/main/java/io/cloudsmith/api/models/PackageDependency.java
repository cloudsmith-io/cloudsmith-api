/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * PackageDependency
 */

public class PackageDependency implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets depType
   */
  @JsonAdapter(DepTypeEnum.Adapter.class)
  public enum DepTypeEnum {
    DEPENDS("Depends"),
    
    PRE_DEPENDS("Pre-Depends"),
    
    RECOMMENDS("Recommends"),
    
    SUGGESTS("Suggests"),
    
    ENHANCES("Enhances"),
    
    REPLACES("Replaces"),
    
    BREAKS("Breaks"),
    
    BUILT_USING("Built-Using"),
    
    BUILD_DEPENDS("Build-Depends"),
    
    BUILD_DEPENDS_INDEP("Build-Depends-Indep"),
    
    BUILD_CONFLICTS("Build-Conflicts"),
    
    BUILD_CONFLICTS_INDEP("Build-Conflicts-Indep"),
    
    CONFLICTS("Conflicts"),
    
    PROVIDES("Provides"),
    
    OBSOLETES("Obsoletes"),
    
    REQUIRES("Requires"),
    
    RUNTIME("Runtime"),
    
    DEVELOPMENT("Development"),
    
    COMPILE("Compile"),
    
    PROVIDED("Provided"),
    
    TEST("Test"),
    
    SYSTEM("System"),
    
    IMPORT("Import"),
    
    EXCLUDED("Excluded"),
    
    BUILD_REQUIRES("Build-Requires"),
    
    PYTHON_REQUIRES("Python-Requires");

    private String value;

    DepTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DepTypeEnum fromValue(String text) {
      for (DepTypeEnum b : DepTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DepTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DepTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DepTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DepTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dep_type")
  private DepTypeEnum depType = DepTypeEnum.DEPENDS;

  @SerializedName("name")
  private String name = null;

  /**
   * Gets or Sets operator
   */
  @JsonAdapter(OperatorEnum.Adapter.class)
  public enum OperatorEnum {
    EQUAL("="),
    
    NOT_EQUAL("!="),
    
    LESS_THAN("<"),
    
    _("<<"),
    
    LESS_THAN_OR_EQUAL_TO("<="),
    
    GREATER_THAN(">"),
    
    __2(">>"),
    
    GREATER_THAN_OR_EQUAL_TO(">="),
    
    __3("~="),
    
    __4("~>"),
    
    MATCHES("matches");

    private String value;

    OperatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorEnum fromValue(String text) {
      for (OperatorEnum b : OperatorEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OperatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OperatorEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("operator")
  private OperatorEnum operator = OperatorEnum.EQUAL;

  @SerializedName("version")
  private String version = null;

   /**
   * Get depType
   * @return depType
  **/
  @ApiModelProperty(value = "")
  public DepTypeEnum getDepType() {
    return depType;
  }

  public PackageDependency name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the package dependency.
   * @return name
  **/
  @NotNull
 @Size(min=1,max=255)  @ApiModelProperty(required = true, value = "The name of the package dependency.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Get operator
   * @return operator
  **/
  @ApiModelProperty(value = "")
  public OperatorEnum getOperator() {
    return operator;
  }

  public PackageDependency version(String version) {
    this.version = version;
    return this;
  }

   /**
   * The raw dependency version (if any).
   * @return version
  **/
 @Size(max=128)  @ApiModelProperty(value = "The raw dependency version (if any).")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageDependency packageDependency = (PackageDependency) o;
    return Objects.equals(this.depType, packageDependency.depType) &&
        Objects.equals(this.name, packageDependency.name) &&
        Objects.equals(this.operator, packageDependency.operator) &&
        Objects.equals(this.version, packageDependency.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(depType, name, operator, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageDependency {\n");
    
    sb.append("    depType: ").append(toIndentedString(depType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

