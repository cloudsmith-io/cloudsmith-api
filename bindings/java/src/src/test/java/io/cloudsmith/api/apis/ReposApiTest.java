/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.models.ReposCreate;
import io.cloudsmith.api.models.ReposGpgCreate;
import io.cloudsmith.api.models.ReposPartialUpdate;
import io.cloudsmith.api.models.ReposPrivilegesPartialUpdate;
import io.cloudsmith.api.models.ReposPrivilegesUpdate;
import io.cloudsmith.api.models.ReposRsaCreate;
import io.cloudsmith.api.models.Repository;
import io.cloudsmith.api.models.RepositoryCreate;
import io.cloudsmith.api.models.RepositoryGpgKey;
import io.cloudsmith.api.models.RepositoryPrivilegeInput;
import io.cloudsmith.api.models.RepositoryRsaKey;
import io.cloudsmith.api.models.Status;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReposApi
 */
@Ignore
public class ReposApiTest {

    private final ReposApi api = new ReposApi();

    
    /**
     * Get a list of all repositories associated with current user.
     *
     * Get a list of all repositories associated with current user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposAllListTest() throws Exception {
        Integer page = null;
        Integer pageSize = null;
        List<Repository> response = api.reposAllList(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Create a new repository in a given namespace.
     *
     * Create a new repository in a given namespace.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposCreateTest() throws Exception {
        String owner = null;
        ReposCreate data = null;
        RepositoryCreate response = api.reposCreate(owner, data);

        // TODO: test validations
    }
    
    /**
     * Delete a repository in a given namespace.
     *
     * Delete a repository in a given namespace.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposDeleteTest() throws Exception {
        String owner = null;
        String identifier = null;
        api.reposDelete(owner, identifier);

        // TODO: test validations
    }
    
    /**
     * Set the active GPG key for the Repository.
     *
     * Set the active GPG key for the Repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposGpgCreateTest() throws Exception {
        String owner = null;
        String identifier = null;
        ReposGpgCreate data = null;
        RepositoryGpgKey response = api.reposGpgCreate(owner, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve the active GPG key for the Repository.
     *
     * Retrieve the active GPG key for the Repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposGpgListTest() throws Exception {
        String owner = null;
        String identifier = null;
        RepositoryGpgKey response = api.reposGpgList(owner, identifier);

        // TODO: test validations
    }
    
    /**
     * Regenerate GPG Key for the Repository.
     *
     * Regenerate GPG Key for the Repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposGpgRegenerateTest() throws Exception {
        String owner = null;
        String identifier = null;
        RepositoryGpgKey response = api.reposGpgRegenerate(owner, identifier);

        // TODO: test validations
    }
    
    /**
     * Get a list of all repositories within a namespace.
     *
     * Get a list of all repositories within a namespace.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposListTest() throws Exception {
        String owner = null;
        Integer page = null;
        Integer pageSize = null;
        List<Repository> response = api.reposList(owner, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Update details about a repository in a given namespace.
     *
     * Update details about a repository in a given namespace.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposPartialUpdateTest() throws Exception {
        String owner = null;
        String identifier = null;
        ReposPartialUpdate data = null;
        Repository response = api.reposPartialUpdate(owner, identifier, data);

        // TODO: test validations
    }
    
    /**
     * List all explicity created privileges for the repository.
     *
     * List all explicity created privileges for the repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposPrivilegesListTest() throws Exception {
        String owner = null;
        String identifier = null;
        Integer page = null;
        Integer pageSize = null;
        RepositoryPrivilegeInput response = api.reposPrivilegesList(owner, identifier, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Modify privileges for the repository.
     *
     * Modify privileges for the repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposPrivilegesPartialUpdateTest() throws Exception {
        String owner = null;
        String identifier = null;
        ReposPrivilegesPartialUpdate data = null;
        api.reposPrivilegesPartialUpdate(owner, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Replace all existing repository privileges with those specified.
     *
     * Replace all existing repository privileges with those specified.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposPrivilegesUpdateTest() throws Exception {
        String owner = null;
        String identifier = null;
        ReposPrivilegesUpdate data = null;
        api.reposPrivilegesUpdate(owner, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Get a specific repository.
     *
     * Get a specific repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposReadTest() throws Exception {
        String owner = null;
        String identifier = null;
        Repository response = api.reposRead(owner, identifier);

        // TODO: test validations
    }
    
    /**
     * Set the active RSA key for the Repository.
     *
     * Set the active RSA key for the Repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposRsaCreateTest() throws Exception {
        String owner = null;
        String identifier = null;
        ReposRsaCreate data = null;
        RepositoryRsaKey response = api.reposRsaCreate(owner, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve the active RSA key for the Repository.
     *
     * Retrieve the active RSA key for the Repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposRsaListTest() throws Exception {
        String owner = null;
        String identifier = null;
        RepositoryRsaKey response = api.reposRsaList(owner, identifier);

        // TODO: test validations
    }
    
    /**
     * Regenerate RSA Key for the Repository.
     *
     * Regenerate RSA Key for the Repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void reposRsaRegenerateTest() throws Exception {
        String owner = null;
        String identifier = null;
        RepositoryRsaKey response = api.reposRsaRegenerate(owner, identifier);

        // TODO: test validations
    }
    
}
