/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.models.ErrorDetail;
import io.cloudsmith.api.models.OrganizationGroupSyncRequest;
import io.cloudsmith.api.models.OrganizationGroupSyncResponse;
import io.cloudsmith.api.models.OrganizationInviteExtendResponse;
import io.cloudsmith.api.models.OrganizationInviteRequest;
import io.cloudsmith.api.models.OrganizationInviteResponse;
import io.cloudsmith.api.models.OrganizationInviteUpdateRequestPatch;
import io.cloudsmith.api.models.OrganizationMembershipResponse;
import io.cloudsmith.api.models.OrganizationResponse;
import io.cloudsmith.api.models.OrganizationTeamMembers;
import io.cloudsmith.api.models.OrganizationTeamMembersResponse;
import io.cloudsmith.api.models.OrganizationTeamRequest;
import io.cloudsmith.api.models.OrganizationTeamRequestPatch;
import io.cloudsmith.api.models.OrganizationTeamResponse;
import io.cloudsmith.api.models.ServiceRequest;
import io.cloudsmith.api.models.ServiceRequestPatch;
import io.cloudsmith.api.models.ServiceResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrgsApi
 */
@Ignore
public class OrgsApiTest {

    private final OrgsApi api = new OrgsApi();

    
    /**
     * Create an organization invite for a specific user
     *
     * Create an organization invite for a specific user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesCreateTest() throws Exception {
        String org = null;
        OrganizationInviteRequest data = null;
        OrganizationInviteResponse response = api.orgsInvitesCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific organization invite
     *
     * Delete a specific organization invite
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsInvitesDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Extend an organization invite.
     *
     * Extend an organization invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesExtendTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationInviteExtendResponse response = api.orgsInvitesExtend(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all invites for an organization.
     *
     * Get a list of all invites for an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationInviteResponse> response = api.orgsInvitesList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Update a specific organization invite.
     *
     * Update a specific organization invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesPartialUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationInviteUpdateRequestPatch data = null;
        OrganizationInviteResponse response = api.orgsInvitesPartialUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Resend an organization invite.
     *
     * Resend an organization invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesResendTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationInviteExtendResponse response = api.orgsInvitesResend(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all the organizations you are associated with.
     *
     * Get a list of all the organizations you are associated with.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsListTest() throws Exception {
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationResponse> response = api.orgsList(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Removes a member from the organization.
     *
     * Removes a member from the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersDeleteTest() throws Exception {
        String org = null;
        String member = null;
        api.orgsMembersDelete(org, member);

        // TODO: test validations
    }
    
    /**
     * Get the details for all organization members.
     *
     * Get the details for all organization members.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationMembershipResponse> response = api.orgsMembersList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get the details for a specific organization member.
     *
     * Get the details for a specific organization member.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersReadTest() throws Exception {
        String org = null;
        String member = null;
        OrganizationMembershipResponse response = api.orgsMembersRead(org, member);

        // TODO: test validations
    }
    
    /**
     * Removes a member from the organization (deprecated, use DELETE instead).
     *
     * Removes a member from the organization (deprecated, use DELETE instead).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersRemoveTest() throws Exception {
        String org = null;
        String member = null;
        api.orgsMembersRemove(org, member);

        // TODO: test validations
    }
    
    /**
     * Get the details for the specific organization.
     *
     * Get the details for the specific organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsReadTest() throws Exception {
        String org = null;
        OrganizationResponse response = api.orgsRead(org);

        // TODO: test validations
    }
    
    /**
     * Create a new SAML Group Sync mapping within an organization.
     *
     * Create a new SAML Group Sync mapping within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncCreateTest() throws Exception {
        String org = null;
        OrganizationGroupSyncRequest data = null;
        OrganizationGroupSyncResponse response = api.orgsSamlGroupSyncCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a SAML Group Sync mapping from an organization.
     *
     * Delete a SAML Group Sync mapping from an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsSamlGroupSyncDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get the details of all SAML Group Sync mapping within an organization.
     *
     * Get the details of all SAML Group Sync mapping within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationGroupSyncResponse> response = api.orgsSamlGroupSyncList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Create a service within an organization.
     *
     * Create a service within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesCreateTest() throws Exception {
        String org = null;
        ServiceRequest data = null;
        ServiceResponse response = api.orgsServicesCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific service
     *
     * Delete a specific service
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesDeleteTest() throws Exception {
        String org = null;
        String service = null;
        api.orgsServicesDelete(org, service);

        // TODO: test validations
    }
    
    /**
     * Get a list of all services within an organization.
     *
     * Get a list of all services within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<ServiceResponse> response = api.orgsServicesList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Update a service within an organization.
     *
     * Update a service within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesPartialUpdateTest() throws Exception {
        String org = null;
        String service = null;
        ServiceRequestPatch data = null;
        ServiceResponse response = api.orgsServicesPartialUpdate(org, service, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve details of a single service within an organization.
     *
     * Retrieve details of a single service within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesReadTest() throws Exception {
        String org = null;
        String service = null;
        ServiceResponse response = api.orgsServicesRead(org, service);

        // TODO: test validations
    }
    
    /**
     * Refresh service API token.
     *
     * Refresh service API token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesRefreshTest() throws Exception {
        String org = null;
        String service = null;
        ServiceResponse response = api.orgsServicesRefresh(org, service);

        // TODO: test validations
    }
    
    /**
     * Create a team for this organization.
     *
     * Create a team for this organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsCreateTest() throws Exception {
        String org = null;
        OrganizationTeamRequest data = null;
        OrganizationTeamResponse response = api.orgsTeamsCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific team in a organization.
     *
     * Delete a specific team in a organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsDeleteTest() throws Exception {
        String org = null;
        String team = null;
        api.orgsTeamsDelete(org, team);

        // TODO: test validations
    }
    
    /**
     * Get the details of all teams within an organization.
     *
     * Get the details of all teams within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationTeamResponse> response = api.orgsTeamsList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Add users to a team.
     *
     * Add users to a team.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsMembersCreateTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamMembers data = null;
        OrganizationTeamMembersResponse response = api.orgsTeamsMembersCreate(org, team, data);

        // TODO: test validations
    }
    
    /**
     * List all members for the team.
     *
     * List all members for the team.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsMembersListTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamMembersResponse response = api.orgsTeamsMembersList(org, team);

        // TODO: test validations
    }
    
    /**
     * Replace all team members.
     *
     * Replace all team members.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsMembersUpdateTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamMembersResponse response = api.orgsTeamsMembersUpdate(org, team);

        // TODO: test validations
    }
    
    /**
     * Update a specific team in a organization.
     *
     * Update a specific team in a organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsPartialUpdateTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamRequestPatch data = null;
        OrganizationTeamResponse response = api.orgsTeamsPartialUpdate(org, team, data);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific team within an organization.
     *
     * Get the details of a specific team within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsReadTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamResponse response = api.orgsTeamsRead(org, team);

        // TODO: test validations
    }
    
}
