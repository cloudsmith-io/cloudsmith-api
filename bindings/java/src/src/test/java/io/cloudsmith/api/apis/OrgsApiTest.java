/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.models.ErrorDetail;
import io.cloudsmith.api.models.Organization;
import io.cloudsmith.api.models.OrganizationGroupSync;
import io.cloudsmith.api.models.OrganizationGroupSyncRequest;
import io.cloudsmith.api.models.OrganizationGroupSyncStatus;
import io.cloudsmith.api.models.OrganizationInvite;
import io.cloudsmith.api.models.OrganizationInviteExtend;
import io.cloudsmith.api.models.OrganizationInviteRequest;
import io.cloudsmith.api.models.OrganizationInviteUpdateRequestPatch;
import io.cloudsmith.api.models.OrganizationMembership;
import io.cloudsmith.api.models.OrganizationMembershipRequestPatch;
import io.cloudsmith.api.models.OrganizationMembershipRoleUpdate;
import io.cloudsmith.api.models.OrganizationMembershipRoleUpdateRequestPatch;
import io.cloudsmith.api.models.OrganizationMembershipVisibilityUpdate;
import io.cloudsmith.api.models.OrganizationMembershipVisibilityUpdateRequestPatch;
import io.cloudsmith.api.models.OrganizationPackageLicensePolicy;
import io.cloudsmith.api.models.OrganizationPackageLicensePolicyRequest;
import io.cloudsmith.api.models.OrganizationPackageLicensePolicyRequestPatch;
import io.cloudsmith.api.models.OrganizationPackageVulnerabilityPolicy;
import io.cloudsmith.api.models.OrganizationPackageVulnerabilityPolicyRequest;
import io.cloudsmith.api.models.OrganizationPackageVulnerabilityPolicyRequestPatch;
import io.cloudsmith.api.models.OrganizationSAMLAuth;
import io.cloudsmith.api.models.OrganizationSAMLAuthRequestPatch;
import io.cloudsmith.api.models.OrganizationTeam;
import io.cloudsmith.api.models.OrganizationTeamMembers;
import io.cloudsmith.api.models.OrganizationTeamRequest;
import io.cloudsmith.api.models.OrganizationTeamRequestPatch;
import io.cloudsmith.api.models.PackageDenyPolicy;
import io.cloudsmith.api.models.PackageDenyPolicyRequest;
import io.cloudsmith.api.models.PackageDenyPolicyRequestPatch;
import io.cloudsmith.api.models.PackageLicensePolicyEvaluationRequest;
import io.cloudsmith.api.models.PackageLicensePolicyEvaluationRequestRequest;
import io.cloudsmith.api.models.PackageLicensePolicyViolationLogCursorPage;
import io.cloudsmith.api.models.PackageVulnerabilityPolicyEvaluationRequest;
import io.cloudsmith.api.models.PackageVulnerabilityPolicyEvaluationRequestRequest;
import io.cloudsmith.api.models.PackageVulnerabilityPolicyViolationLogCursorPage;
import io.cloudsmith.api.models.ProviderSettings;
import io.cloudsmith.api.models.ProviderSettingsRequest;
import io.cloudsmith.api.models.ProviderSettingsRequestPatch;
import io.cloudsmith.api.models.Service;
import io.cloudsmith.api.models.ServiceRequest;
import io.cloudsmith.api.models.ServiceRequestPatch;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrgsApi
 */
@Ignore
public class OrgsApiTest {

    private final OrgsApi api = new OrgsApi();

    
    /**
     * Delete the specified organization.
     *
     * Delete the specified organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDeleteTest() throws Exception {
        String org = null;
        api.orgsDelete(org);

        // TODO: test validations
    }
    
    /**
     * Create a package deny policy.
     *
     * Create a package deny policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDenyPolicyCreateTest() throws Exception {
        String org = null;
        PackageDenyPolicyRequest data = null;
        PackageDenyPolicy response = api.orgsDenyPolicyCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a package deny policy.
     *
     * Delete a package deny policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDenyPolicyDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsDenyPolicyDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all package deny policies.
     *
     * Get a list of all package deny policies.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDenyPolicyListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<PackageDenyPolicy> response = api.orgsDenyPolicyList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Partially update a package deny policy.
     *
     * Partially update a package deny policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDenyPolicyPartialUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        PackageDenyPolicyRequestPatch data = null;
        PackageDenyPolicy response = api.orgsDenyPolicyPartialUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Get a package deny policy.
     *
     * Get a package deny policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDenyPolicyReadTest() throws Exception {
        String org = null;
        String slugPerm = null;
        PackageDenyPolicy response = api.orgsDenyPolicyRead(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Update a package deny policy.
     *
     * Update a package deny policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsDenyPolicyUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        PackageDenyPolicyRequest data = null;
        PackageDenyPolicy response = api.orgsDenyPolicyUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Create an organization invite for a specific user
     *
     * Create an organization invite for a specific user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesCreateTest() throws Exception {
        String org = null;
        OrganizationInviteRequest data = null;
        OrganizationInvite response = api.orgsInvitesCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific organization invite
     *
     * Delete a specific organization invite
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsInvitesDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Extend an organization invite.
     *
     * Extend an organization invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesExtendTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationInviteExtend response = api.orgsInvitesExtend(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all invites for an organization.
     *
     * Get a list of all invites for an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationInvite> response = api.orgsInvitesList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Update a specific organization invite.
     *
     * Update a specific organization invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesPartialUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationInviteUpdateRequestPatch data = null;
        OrganizationInvite response = api.orgsInvitesPartialUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Resend an organization invite.
     *
     * Resend an organization invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsInvitesResendTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationInviteExtend response = api.orgsInvitesResend(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Create a package license policy.
     *
     * Create a package license policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyCreateTest() throws Exception {
        String org = null;
        OrganizationPackageLicensePolicyRequest data = null;
        OrganizationPackageLicensePolicy response = api.orgsLicensePolicyCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a package license policy.
     *
     * Delete a package license policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsLicensePolicyDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Create an evaluation request for this policy.
     *
     * Create an evaluation request for this policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyEvaluationCreateTest() throws Exception {
        String org = null;
        String policySlugPerm = null;
        PackageLicensePolicyEvaluationRequestRequest data = null;
        PackageLicensePolicyEvaluationRequest response = api.orgsLicensePolicyEvaluationCreate(org, policySlugPerm, data);

        // TODO: test validations
    }
    
    /**
     * List evaluation requests for this policy.
     *
     * List evaluation requests for this policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyEvaluationListTest() throws Exception {
        String org = null;
        String policySlugPerm = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<PackageLicensePolicyEvaluationRequest> response = api.orgsLicensePolicyEvaluationList(org, policySlugPerm, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieve an evaluation request for this policy.
     *
     * Retrieve an evaluation request for this policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyEvaluationReadTest() throws Exception {
        String org = null;
        String policySlugPerm = null;
        String slugPerm = null;
        PackageLicensePolicyEvaluationRequest response = api.orgsLicensePolicyEvaluationRead(org, policySlugPerm, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all package license policies.
     *
     * Get a list of all package license policies.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationPackageLicensePolicy> response = api.orgsLicensePolicyList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Partially update a package license policy.
     *
     * Partially update a package license policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyPartialUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationPackageLicensePolicyRequestPatch data = null;
        OrganizationPackageLicensePolicy response = api.orgsLicensePolicyPartialUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Get a package license policy.
     *
     * Get a package license policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyReadTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationPackageLicensePolicy response = api.orgsLicensePolicyRead(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Update a package license policy.
     *
     * Update a package license policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationPackageLicensePolicyRequest data = null;
        OrganizationPackageLicensePolicy response = api.orgsLicensePolicyUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * List all current license policy violations for this Organization.
     *
     * List all current license policy violations for this Organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsLicensePolicyViolationListTest() throws Exception {
        String org = null;
        String cursor = null;
        java.math.BigInteger pageSize = null;
        PackageLicensePolicyViolationLogCursorPage response = api.orgsLicensePolicyViolationList(org, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a list of all the organizations you are associated with.
     *
     * Get a list of all the organizations you are associated with.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsListTest() throws Exception {
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<Organization> response = api.orgsList(page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Removes a member from the organization.
     *
     * Removes a member from the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersDeleteTest() throws Exception {
        String org = null;
        String member = null;
        api.orgsMembersDelete(org, member);

        // TODO: test validations
    }
    
    /**
     * Get the details for all organization members.
     *
     * Get the details for all organization members.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        Boolean isActive = null;
        String query = null;
        String sort = null;
        List<OrganizationMembership> response = api.orgsMembersList(org, page, pageSize, isActive, query, sort);

        // TODO: test validations
    }
    
    /**
     * Views for working with organization members.
     *
     * Views for working with organization members.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersPartialUpdateTest() throws Exception {
        String org = null;
        String member = null;
        OrganizationMembershipRequestPatch data = null;
        OrganizationMembership response = api.orgsMembersPartialUpdate(org, member, data);

        // TODO: test validations
    }
    
    /**
     * Get the details for a specific organization member.
     *
     * Get the details for a specific organization member.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersReadTest() throws Exception {
        String org = null;
        String member = null;
        OrganizationMembership response = api.orgsMembersRead(org, member);

        // TODO: test validations
    }
    
    /**
     * Refresh a member of the organization&#39;s API key.
     *
     * Refresh a member of the organization&#39;s API key.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersRefreshTest() throws Exception {
        String org = null;
        String member = null;
        api.orgsMembersRefresh(org, member);

        // TODO: test validations
    }
    
    /**
     * Removes a member from the organization (deprecated, use DELETE instead).
     *
     * Removes a member from the organization (deprecated, use DELETE instead).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersRemoveTest() throws Exception {
        String org = null;
        String member = null;
        api.orgsMembersRemove(org, member);

        // TODO: test validations
    }
    
    /**
     * Update a member&#39;s role in the organization.
     *
     * Update a member&#39;s role in the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersUpdateRoleTest() throws Exception {
        String org = null;
        String member = null;
        OrganizationMembershipRoleUpdateRequestPatch data = null;
        OrganizationMembershipRoleUpdate response = api.orgsMembersUpdateRole(org, member, data);

        // TODO: test validations
    }
    
    /**
     * Update a member&#39;s visibility in the organization.
     *
     * Update a member&#39;s visibility in the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsMembersUpdateVisibilityTest() throws Exception {
        String org = null;
        String member = null;
        OrganizationMembershipVisibilityUpdateRequestPatch data = null;
        OrganizationMembershipVisibilityUpdate response = api.orgsMembersUpdateVisibility(org, member, data);

        // TODO: test validations
    }
    
    /**
     * Create the OpenID Connect provider settings for the org.
     *
     * Create the OpenID Connect provider settings for the org.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsOpenidConnectCreateTest() throws Exception {
        String org = null;
        ProviderSettingsRequest data = null;
        ProviderSettings response = api.orgsOpenidConnectCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific OpenID Connect provider setting for the org.
     *
     * Delete a specific OpenID Connect provider setting for the org.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsOpenidConnectDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsOpenidConnectDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Retrieve the list of OpenID Connect provider settings for the org.
     *
     * Retrieve the list of OpenID Connect provider settings for the org.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsOpenidConnectListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        String query = null;
        String sort = null;
        List<ProviderSettings> response = api.orgsOpenidConnectList(org, page, pageSize, query, sort);

        // TODO: test validations
    }
    
    /**
     * Update a specific OpenID Connect provider setting for the org.
     *
     * Update a specific OpenID Connect provider setting for the org.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsOpenidConnectPartialUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        ProviderSettingsRequestPatch data = null;
        ProviderSettings response = api.orgsOpenidConnectPartialUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve a specific OpenID Connect provider setting for the org.
     *
     * Retrieve a specific OpenID Connect provider setting for the org.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsOpenidConnectReadTest() throws Exception {
        String org = null;
        String slugPerm = null;
        ProviderSettings response = api.orgsOpenidConnectRead(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Update a specific OpenID Connect provider setting for the org.
     *
     * Update a specific OpenID Connect provider setting for the org.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsOpenidConnectUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        ProviderSettingsRequest data = null;
        ProviderSettings response = api.orgsOpenidConnectUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Get the details for the specific organization.
     *
     * Get the details for the specific organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsReadTest() throws Exception {
        String org = null;
        Organization response = api.orgsRead(org);

        // TODO: test validations
    }
    
    /**
     * Update the SAML Authentication settings for this Organization.
     *
     * Update the SAML Authentication settings for this Organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlAuthenticationPartialUpdateTest() throws Exception {
        String org = null;
        OrganizationSAMLAuthRequestPatch data = null;
        OrganizationSAMLAuth response = api.orgsSamlAuthenticationPartialUpdate(org, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve the SAML Authentication settings for this Organization.
     *
     * Retrieve the SAML Authentication settings for this Organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlAuthenticationReadTest() throws Exception {
        String org = null;
        OrganizationSAMLAuth response = api.orgsSamlAuthenticationRead(org);

        // TODO: test validations
    }
    
    /**
     * Create a new SAML Group Sync mapping within an organization.
     *
     * Create a new SAML Group Sync mapping within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncCreateTest() throws Exception {
        String org = null;
        OrganizationGroupSyncRequest data = null;
        OrganizationGroupSync response = api.orgsSamlGroupSyncCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a SAML Group Sync mapping from an organization.
     *
     * Delete a SAML Group Sync mapping from an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsSamlGroupSyncDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Disable SAML Group Sync for this organization.
     *
     * Disable SAML Group Sync for this organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncDisableTest() throws Exception {
        String org = null;
        api.orgsSamlGroupSyncDisable(org);

        // TODO: test validations
    }
    
    /**
     * Enable SAML Group Sync for this organization.
     *
     * Enable SAML Group Sync for this organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncEnableTest() throws Exception {
        String org = null;
        api.orgsSamlGroupSyncEnable(org);

        // TODO: test validations
    }
    
    /**
     * Get the details of all SAML Group Sync mapping within an organization.
     *
     * Get the details of all SAML Group Sync mapping within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationGroupSync> response = api.orgsSamlGroupSyncList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieve the SAML Group Sync status for this organization.
     *
     * Retrieve the SAML Group Sync status for this organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsSamlGroupSyncStatusTest() throws Exception {
        String org = null;
        OrganizationGroupSyncStatus response = api.orgsSamlGroupSyncStatus(org);

        // TODO: test validations
    }
    
    /**
     * Create a service within an organization.
     *
     * Create a service within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesCreateTest() throws Exception {
        String org = null;
        ServiceRequest data = null;
        Service response = api.orgsServicesCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific service
     *
     * Delete a specific service
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesDeleteTest() throws Exception {
        String org = null;
        String service = null;
        api.orgsServicesDelete(org, service);

        // TODO: test validations
    }
    
    /**
     * Get a list of all services within an organization.
     *
     * Get a list of all services within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        String query = null;
        String sort = null;
        List<Service> response = api.orgsServicesList(org, page, pageSize, query, sort);

        // TODO: test validations
    }
    
    /**
     * Update a service within an organization.
     *
     * Update a service within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesPartialUpdateTest() throws Exception {
        String org = null;
        String service = null;
        ServiceRequestPatch data = null;
        Service response = api.orgsServicesPartialUpdate(org, service, data);

        // TODO: test validations
    }
    
    /**
     * Retrieve details of a single service within an organization.
     *
     * Retrieve details of a single service within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesReadTest() throws Exception {
        String org = null;
        String service = null;
        Service response = api.orgsServicesRead(org, service);

        // TODO: test validations
    }
    
    /**
     * Refresh service API token.
     *
     * Refresh service API token.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsServicesRefreshTest() throws Exception {
        String org = null;
        String service = null;
        Service response = api.orgsServicesRefresh(org, service);

        // TODO: test validations
    }
    
    /**
     * Create a team for this organization.
     *
     * Create a team for this organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsCreateTest() throws Exception {
        String org = null;
        OrganizationTeamRequest data = null;
        OrganizationTeam response = api.orgsTeamsCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific team in a organization.
     *
     * Delete a specific team in a organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsDeleteTest() throws Exception {
        String org = null;
        String team = null;
        api.orgsTeamsDelete(org, team);

        // TODO: test validations
    }
    
    /**
     * Get the details of all teams within an organization.
     *
     * Get the details of all teams within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        Boolean forUser = null;
        String query = null;
        String sort = null;
        List<OrganizationTeam> response = api.orgsTeamsList(org, page, pageSize, forUser, query, sort);

        // TODO: test validations
    }
    
    /**
     * Add users to a team.
     *
     * Add users to a team.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsMembersCreateTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamMembers data = null;
        OrganizationTeamMembers response = api.orgsTeamsMembersCreate(org, team, data);

        // TODO: test validations
    }
    
    /**
     * List all members for the team.
     *
     * List all members for the team.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsMembersListTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamMembers response = api.orgsTeamsMembersList(org, team);

        // TODO: test validations
    }
    
    /**
     * Replace all team members.
     *
     * Replace all team members.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsMembersUpdateTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamMembers data = null;
        OrganizationTeamMembers response = api.orgsTeamsMembersUpdate(org, team, data);

        // TODO: test validations
    }
    
    /**
     * Update a specific team in a organization.
     *
     * Update a specific team in a organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsPartialUpdateTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeamRequestPatch data = null;
        OrganizationTeam response = api.orgsTeamsPartialUpdate(org, team, data);

        // TODO: test validations
    }
    
    /**
     * Get the details of a specific team within an organization.
     *
     * Get the details of a specific team within an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsTeamsReadTest() throws Exception {
        String org = null;
        String team = null;
        OrganizationTeam response = api.orgsTeamsRead(org, team);

        // TODO: test validations
    }
    
    /**
     * Create a package vulnerability policy.
     *
     * Create a package vulnerability policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyCreateTest() throws Exception {
        String org = null;
        OrganizationPackageVulnerabilityPolicyRequest data = null;
        OrganizationPackageVulnerabilityPolicy response = api.orgsVulnerabilityPolicyCreate(org, data);

        // TODO: test validations
    }
    
    /**
     * Delete a package vulnerability policy.
     *
     * Delete a package vulnerability policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyDeleteTest() throws Exception {
        String org = null;
        String slugPerm = null;
        api.orgsVulnerabilityPolicyDelete(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Create an evaluation request for this policy.
     *
     * Create an evaluation request for this policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyEvaluationCreateTest() throws Exception {
        String org = null;
        String policySlugPerm = null;
        PackageVulnerabilityPolicyEvaluationRequestRequest data = null;
        PackageVulnerabilityPolicyEvaluationRequest response = api.orgsVulnerabilityPolicyEvaluationCreate(org, policySlugPerm, data);

        // TODO: test validations
    }
    
    /**
     * List evaluation requests for this policy.
     *
     * List evaluation requests for this policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyEvaluationListTest() throws Exception {
        String org = null;
        String policySlugPerm = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<PackageVulnerabilityPolicyEvaluationRequest> response = api.orgsVulnerabilityPolicyEvaluationList(org, policySlugPerm, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieve an evaluation request for this policy.
     *
     * Retrieve an evaluation request for this policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyEvaluationReadTest() throws Exception {
        String org = null;
        String policySlugPerm = null;
        String slugPerm = null;
        PackageVulnerabilityPolicyEvaluationRequest response = api.orgsVulnerabilityPolicyEvaluationRead(org, policySlugPerm, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all package vulnerability policies.
     *
     * Get a list of all package vulnerability policies.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyListTest() throws Exception {
        String org = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        List<OrganizationPackageVulnerabilityPolicy> response = api.orgsVulnerabilityPolicyList(org, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Partially update a package vulnerability policy.
     *
     * Partially update a package vulnerability policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyPartialUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationPackageVulnerabilityPolicyRequestPatch data = null;
        OrganizationPackageVulnerabilityPolicy response = api.orgsVulnerabilityPolicyPartialUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Get a package vulnerability policy.
     *
     * Get a package vulnerability policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyReadTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationPackageVulnerabilityPolicy response = api.orgsVulnerabilityPolicyRead(org, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Update a package vulnerability policy.
     *
     * Update a package vulnerability policy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyUpdateTest() throws Exception {
        String org = null;
        String slugPerm = null;
        OrganizationPackageVulnerabilityPolicyRequest data = null;
        OrganizationPackageVulnerabilityPolicy response = api.orgsVulnerabilityPolicyUpdate(org, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * List all current vulnerability policy violations for this Organization.
     *
     * List all current vulnerability policy violations for this Organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void orgsVulnerabilityPolicyViolationListTest() throws Exception {
        String org = null;
        String cursor = null;
        java.math.BigInteger pageSize = null;
        PackageVulnerabilityPolicyViolationLogCursorPage response = api.orgsVulnerabilityPolicyViolationList(org, cursor, pageSize);

        // TODO: test validations
    }
    
}
