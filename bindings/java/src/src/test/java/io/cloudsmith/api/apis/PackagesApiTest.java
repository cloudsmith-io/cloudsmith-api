/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.models.AlpinePackageUploadRequest;
import io.cloudsmith.api.models.AlpinePackageUploadResponse;
import io.cloudsmith.api.models.CargoPackageUploadRequest;
import io.cloudsmith.api.models.CargoPackageUploadResponse;
import io.cloudsmith.api.models.CocoapodsPackageUploadRequest;
import io.cloudsmith.api.models.CocoapodsPackageUploadResponse;
import io.cloudsmith.api.models.ComposerPackageUploadRequest;
import io.cloudsmith.api.models.ComposerPackageUploadResponse;
import io.cloudsmith.api.models.ConanPackageUploadRequest;
import io.cloudsmith.api.models.ConanPackageUploadResponse;
import io.cloudsmith.api.models.CondaPackageUploadRequest;
import io.cloudsmith.api.models.CondaPackageUploadResponse;
import io.cloudsmith.api.models.CranPackageUploadRequest;
import io.cloudsmith.api.models.CranPackageUploadResponse;
import io.cloudsmith.api.models.DartPackageUploadRequest;
import io.cloudsmith.api.models.DartPackageUploadResponse;
import io.cloudsmith.api.models.DebPackageUploadRequest;
import io.cloudsmith.api.models.DebPackageUploadResponse;
import io.cloudsmith.api.models.DockerPackageUploadRequest;
import io.cloudsmith.api.models.DockerPackageUploadResponse;
import io.cloudsmith.api.models.ErrorDetail;
import io.cloudsmith.api.models.GoPackageUploadRequest;
import io.cloudsmith.api.models.GoPackageUploadResponse;
import io.cloudsmith.api.models.HelmPackageUploadRequest;
import io.cloudsmith.api.models.HelmPackageUploadResponse;
import io.cloudsmith.api.models.LuarocksPackageUploadRequest;
import io.cloudsmith.api.models.LuarocksPackageUploadResponse;
import io.cloudsmith.api.models.MavenPackageUploadRequest;
import io.cloudsmith.api.models.MavenPackageUploadResponse;
import io.cloudsmith.api.models.NpmPackageUploadRequest;
import io.cloudsmith.api.models.NpmPackageUploadResponse;
import io.cloudsmith.api.models.NugetPackageUploadRequest;
import io.cloudsmith.api.models.NugetPackageUploadResponse;
import io.cloudsmith.api.models.P2PackageUploadRequest;
import io.cloudsmith.api.models.P2PackageUploadResponse;
import io.cloudsmith.api.models.PackageCopyRequest;
import io.cloudsmith.api.models.PackageCopyResponse;
import io.cloudsmith.api.models.PackageDependenciesResponse;
import io.cloudsmith.api.models.PackageMoveRequest;
import io.cloudsmith.api.models.PackageMoveResponse;
import io.cloudsmith.api.models.PackageQuarantineRequest;
import io.cloudsmith.api.models.PackageQuarantineResponse;
import io.cloudsmith.api.models.PackageResponse;
import io.cloudsmith.api.models.PackageResyncResponse;
import io.cloudsmith.api.models.PackageStatusResponse;
import io.cloudsmith.api.models.PackageTagRequest;
import io.cloudsmith.api.models.PythonPackageUploadRequest;
import io.cloudsmith.api.models.PythonPackageUploadResponse;
import io.cloudsmith.api.models.RawPackageUploadRequest;
import io.cloudsmith.api.models.RawPackageUploadResponse;
import io.cloudsmith.api.models.RpmPackageUploadRequest;
import io.cloudsmith.api.models.RpmPackageUploadResponse;
import io.cloudsmith.api.models.RubyPackageUploadRequest;
import io.cloudsmith.api.models.RubyPackageUploadResponse;
import io.cloudsmith.api.models.TerraformPackageUploadRequest;
import io.cloudsmith.api.models.TerraformPackageUploadResponse;
import io.cloudsmith.api.models.VagrantPackageUploadRequest;
import io.cloudsmith.api.models.VagrantPackageUploadResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackagesApi
 */
@Ignore
public class PackagesApiTest {

    private final PackagesApi api = new PackagesApi();

    
    /**
     * Copy a package to another repository.
     *
     * Copy a package to another repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesCopyTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageCopyRequest data = null;
        PackageCopyResponse response = api.packagesCopy(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific package in a repository.
     *
     * Delete a specific package in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesDeleteTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        api.packagesDelete(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Get the direct (non-transitive) dependencies list for a package.
     *
     * Get the direct (non-transitive) dependencies list for a package.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesDependenciesTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageDependenciesResponse response = api.packagesDependencies(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Get a list of all packages associated with repository.
     *
     * Get a list of all packages associated with repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesListTest() throws Exception {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer pageSize = null;
        String query = null;
        String sort = null;
        List<PackageResponse> response = api.packagesList(owner, repo, page, pageSize, query, sort);

        // TODO: test validations
    }
    
    /**
     * Move a package to another repository.
     *
     * Move a package to another repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesMoveTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageMoveRequest data = null;
        PackageMoveResponse response = api.packagesMove(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Quarantine or restore a package.
     *
     * Quarantine or restore a package.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesQuarantineTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageQuarantineRequest data = null;
        PackageQuarantineResponse response = api.packagesQuarantine(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Get a specific package in a repository.
     *
     * Get a specific package in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesReadTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageResponse response = api.packagesRead(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Schedule a package for resynchronisation.
     *
     * Schedule a package for resynchronisation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesResyncTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageResyncResponse response = api.packagesResync(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Schedule a package for scanning.
     *
     * Schedule a package for scanning.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesScanTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageResponse response = api.packagesScan(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Get the synchronisation status for a package.
     *
     * Get the synchronisation status for a package.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesStatusTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageStatusResponse response = api.packagesStatus(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Add/Replace/Remove tags for a package.
     *
     * Add/Replace/Remove tags for a package.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesTagTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageTagRequest data = null;
        PackageResponse response = api.packagesTag(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Alpine package
     *
     * Create a new Alpine package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadAlpineTest() throws Exception {
        String owner = null;
        String repo = null;
        AlpinePackageUploadRequest data = null;
        AlpinePackageUploadResponse response = api.packagesUploadAlpine(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Cargo package
     *
     * Create a new Cargo package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCargoTest() throws Exception {
        String owner = null;
        String repo = null;
        CargoPackageUploadRequest data = null;
        CargoPackageUploadResponse response = api.packagesUploadCargo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new CocoaPods package
     *
     * Create a new CocoaPods package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCocoapodsTest() throws Exception {
        String owner = null;
        String repo = null;
        CocoapodsPackageUploadRequest data = null;
        CocoapodsPackageUploadResponse response = api.packagesUploadCocoapods(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Composer package
     *
     * Create a new Composer package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadComposerTest() throws Exception {
        String owner = null;
        String repo = null;
        ComposerPackageUploadRequest data = null;
        ComposerPackageUploadResponse response = api.packagesUploadComposer(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Conan package
     *
     * Create a new Conan package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadConanTest() throws Exception {
        String owner = null;
        String repo = null;
        ConanPackageUploadRequest data = null;
        ConanPackageUploadResponse response = api.packagesUploadConan(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Conda package
     *
     * Create a new Conda package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCondaTest() throws Exception {
        String owner = null;
        String repo = null;
        CondaPackageUploadRequest data = null;
        CondaPackageUploadResponse response = api.packagesUploadConda(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new CRAN package
     *
     * Create a new CRAN package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCranTest() throws Exception {
        String owner = null;
        String repo = null;
        CranPackageUploadRequest data = null;
        CranPackageUploadResponse response = api.packagesUploadCran(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Dart package
     *
     * Create a new Dart package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDartTest() throws Exception {
        String owner = null;
        String repo = null;
        DartPackageUploadRequest data = null;
        DartPackageUploadResponse response = api.packagesUploadDart(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Debian package
     *
     * Create a new Debian package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDebTest() throws Exception {
        String owner = null;
        String repo = null;
        DebPackageUploadRequest data = null;
        DebPackageUploadResponse response = api.packagesUploadDeb(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Docker package
     *
     * Create a new Docker package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDockerTest() throws Exception {
        String owner = null;
        String repo = null;
        DockerPackageUploadRequest data = null;
        DockerPackageUploadResponse response = api.packagesUploadDocker(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Go package
     *
     * Create a new Go package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadGoTest() throws Exception {
        String owner = null;
        String repo = null;
        GoPackageUploadRequest data = null;
        GoPackageUploadResponse response = api.packagesUploadGo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Helm package
     *
     * Create a new Helm package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadHelmTest() throws Exception {
        String owner = null;
        String repo = null;
        HelmPackageUploadRequest data = null;
        HelmPackageUploadResponse response = api.packagesUploadHelm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new LuaRocks package
     *
     * Create a new LuaRocks package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadLuarocksTest() throws Exception {
        String owner = null;
        String repo = null;
        LuarocksPackageUploadRequest data = null;
        LuarocksPackageUploadResponse response = api.packagesUploadLuarocks(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Maven package
     *
     * Create a new Maven package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadMavenTest() throws Exception {
        String owner = null;
        String repo = null;
        MavenPackageUploadRequest data = null;
        MavenPackageUploadResponse response = api.packagesUploadMaven(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new npm package
     *
     * Create a new npm package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadNpmTest() throws Exception {
        String owner = null;
        String repo = null;
        NpmPackageUploadRequest data = null;
        NpmPackageUploadResponse response = api.packagesUploadNpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new NuGet package
     *
     * Create a new NuGet package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadNugetTest() throws Exception {
        String owner = null;
        String repo = null;
        NugetPackageUploadRequest data = null;
        NugetPackageUploadResponse response = api.packagesUploadNuget(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new P2 package
     *
     * Create a new P2 package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadP2Test() throws Exception {
        String owner = null;
        String repo = null;
        P2PackageUploadRequest data = null;
        P2PackageUploadResponse response = api.packagesUploadP2(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Python package
     *
     * Create a new Python package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadPythonTest() throws Exception {
        String owner = null;
        String repo = null;
        PythonPackageUploadRequest data = null;
        PythonPackageUploadResponse response = api.packagesUploadPython(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Raw package
     *
     * Create a new Raw package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRawTest() throws Exception {
        String owner = null;
        String repo = null;
        RawPackageUploadRequest data = null;
        RawPackageUploadResponse response = api.packagesUploadRaw(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new RedHat package
     *
     * Create a new RedHat package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRpmTest() throws Exception {
        String owner = null;
        String repo = null;
        RpmPackageUploadRequest data = null;
        RpmPackageUploadResponse response = api.packagesUploadRpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Ruby package
     *
     * Create a new Ruby package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRubyTest() throws Exception {
        String owner = null;
        String repo = null;
        RubyPackageUploadRequest data = null;
        RubyPackageUploadResponse response = api.packagesUploadRuby(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Terraform package
     *
     * Create a new Terraform package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadTerraformTest() throws Exception {
        String owner = null;
        String repo = null;
        TerraformPackageUploadRequest data = null;
        TerraformPackageUploadResponse response = api.packagesUploadTerraform(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Vagrant package
     *
     * Create a new Vagrant package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesUploadVagrantTest() throws Exception {
        String owner = null;
        String repo = null;
        VagrantPackageUploadRequest data = null;
        VagrantPackageUploadResponse response = api.packagesUploadVagrant(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Alpine package
     *
     * Validate parameters for create Alpine package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadAlpineTest() throws Exception {
        String owner = null;
        String repo = null;
        AlpinePackageUploadRequest data = null;
        api.packagesValidateUploadAlpine(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Cargo package
     *
     * Validate parameters for create Cargo package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCargoTest() throws Exception {
        String owner = null;
        String repo = null;
        CargoPackageUploadRequest data = null;
        api.packagesValidateUploadCargo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create CocoaPods package
     *
     * Validate parameters for create CocoaPods package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCocoapodsTest() throws Exception {
        String owner = null;
        String repo = null;
        CocoapodsPackageUploadRequest data = null;
        api.packagesValidateUploadCocoapods(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Composer package
     *
     * Validate parameters for create Composer package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadComposerTest() throws Exception {
        String owner = null;
        String repo = null;
        ComposerPackageUploadRequest data = null;
        api.packagesValidateUploadComposer(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Conan package
     *
     * Validate parameters for create Conan package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadConanTest() throws Exception {
        String owner = null;
        String repo = null;
        ConanPackageUploadRequest data = null;
        api.packagesValidateUploadConan(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Conda package
     *
     * Validate parameters for create Conda package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCondaTest() throws Exception {
        String owner = null;
        String repo = null;
        CondaPackageUploadRequest data = null;
        api.packagesValidateUploadConda(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create CRAN package
     *
     * Validate parameters for create CRAN package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCranTest() throws Exception {
        String owner = null;
        String repo = null;
        CranPackageUploadRequest data = null;
        api.packagesValidateUploadCran(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Dart package
     *
     * Validate parameters for create Dart package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDartTest() throws Exception {
        String owner = null;
        String repo = null;
        DartPackageUploadRequest data = null;
        api.packagesValidateUploadDart(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Debian package
     *
     * Validate parameters for create Debian package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDebTest() throws Exception {
        String owner = null;
        String repo = null;
        DebPackageUploadRequest data = null;
        api.packagesValidateUploadDeb(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Docker package
     *
     * Validate parameters for create Docker package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDockerTest() throws Exception {
        String owner = null;
        String repo = null;
        DockerPackageUploadRequest data = null;
        api.packagesValidateUploadDocker(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Go package
     *
     * Validate parameters for create Go package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadGoTest() throws Exception {
        String owner = null;
        String repo = null;
        GoPackageUploadRequest data = null;
        api.packagesValidateUploadGo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Helm package
     *
     * Validate parameters for create Helm package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadHelmTest() throws Exception {
        String owner = null;
        String repo = null;
        HelmPackageUploadRequest data = null;
        api.packagesValidateUploadHelm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create LuaRocks package
     *
     * Validate parameters for create LuaRocks package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadLuarocksTest() throws Exception {
        String owner = null;
        String repo = null;
        LuarocksPackageUploadRequest data = null;
        api.packagesValidateUploadLuarocks(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Maven package
     *
     * Validate parameters for create Maven package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadMavenTest() throws Exception {
        String owner = null;
        String repo = null;
        MavenPackageUploadRequest data = null;
        api.packagesValidateUploadMaven(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create npm package
     *
     * Validate parameters for create npm package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadNpmTest() throws Exception {
        String owner = null;
        String repo = null;
        NpmPackageUploadRequest data = null;
        api.packagesValidateUploadNpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create NuGet package
     *
     * Validate parameters for create NuGet package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadNugetTest() throws Exception {
        String owner = null;
        String repo = null;
        NugetPackageUploadRequest data = null;
        api.packagesValidateUploadNuget(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create P2 package
     *
     * Validate parameters for create P2 package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadP2Test() throws Exception {
        String owner = null;
        String repo = null;
        P2PackageUploadRequest data = null;
        api.packagesValidateUploadP2(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Python package
     *
     * Validate parameters for create Python package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadPythonTest() throws Exception {
        String owner = null;
        String repo = null;
        PythonPackageUploadRequest data = null;
        api.packagesValidateUploadPython(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Raw package
     *
     * Validate parameters for create Raw package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRawTest() throws Exception {
        String owner = null;
        String repo = null;
        RawPackageUploadRequest data = null;
        api.packagesValidateUploadRaw(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create RedHat package
     *
     * Validate parameters for create RedHat package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRpmTest() throws Exception {
        String owner = null;
        String repo = null;
        RpmPackageUploadRequest data = null;
        api.packagesValidateUploadRpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Ruby package
     *
     * Validate parameters for create Ruby package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRubyTest() throws Exception {
        String owner = null;
        String repo = null;
        RubyPackageUploadRequest data = null;
        api.packagesValidateUploadRuby(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Terraform package
     *
     * Validate parameters for create Terraform package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadTerraformTest() throws Exception {
        String owner = null;
        String repo = null;
        TerraformPackageUploadRequest data = null;
        api.packagesValidateUploadTerraform(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Vagrant package
     *
     * Validate parameters for create Vagrant package
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadVagrantTest() throws Exception {
        String owner = null;
        String repo = null;
        VagrantPackageUploadRequest data = null;
        api.packagesValidateUploadVagrant(owner, repo, data);

        // TODO: test validations
    }
    
}
