/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.ApiException;
import io.cloudsmith.api.models.MavenPackageUpload;
import io.cloudsmith.api.models.PackageStatus;
import io.cloudsmith.api.models.PackagesUploadDeb;
import io.cloudsmith.api.models.PackagesUploadMaven;
import io.cloudsmith.api.models.PackagesUploadPython;
import io.cloudsmith.api.models.PackagesUploadRaw;
import io.cloudsmith.api.models.PackagesUploadRpm;
import io.cloudsmith.api.models.PackagesUploadRuby;
import io.cloudsmith.api.models.PackagesUploadVagrant;
import io.cloudsmith.api.models.PackagesValidateuploadDeb;
import io.cloudsmith.api.models.PackagesValidateuploadMaven;
import io.cloudsmith.api.models.PackagesValidateuploadPython;
import io.cloudsmith.api.models.PackagesValidateuploadRaw;
import io.cloudsmith.api.models.PackagesValidateuploadRpm;
import io.cloudsmith.api.models.PackagesValidateuploadRuby;
import io.cloudsmith.api.models.PackagesValidateuploadVagrant;
import io.cloudsmith.api.models.RpmPackageUpload;
import io.cloudsmith.api.models.Status;
import io.cloudsmith.api.models.VagrantPackageUpload;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackagesApi
 */
@Ignore
public class PackagesApiTest {

    private final PackagesApi api = new PackagesApi();

    
    /**
     * Delete a specific package in a repository.
     *
     * Delete a specific package in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slug = null;
        api.packagesDelete(owner, repo, slug);

        // TODO: test validations
    }
    
    /**
     * Views for working with repository packages.
     *
     * Views for working with repository packages.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesListTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer pageSize = null;
        List<RpmPackageUpload> response = api.packagesList(owner, repo, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Get a specific package in a repository.
     *
     * Get a specific package in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesReadTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slug = null;
        RpmPackageUpload response = api.packagesRead(owner, repo, slug);

        // TODO: test validations
    }
    
    /**
     * Get the synchronisation status for a package.
     *
     * Get the synchronisation status for a package.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesStatusTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slug = null;
        PackageStatus response = api.packagesStatus(owner, repo, slug);

        // TODO: test validations
    }
    
    /**
     * Create a new Debian package
     *
     * Create a new Debian package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDebTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadDeb data = null;
        RpmPackageUpload response = api.packagesUploadDeb(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Maven package
     *
     * Create a new Maven package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadMavenTest() throws ApiException {
        String repo = null;
        String owner = null;
        PackagesUploadMaven data = null;
        MavenPackageUpload response = api.packagesUploadMaven(repo, owner, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Python package
     *
     * Create a new Python package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadPythonTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadPython data = null;
        RpmPackageUpload response = api.packagesUploadPython(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Raw package
     *
     * Create a new Raw package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRawTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadRaw data = null;
        RpmPackageUpload response = api.packagesUploadRaw(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new RedHat package
     *
     * Create a new RedHat package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRpmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadRpm data = null;
        RpmPackageUpload response = api.packagesUploadRpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Ruby package
     *
     * Create a new Ruby package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRubyTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadRuby data = null;
        RpmPackageUpload response = api.packagesUploadRuby(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Vagrant package
     *
     * Create a new Vagrant package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadVagrantTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadVagrant data = null;
        VagrantPackageUpload response = api.packagesUploadVagrant(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Debian package
     *
     * Validate parameters for create Debian package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDebTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadDeb data = null;
        api.packagesValidateUploadDeb(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Maven package
     *
     * Validate parameters for create Maven package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadMavenTest() throws ApiException {
        String repo = null;
        String owner = null;
        PackagesValidateuploadMaven data = null;
        api.packagesValidateUploadMaven(repo, owner, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Python package
     *
     * Validate parameters for create Python package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadPythonTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadPython data = null;
        api.packagesValidateUploadPython(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Raw package
     *
     * Validate parameters for create Raw package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRawTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadRaw data = null;
        api.packagesValidateUploadRaw(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create RedHat package
     *
     * Validate parameters for create RedHat package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRpmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadRpm data = null;
        api.packagesValidateUploadRpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Ruby package
     *
     * Validate parameters for create Ruby package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRubyTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadRuby data = null;
        api.packagesValidateUploadRuby(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Vagrant package
     *
     * Validate parameters for create Vagrant package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadVagrantTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadVagrant data = null;
        api.packagesValidateUploadVagrant(owner, repo, data);

        // TODO: test validations
    }
    
}
