/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.ApiException;
import io.cloudsmith.api.models.ConanPackageUpload;
import io.cloudsmith.api.models.MavenPackageUpload;
import io.cloudsmith.api.models.ModelPackage;
import io.cloudsmith.api.models.PackageCopy;
import io.cloudsmith.api.models.PackageMove;
import io.cloudsmith.api.models.PackageStatus;
import io.cloudsmith.api.models.PackagesCopy;
import io.cloudsmith.api.models.PackagesMove;
import io.cloudsmith.api.models.PackagesResync;
import io.cloudsmith.api.models.PackagesUploadAlpine;
import io.cloudsmith.api.models.PackagesUploadCargo;
import io.cloudsmith.api.models.PackagesUploadCocoapods;
import io.cloudsmith.api.models.PackagesUploadComposer;
import io.cloudsmith.api.models.PackagesUploadConan;
import io.cloudsmith.api.models.PackagesUploadCran;
import io.cloudsmith.api.models.PackagesUploadDart;
import io.cloudsmith.api.models.PackagesUploadDeb;
import io.cloudsmith.api.models.PackagesUploadDocker;
import io.cloudsmith.api.models.PackagesUploadGo;
import io.cloudsmith.api.models.PackagesUploadHelm;
import io.cloudsmith.api.models.PackagesUploadLuarocks;
import io.cloudsmith.api.models.PackagesUploadMaven;
import io.cloudsmith.api.models.PackagesUploadNpm;
import io.cloudsmith.api.models.PackagesUploadNuget;
import io.cloudsmith.api.models.PackagesUploadPython;
import io.cloudsmith.api.models.PackagesUploadRaw;
import io.cloudsmith.api.models.PackagesUploadRpm;
import io.cloudsmith.api.models.PackagesUploadRuby;
import io.cloudsmith.api.models.PackagesUploadVagrant;
import io.cloudsmith.api.models.PackagesValidateuploadAlpine;
import io.cloudsmith.api.models.PackagesValidateuploadCargo;
import io.cloudsmith.api.models.PackagesValidateuploadCocoapods;
import io.cloudsmith.api.models.PackagesValidateuploadComposer;
import io.cloudsmith.api.models.PackagesValidateuploadConan;
import io.cloudsmith.api.models.PackagesValidateuploadCran;
import io.cloudsmith.api.models.PackagesValidateuploadDart;
import io.cloudsmith.api.models.PackagesValidateuploadDeb;
import io.cloudsmith.api.models.PackagesValidateuploadDocker;
import io.cloudsmith.api.models.PackagesValidateuploadGo;
import io.cloudsmith.api.models.PackagesValidateuploadHelm;
import io.cloudsmith.api.models.PackagesValidateuploadLuarocks;
import io.cloudsmith.api.models.PackagesValidateuploadMaven;
import io.cloudsmith.api.models.PackagesValidateuploadNpm;
import io.cloudsmith.api.models.PackagesValidateuploadNuget;
import io.cloudsmith.api.models.PackagesValidateuploadPython;
import io.cloudsmith.api.models.PackagesValidateuploadRaw;
import io.cloudsmith.api.models.PackagesValidateuploadRpm;
import io.cloudsmith.api.models.PackagesValidateuploadRuby;
import io.cloudsmith.api.models.PackagesValidateuploadVagrant;
import io.cloudsmith.api.models.RawPackageUpload;
import io.cloudsmith.api.models.Status;
import io.cloudsmith.api.models.VagrantPackageUpload;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PackagesApi
 */
@Ignore
public class PackagesApiTest {

    private final PackagesApi api = new PackagesApi();

    
    /**
     * Copy a package to another repository.
     *
     * Copy a package to another repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesCopyTest() throws ApiException {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackagesCopy data = null;
        PackageCopy response = api.packagesCopy(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific package in a repository.
     *
     * Delete a specific package in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        String identifier = null;
        api.packagesDelete(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Get a list of all packages associated with repository.
     *
     * Get a list of all packages associated with repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesListTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer pageSize = null;
        String query = null;
        List<ModelPackage> response = api.packagesList(owner, repo, page, pageSize, query);

        // TODO: test validations
    }
    
    /**
     * Move a package to another repository.
     *
     * Move a package to another repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesMoveTest() throws ApiException {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackagesMove data = null;
        PackageMove response = api.packagesMove(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Get a specific package in a repository.
     *
     * Get a specific package in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesReadTest() throws ApiException {
        String owner = null;
        String repo = null;
        String identifier = null;
        ModelPackage response = api.packagesRead(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Schedule a package for resynchronisation.
     *
     * Schedule a package for resynchronisation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesResyncTest() throws ApiException {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackagesResync data = null;
        ModelPackage response = api.packagesResync(owner, repo, identifier, data);

        // TODO: test validations
    }
    
    /**
     * Get the synchronisation status for a package.
     *
     * Get the synchronisation status for a package.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesStatusTest() throws ApiException {
        String owner = null;
        String repo = null;
        String identifier = null;
        PackageStatus response = api.packagesStatus(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Create a new Alpine package
     *
     * Create a new Alpine package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadAlpineTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadAlpine data = null;
        ModelPackage response = api.packagesUploadAlpine(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Cargo package
     *
     * Create a new Cargo package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCargoTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadCargo data = null;
        ModelPackage response = api.packagesUploadCargo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new CocoaPods package
     *
     * Create a new CocoaPods package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCocoapodsTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadCocoapods data = null;
        ModelPackage response = api.packagesUploadCocoapods(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Composer package
     *
     * Create a new Composer package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadComposerTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadComposer data = null;
        ModelPackage response = api.packagesUploadComposer(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Conan package
     *
     * Create a new Conan package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadConanTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadConan data = null;
        ConanPackageUpload response = api.packagesUploadConan(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new CRAN package
     *
     * Create a new CRAN package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadCranTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadCran data = null;
        ModelPackage response = api.packagesUploadCran(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Dart package
     *
     * Create a new Dart package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDartTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadDart data = null;
        ModelPackage response = api.packagesUploadDart(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Debian package
     *
     * Create a new Debian package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDebTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadDeb data = null;
        ModelPackage response = api.packagesUploadDeb(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Docker package
     *
     * Create a new Docker package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadDockerTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadDocker data = null;
        ModelPackage response = api.packagesUploadDocker(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Go package
     *
     * Create a new Go package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadGoTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadGo data = null;
        ModelPackage response = api.packagesUploadGo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Helm package
     *
     * Create a new Helm package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadHelmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadHelm data = null;
        ModelPackage response = api.packagesUploadHelm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new LuaRocks package
     *
     * Create a new LuaRocks package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadLuarocksTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadLuarocks data = null;
        ModelPackage response = api.packagesUploadLuarocks(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Maven package
     *
     * Create a new Maven package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadMavenTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadMaven data = null;
        MavenPackageUpload response = api.packagesUploadMaven(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new npm package
     *
     * Create a new npm package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadNpmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadNpm data = null;
        ModelPackage response = api.packagesUploadNpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new NuGet package
     *
     * Create a new NuGet package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadNugetTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadNuget data = null;
        ModelPackage response = api.packagesUploadNuget(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Python package
     *
     * Create a new Python package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadPythonTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadPython data = null;
        ModelPackage response = api.packagesUploadPython(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Raw package
     *
     * Create a new Raw package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRawTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadRaw data = null;
        RawPackageUpload response = api.packagesUploadRaw(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new RedHat package
     *
     * Create a new RedHat package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRpmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadRpm data = null;
        ModelPackage response = api.packagesUploadRpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Ruby package
     *
     * Create a new Ruby package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadRubyTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadRuby data = null;
        ModelPackage response = api.packagesUploadRuby(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Create a new Vagrant package
     *
     * Create a new Vagrant package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesUploadVagrantTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesUploadVagrant data = null;
        VagrantPackageUpload response = api.packagesUploadVagrant(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Alpine package
     *
     * Validate parameters for create Alpine package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadAlpineTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadAlpine data = null;
        api.packagesValidateUploadAlpine(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Cargo package
     *
     * Validate parameters for create Cargo package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCargoTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadCargo data = null;
        api.packagesValidateUploadCargo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create CocoaPods package
     *
     * Validate parameters for create CocoaPods package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCocoapodsTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadCocoapods data = null;
        api.packagesValidateUploadCocoapods(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Composer package
     *
     * Validate parameters for create Composer package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadComposerTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadComposer data = null;
        api.packagesValidateUploadComposer(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Conan package
     *
     * Validate parameters for create Conan package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadConanTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadConan data = null;
        api.packagesValidateUploadConan(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create CRAN package
     *
     * Validate parameters for create CRAN package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadCranTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadCran data = null;
        api.packagesValidateUploadCran(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Dart package
     *
     * Validate parameters for create Dart package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDartTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadDart data = null;
        api.packagesValidateUploadDart(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Debian package
     *
     * Validate parameters for create Debian package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDebTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadDeb data = null;
        api.packagesValidateUploadDeb(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Docker package
     *
     * Validate parameters for create Docker package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadDockerTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadDocker data = null;
        api.packagesValidateUploadDocker(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Go package
     *
     * Validate parameters for create Go package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadGoTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadGo data = null;
        api.packagesValidateUploadGo(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Helm package
     *
     * Validate parameters for create Helm package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadHelmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadHelm data = null;
        api.packagesValidateUploadHelm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create LuaRocks package
     *
     * Validate parameters for create LuaRocks package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadLuarocksTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadLuarocks data = null;
        api.packagesValidateUploadLuarocks(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Maven package
     *
     * Validate parameters for create Maven package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadMavenTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadMaven data = null;
        api.packagesValidateUploadMaven(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create npm package
     *
     * Validate parameters for create npm package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadNpmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadNpm data = null;
        api.packagesValidateUploadNpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create NuGet package
     *
     * Validate parameters for create NuGet package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadNugetTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadNuget data = null;
        api.packagesValidateUploadNuget(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Python package
     *
     * Validate parameters for create Python package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadPythonTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadPython data = null;
        api.packagesValidateUploadPython(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Raw package
     *
     * Validate parameters for create Raw package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRawTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadRaw data = null;
        api.packagesValidateUploadRaw(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create RedHat package
     *
     * Validate parameters for create RedHat package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRpmTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadRpm data = null;
        api.packagesValidateUploadRpm(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Ruby package
     *
     * Validate parameters for create Ruby package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadRubyTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadRuby data = null;
        api.packagesValidateUploadRuby(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Validate parameters for create Vagrant package
     *
     * Validate parameters for create Vagrant package
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void packagesValidateUploadVagrantTest() throws ApiException {
        String owner = null;
        String repo = null;
        PackagesValidateuploadVagrant data = null;
        api.packagesValidateUploadVagrant(owner, repo, data);

        // TODO: test validations
    }
    
}
