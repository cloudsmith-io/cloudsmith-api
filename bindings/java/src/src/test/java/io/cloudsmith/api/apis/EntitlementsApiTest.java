/*
 * Cloudsmith API
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.ApiException;
import io.cloudsmith.api.models.EntitlementsCreate;
import io.cloudsmith.api.models.EntitlementsPartialUpdate;
import io.cloudsmith.api.models.EntitlementsRefresh;
import io.cloudsmith.api.models.EntitlementsSync;
import io.cloudsmith.api.models.RepositoryToken;
import io.cloudsmith.api.models.RepositoryTokenRefresh;
import io.cloudsmith.api.models.RepositoryTokenSync;
import io.cloudsmith.api.models.Status;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitlementsApi
 */
@Ignore
public class EntitlementsApiTest {

    private final EntitlementsApi api = new EntitlementsApi();

    
    /**
     * Create a specific entitlement in a repository.
     *
     * Create a specific entitlement in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsCreateTest() throws ApiException {
        String owner = null;
        String repo = null;
        EntitlementsCreate data = null;
        RepositoryToken response = api.entitlementsCreate(owner, repo, data);

        // TODO: test validations
    }
    
    /**
     * Delete a specific entitlement in a repository.
     *
     * Delete a specific entitlement in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slugPerm = null;
        api.entitlementsDelete(owner, repo, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Get a list of all entitlements in a repository.
     *
     * Get a list of all entitlements in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsListTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer pageSize = null;
        List<RepositoryToken> response = api.entitlementsList(owner, repo, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Update a specific entitlement in a repository.
     *
     * Update a specific entitlement in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsPartialUpdateTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slugPerm = null;
        EntitlementsPartialUpdate data = null;
        RepositoryToken response = api.entitlementsPartialUpdate(owner, repo, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Views for working with repository entitlements.
     *
     * Views for working with repository entitlements.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsReadTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slugPerm = null;
        RepositoryToken response = api.entitlementsRead(owner, repo, slugPerm);

        // TODO: test validations
    }
    
    /**
     * Refresh an entitlement token in a repository.
     *
     * Refresh an entitlement token in a repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsRefreshTest() throws ApiException {
        String owner = null;
        String repo = null;
        String slugPerm = null;
        EntitlementsRefresh data = null;
        RepositoryTokenRefresh response = api.entitlementsRefresh(owner, repo, slugPerm, data);

        // TODO: test validations
    }
    
    /**
     * Synchronise tokens from a source repository.
     *
     * Synchronise tokens from a source repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void entitlementsSyncTest() throws ApiException {
        String owner = null;
        String repo = null;
        EntitlementsSync data = null;
        RepositoryTokenSync response = api.entitlementsSync(owner, repo, data);

        // TODO: test validations
    }
    
}
