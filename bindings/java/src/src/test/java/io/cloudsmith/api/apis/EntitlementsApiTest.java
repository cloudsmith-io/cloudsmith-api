/*
 * Cloudsmith API (v1)
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.cloudsmith.api.apis;

import io.cloudsmith.api.models.ErrorDetail;
import io.cloudsmith.api.models.RepositoryToken;
import io.cloudsmith.api.models.RepositoryTokenRefresh;
import io.cloudsmith.api.models.RepositoryTokenRefreshRequest;
import io.cloudsmith.api.models.RepositoryTokenRequest;
import io.cloudsmith.api.models.RepositoryTokenRequestPatch;
import io.cloudsmith.api.models.RepositoryTokenSync;
import io.cloudsmith.api.models.RepositoryTokenSyncRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntitlementsApi
 */
@Ignore
public class EntitlementsApiTest {

    private final EntitlementsApi api = new EntitlementsApi();

    
    /**
     * Create a specific entitlement in a repository.
     *
     * Create a specific entitlement in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsCreateTest() throws Exception {
        String owner = null;
        String repo = null;
        RepositoryTokenRequest data = null;
        Boolean showTokens = null;
        RepositoryToken response = api.entitlementsCreate(owner, repo, data, showTokens);

        // TODO: test validations
    }
    
    /**
     * Delete a specific entitlement in a repository.
     *
     * Delete a specific entitlement in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsDeleteTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        api.entitlementsDelete(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Disable an entitlement token in a repository.
     *
     * Disable an entitlement token in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsDisableTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        api.entitlementsDisable(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Enable an entitlement token in a repository.
     *
     * Enable an entitlement token in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsEnableTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        api.entitlementsEnable(owner, repo, identifier);

        // TODO: test validations
    }
    
    /**
     * Get a list of all entitlements in a repository.
     *
     * Get a list of all entitlements in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsListTest() throws Exception {
        String owner = null;
        String repo = null;
        java.math.BigInteger page = null;
        java.math.BigInteger pageSize = null;
        Boolean showTokens = null;
        String query = null;
        Boolean active = null;
        List<RepositoryToken> response = api.entitlementsList(owner, repo, page, pageSize, showTokens, query, active);

        // TODO: test validations
    }
    
    /**
     * Update a specific entitlement in a repository.
     *
     * Update a specific entitlement in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsPartialUpdateTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        RepositoryTokenRequestPatch data = null;
        Boolean showTokens = null;
        RepositoryToken response = api.entitlementsPartialUpdate(owner, repo, identifier, data, showTokens);

        // TODO: test validations
    }
    
    /**
     * Get a specific entitlement in a repository.
     *
     * Get a specific entitlement in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsReadTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        Boolean fuzzy = null;
        Boolean showTokens = null;
        RepositoryToken response = api.entitlementsRead(owner, repo, identifier, fuzzy, showTokens);

        // TODO: test validations
    }
    
    /**
     * Refresh an entitlement token in a repository.
     *
     * Refresh an entitlement token in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsRefreshTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        RepositoryTokenRefreshRequest data = null;
        Boolean showTokens = null;
        RepositoryTokenRefresh response = api.entitlementsRefresh(owner, repo, identifier, data, showTokens);

        // TODO: test validations
    }
    
    /**
     * Reset the statistics for an entitlement token in a repository.
     *
     * Reset the statistics for an entitlement token in a repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsResetTest() throws Exception {
        String owner = null;
        String repo = null;
        String identifier = null;
        Boolean showTokens = null;
        api.entitlementsReset(owner, repo, identifier, showTokens);

        // TODO: test validations
    }
    
    /**
     * Synchronise tokens from a source repository.
     *
     * Synchronise tokens from a source repository.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void entitlementsSyncTest() throws Exception {
        String owner = null;
        String repo = null;
        RepositoryTokenSyncRequest data = null;
        Boolean showTokens = null;
        RepositoryTokenSync response = api.entitlementsSync(owner, repo, data, showTokens);

        // TODO: test validations
    }
    
}
