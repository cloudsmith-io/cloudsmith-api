/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProviderSettings {
  /// The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.
  #[serde(rename = "claims")]
  claims: Value,
  /// Whether the provider settings should be used for incoming OIDC requests.
  #[serde(rename = "enabled")]
  enabled: bool,
  /// The name of the provider settings are being configured for
  #[serde(rename = "name")]
  name: String,
  /// The URL from the provider that serves as the base for the OpenID configuration. For example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/
  #[serde(rename = "provider_url")]
  provider_url: String,
  /// The service accounts associated with these provider settings
  #[serde(rename = "service_accounts")]
  service_accounts: Vec<String>,
  /// The slug of the provider settings
  #[serde(rename = "slug")]
  slug: Option<String>,
  /// The unique, immutable identifier of the provider settings.
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>
}

impl ProviderSettings {
  pub fn new(claims: Value, enabled: bool, name: String, provider_url: String, service_accounts: Vec<String>) -> ProviderSettings {
    ProviderSettings {
      claims: claims,
      enabled: enabled,
      name: name,
      provider_url: provider_url,
      service_accounts: service_accounts,
      slug: None,
      slug_perm: None
    }
  }

  pub fn set_claims(&mut self, claims: Value) {
    self.claims = claims;
  }

  pub fn with_claims(mut self, claims: Value) -> ProviderSettings {
    self.claims = claims;
    self
  }

  pub fn claims(&self) -> &Value {
    &self.claims
  }


  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = enabled;
  }

  pub fn with_enabled(mut self, enabled: bool) -> ProviderSettings {
    self.enabled = enabled;
    self
  }

  pub fn enabled(&self) -> &bool {
    &self.enabled
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ProviderSettings {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_provider_url(&mut self, provider_url: String) {
    self.provider_url = provider_url;
  }

  pub fn with_provider_url(mut self, provider_url: String) -> ProviderSettings {
    self.provider_url = provider_url;
    self
  }

  pub fn provider_url(&self) -> &String {
    &self.provider_url
  }


  pub fn set_service_accounts(&mut self, service_accounts: Vec<String>) {
    self.service_accounts = service_accounts;
  }

  pub fn with_service_accounts(mut self, service_accounts: Vec<String>) -> ProviderSettings {
    self.service_accounts = service_accounts;
    self
  }

  pub fn service_accounts(&self) -> &Vec<String> {
    &self.service_accounts
  }


  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> ProviderSettings {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> ProviderSettings {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

}



