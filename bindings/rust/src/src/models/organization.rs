/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Organization {
  #[serde(rename = "country")]
  country: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// The city/town/area your organization is based in.
  #[serde(rename = "location")]
  location: Option<String>,
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "slug")]
  slug: Option<String>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>,
  /// A short public descriptive for your organization.
  #[serde(rename = "tagline")]
  tagline: Option<String>
}

impl Organization {
  pub fn new(name: String) -> Organization {
    Organization {
      country: None,
      created_at: None,
      location: None,
      name: name,
      slug: None,
      slug_perm: None,
      tagline: None
    }
  }

  pub fn set_country(&mut self, country: String) {
    self.country = Some(country);
  }

  pub fn with_country(mut self, country: String) -> Organization {
    self.country = Some(country);
    self
  }

  pub fn country(&self) -> Option<&String> {
    self.country.as_ref()
  }

  pub fn reset_country(&mut self) {
    self.country = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Organization {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> Organization {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Organization {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> Organization {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> Organization {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

  pub fn set_tagline(&mut self, tagline: String) {
    self.tagline = Some(tagline);
  }

  pub fn with_tagline(mut self, tagline: String) -> Organization {
    self.tagline = Some(tagline);
    self
  }

  pub fn tagline(&self) -> Option<&String> {
    self.tagline.as_ref()
  }

  pub fn reset_tagline(&mut self) {
    self.tagline = None;
  }

}



