/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationPackageVulnerabilityPolicyRequestPatch {
  /// Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.
  #[serde(rename = "allow_unknown_severity")]
  allow_unknown_severity: Option<bool>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "min_severity")]
  min_severity: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "on_violation_quarantine")]
  on_violation_quarantine: Option<bool>,
  #[serde(rename = "package_query_string")]
  package_query_string: Option<String>
}

impl OrganizationPackageVulnerabilityPolicyRequestPatch {
  pub fn new() -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    OrganizationPackageVulnerabilityPolicyRequestPatch {
      allow_unknown_severity: None,
      description: None,
      min_severity: None,
      name: None,
      on_violation_quarantine: None,
      package_query_string: None
    }
  }

  pub fn set_allow_unknown_severity(&mut self, allow_unknown_severity: bool) {
    self.allow_unknown_severity = Some(allow_unknown_severity);
  }

  pub fn with_allow_unknown_severity(mut self, allow_unknown_severity: bool) -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    self.allow_unknown_severity = Some(allow_unknown_severity);
    self
  }

  pub fn allow_unknown_severity(&self) -> Option<&bool> {
    self.allow_unknown_severity.as_ref()
  }

  pub fn reset_allow_unknown_severity(&mut self) {
    self.allow_unknown_severity = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_min_severity(&mut self, min_severity: String) {
    self.min_severity = Some(min_severity);
  }

  pub fn with_min_severity(mut self, min_severity: String) -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    self.min_severity = Some(min_severity);
    self
  }

  pub fn min_severity(&self) -> Option<&String> {
    self.min_severity.as_ref()
  }

  pub fn reset_min_severity(&mut self) {
    self.min_severity = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_on_violation_quarantine(&mut self, on_violation_quarantine: bool) {
    self.on_violation_quarantine = Some(on_violation_quarantine);
  }

  pub fn with_on_violation_quarantine(mut self, on_violation_quarantine: bool) -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    self.on_violation_quarantine = Some(on_violation_quarantine);
    self
  }

  pub fn on_violation_quarantine(&self) -> Option<&bool> {
    self.on_violation_quarantine.as_ref()
  }

  pub fn reset_on_violation_quarantine(&mut self) {
    self.on_violation_quarantine = None;
  }

  pub fn set_package_query_string(&mut self, package_query_string: String) {
    self.package_query_string = Some(package_query_string);
  }

  pub fn with_package_query_string(mut self, package_query_string: String) -> OrganizationPackageVulnerabilityPolicyRequestPatch {
    self.package_query_string = Some(package_query_string);
    self
  }

  pub fn package_query_string(&self) -> Option<&String> {
    self.package_query_string.as_ref()
  }

  pub fn reset_package_query_string(&mut self) {
    self.package_query_string = None;
  }

}



