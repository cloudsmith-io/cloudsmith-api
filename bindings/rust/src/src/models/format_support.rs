/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FormatSupport : A set of what the package format supports

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FormatSupport {
  /// If true the package format supports dependencies
  #[serde(rename = "dependencies")]
  dependencies: bool,
  /// If true the package format supports distributions
  #[serde(rename = "distributions")]
  distributions: bool,
  /// If true the package format supports file lists
  #[serde(rename = "file_lists")]
  file_lists: bool,
  /// If true the package format supports metadata
  #[serde(rename = "metadata")]
  metadata: bool,
  #[serde(rename = "upstreams")]
  upstreams: ::models::FormatSupportUpstream,
  /// If true the package format supports versioning
  #[serde(rename = "versioning")]
  versioning: bool
}

impl FormatSupport {
  /// A set of what the package format supports
  pub fn new(dependencies: bool, distributions: bool, file_lists: bool, metadata: bool, upstreams: ::models::FormatSupportUpstream, versioning: bool) -> FormatSupport {
    FormatSupport {
      dependencies: dependencies,
      distributions: distributions,
      file_lists: file_lists,
      metadata: metadata,
      upstreams: upstreams,
      versioning: versioning
    }
  }

  pub fn set_dependencies(&mut self, dependencies: bool) {
    self.dependencies = dependencies;
  }

  pub fn with_dependencies(mut self, dependencies: bool) -> FormatSupport {
    self.dependencies = dependencies;
    self
  }

  pub fn dependencies(&self) -> &bool {
    &self.dependencies
  }


  pub fn set_distributions(&mut self, distributions: bool) {
    self.distributions = distributions;
  }

  pub fn with_distributions(mut self, distributions: bool) -> FormatSupport {
    self.distributions = distributions;
    self
  }

  pub fn distributions(&self) -> &bool {
    &self.distributions
  }


  pub fn set_file_lists(&mut self, file_lists: bool) {
    self.file_lists = file_lists;
  }

  pub fn with_file_lists(mut self, file_lists: bool) -> FormatSupport {
    self.file_lists = file_lists;
    self
  }

  pub fn file_lists(&self) -> &bool {
    &self.file_lists
  }


  pub fn set_metadata(&mut self, metadata: bool) {
    self.metadata = metadata;
  }

  pub fn with_metadata(mut self, metadata: bool) -> FormatSupport {
    self.metadata = metadata;
    self
  }

  pub fn metadata(&self) -> &bool {
    &self.metadata
  }


  pub fn set_upstreams(&mut self, upstreams: ::models::FormatSupportUpstream) {
    self.upstreams = upstreams;
  }

  pub fn with_upstreams(mut self, upstreams: ::models::FormatSupportUpstream) -> FormatSupport {
    self.upstreams = upstreams;
    self
  }

  pub fn upstreams(&self) -> &::models::FormatSupportUpstream {
    &self.upstreams
  }


  pub fn set_versioning(&mut self, versioning: bool) {
    self.versioning = versioning;
  }

  pub fn with_versioning(mut self, versioning: bool) -> FormatSupport {
    self.versioning = versioning;
    self
  }

  pub fn versioning(&self) -> &bool {
    &self.versioning
  }


}



