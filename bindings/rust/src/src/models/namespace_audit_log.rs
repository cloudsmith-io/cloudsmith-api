/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NamespaceAuditLog {
  #[serde(rename = "actor")]
  actor: String,
  #[serde(rename = "actor_ip_address")]
  actor_ip_address: String,
  #[serde(rename = "actor_kind")]
  actor_kind: Option<String>,
  #[serde(rename = "actor_location")]
  actor_location: ::models::GeoIpLocation,
  #[serde(rename = "actor_slug_perm")]
  actor_slug_perm: String,
  #[serde(rename = "actor_url")]
  actor_url: Option<String>,
  #[serde(rename = "context")]
  context: String,
  #[serde(rename = "event")]
  event: String,
  #[serde(rename = "event_at")]
  event_at: String,
  #[serde(rename = "object")]
  object: String,
  #[serde(rename = "object_kind")]
  object_kind: String,
  #[serde(rename = "object_slug_perm")]
  object_slug_perm: String,
  #[serde(rename = "target")]
  target: String,
  #[serde(rename = "target_kind")]
  target_kind: String,
  #[serde(rename = "target_slug_perm")]
  target_slug_perm: Option<String>,
  #[serde(rename = "uuid")]
  uuid: Option<String>
}

impl NamespaceAuditLog {
  pub fn new(actor: String, actor_ip_address: String, actor_location: ::models::GeoIpLocation, actor_slug_perm: String, context: String, event: String, event_at: String, object: String, object_kind: String, object_slug_perm: String, target: String, target_kind: String) -> NamespaceAuditLog {
    NamespaceAuditLog {
      actor: actor,
      actor_ip_address: actor_ip_address,
      actor_kind: None,
      actor_location: actor_location,
      actor_slug_perm: actor_slug_perm,
      actor_url: None,
      context: context,
      event: event,
      event_at: event_at,
      object: object,
      object_kind: object_kind,
      object_slug_perm: object_slug_perm,
      target: target,
      target_kind: target_kind,
      target_slug_perm: None,
      uuid: None
    }
  }

  pub fn set_actor(&mut self, actor: String) {
    self.actor = actor;
  }

  pub fn with_actor(mut self, actor: String) -> NamespaceAuditLog {
    self.actor = actor;
    self
  }

  pub fn actor(&self) -> &String {
    &self.actor
  }


  pub fn set_actor_ip_address(&mut self, actor_ip_address: String) {
    self.actor_ip_address = actor_ip_address;
  }

  pub fn with_actor_ip_address(mut self, actor_ip_address: String) -> NamespaceAuditLog {
    self.actor_ip_address = actor_ip_address;
    self
  }

  pub fn actor_ip_address(&self) -> &String {
    &self.actor_ip_address
  }


  pub fn set_actor_kind(&mut self, actor_kind: String) {
    self.actor_kind = Some(actor_kind);
  }

  pub fn with_actor_kind(mut self, actor_kind: String) -> NamespaceAuditLog {
    self.actor_kind = Some(actor_kind);
    self
  }

  pub fn actor_kind(&self) -> Option<&String> {
    self.actor_kind.as_ref()
  }

  pub fn reset_actor_kind(&mut self) {
    self.actor_kind = None;
  }

  pub fn set_actor_location(&mut self, actor_location: ::models::GeoIpLocation) {
    self.actor_location = actor_location;
  }

  pub fn with_actor_location(mut self, actor_location: ::models::GeoIpLocation) -> NamespaceAuditLog {
    self.actor_location = actor_location;
    self
  }

  pub fn actor_location(&self) -> &::models::GeoIpLocation {
    &self.actor_location
  }


  pub fn set_actor_slug_perm(&mut self, actor_slug_perm: String) {
    self.actor_slug_perm = actor_slug_perm;
  }

  pub fn with_actor_slug_perm(mut self, actor_slug_perm: String) -> NamespaceAuditLog {
    self.actor_slug_perm = actor_slug_perm;
    self
  }

  pub fn actor_slug_perm(&self) -> &String {
    &self.actor_slug_perm
  }


  pub fn set_actor_url(&mut self, actor_url: String) {
    self.actor_url = Some(actor_url);
  }

  pub fn with_actor_url(mut self, actor_url: String) -> NamespaceAuditLog {
    self.actor_url = Some(actor_url);
    self
  }

  pub fn actor_url(&self) -> Option<&String> {
    self.actor_url.as_ref()
  }

  pub fn reset_actor_url(&mut self) {
    self.actor_url = None;
  }

  pub fn set_context(&mut self, context: String) {
    self.context = context;
  }

  pub fn with_context(mut self, context: String) -> NamespaceAuditLog {
    self.context = context;
    self
  }

  pub fn context(&self) -> &String {
    &self.context
  }


  pub fn set_event(&mut self, event: String) {
    self.event = event;
  }

  pub fn with_event(mut self, event: String) -> NamespaceAuditLog {
    self.event = event;
    self
  }

  pub fn event(&self) -> &String {
    &self.event
  }


  pub fn set_event_at(&mut self, event_at: String) {
    self.event_at = event_at;
  }

  pub fn with_event_at(mut self, event_at: String) -> NamespaceAuditLog {
    self.event_at = event_at;
    self
  }

  pub fn event_at(&self) -> &String {
    &self.event_at
  }


  pub fn set_object(&mut self, object: String) {
    self.object = object;
  }

  pub fn with_object(mut self, object: String) -> NamespaceAuditLog {
    self.object = object;
    self
  }

  pub fn object(&self) -> &String {
    &self.object
  }


  pub fn set_object_kind(&mut self, object_kind: String) {
    self.object_kind = object_kind;
  }

  pub fn with_object_kind(mut self, object_kind: String) -> NamespaceAuditLog {
    self.object_kind = object_kind;
    self
  }

  pub fn object_kind(&self) -> &String {
    &self.object_kind
  }


  pub fn set_object_slug_perm(&mut self, object_slug_perm: String) {
    self.object_slug_perm = object_slug_perm;
  }

  pub fn with_object_slug_perm(mut self, object_slug_perm: String) -> NamespaceAuditLog {
    self.object_slug_perm = object_slug_perm;
    self
  }

  pub fn object_slug_perm(&self) -> &String {
    &self.object_slug_perm
  }


  pub fn set_target(&mut self, target: String) {
    self.target = target;
  }

  pub fn with_target(mut self, target: String) -> NamespaceAuditLog {
    self.target = target;
    self
  }

  pub fn target(&self) -> &String {
    &self.target
  }


  pub fn set_target_kind(&mut self, target_kind: String) {
    self.target_kind = target_kind;
  }

  pub fn with_target_kind(mut self, target_kind: String) -> NamespaceAuditLog {
    self.target_kind = target_kind;
    self
  }

  pub fn target_kind(&self) -> &String {
    &self.target_kind
  }


  pub fn set_target_slug_perm(&mut self, target_slug_perm: String) {
    self.target_slug_perm = Some(target_slug_perm);
  }

  pub fn with_target_slug_perm(mut self, target_slug_perm: String) -> NamespaceAuditLog {
    self.target_slug_perm = Some(target_slug_perm);
    self
  }

  pub fn target_slug_perm(&self) -> Option<&String> {
    self.target_slug_perm.as_ref()
  }

  pub fn reset_target_slug_perm(&mut self) {
    self.target_slug_perm = None;
  }

  pub fn set_uuid(&mut self, uuid: String) {
    self.uuid = Some(uuid);
  }

  pub fn with_uuid(mut self, uuid: String) -> NamespaceAuditLog {
    self.uuid = Some(uuid);
    self
  }

  pub fn uuid(&self) -> Option<&String> {
    self.uuid.as_ref()
  }

  pub fn reset_uuid(&mut self) {
    self.uuid = None;
  }

}



