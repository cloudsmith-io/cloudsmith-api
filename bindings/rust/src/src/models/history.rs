/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct History {
  #[serde(rename = "days")]
  days: Option<i32>,
  #[serde(rename = "display")]
  display: ::models::HistoryFieldset,
  #[serde(rename = "end")]
  end: String,
  #[serde(rename = "plan")]
  plan: String,
  #[serde(rename = "raw")]
  raw: ::models::HistoryFieldsetRaw,
  #[serde(rename = "start")]
  start: String
}

impl History {
  pub fn new(display: ::models::HistoryFieldset, end: String, plan: String, raw: ::models::HistoryFieldsetRaw, start: String) -> History {
    History {
      days: None,
      display: display,
      end: end,
      plan: plan,
      raw: raw,
      start: start
    }
  }

  pub fn set_days(&mut self, days: i32) {
    self.days = Some(days);
  }

  pub fn with_days(mut self, days: i32) -> History {
    self.days = Some(days);
    self
  }

  pub fn days(&self) -> Option<&i32> {
    self.days.as_ref()
  }

  pub fn reset_days(&mut self) {
    self.days = None;
  }

  pub fn set_display(&mut self, display: ::models::HistoryFieldset) {
    self.display = display;
  }

  pub fn with_display(mut self, display: ::models::HistoryFieldset) -> History {
    self.display = display;
    self
  }

  pub fn display(&self) -> &::models::HistoryFieldset {
    &self.display
  }


  pub fn set_end(&mut self, end: String) {
    self.end = end;
  }

  pub fn with_end(mut self, end: String) -> History {
    self.end = end;
    self
  }

  pub fn end(&self) -> &String {
    &self.end
  }


  pub fn set_plan(&mut self, plan: String) {
    self.plan = plan;
  }

  pub fn with_plan(mut self, plan: String) -> History {
    self.plan = plan;
    self
  }

  pub fn plan(&self) -> &String {
    &self.plan
  }


  pub fn set_raw(&mut self, raw: ::models::HistoryFieldsetRaw) {
    self.raw = raw;
  }

  pub fn with_raw(mut self, raw: ::models::HistoryFieldsetRaw) -> History {
    self.raw = raw;
    self
  }

  pub fn raw(&self) -> &::models::HistoryFieldsetRaw {
    &self.raw
  }


  pub fn set_start(&mut self, start: String) {
    self.start = start;
  }

  pub fn with_start(mut self, start: String) -> History {
    self.start = start;
    self
  }

  pub fn start(&self) -> &String {
    &self.start
  }


}



