/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageVulnerabilityPolicyEvaluationRequest {
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "evaluation_count")]
  evaluation_count: Option<i32>,
  #[serde(rename = "policy")]
  policy: Option<::models::NestedVulnerabilityPolicy>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>,
  #[serde(rename = "updated_at")]
  updated_at: Option<String>,
  #[serde(rename = "violation_count")]
  violation_count: Option<i32>
}

impl PackageVulnerabilityPolicyEvaluationRequest {
  pub fn new() -> PackageVulnerabilityPolicyEvaluationRequest {
    PackageVulnerabilityPolicyEvaluationRequest {
      created_at: None,
      evaluation_count: None,
      policy: None,
      slug_perm: None,
      status: None,
      updated_at: None,
      violation_count: None
    }
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_evaluation_count(&mut self, evaluation_count: i32) {
    self.evaluation_count = Some(evaluation_count);
  }

  pub fn with_evaluation_count(mut self, evaluation_count: i32) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.evaluation_count = Some(evaluation_count);
    self
  }

  pub fn evaluation_count(&self) -> Option<&i32> {
    self.evaluation_count.as_ref()
  }

  pub fn reset_evaluation_count(&mut self) {
    self.evaluation_count = None;
  }

  pub fn set_policy(&mut self, policy: ::models::NestedVulnerabilityPolicy) {
    self.policy = Some(policy);
  }

  pub fn with_policy(mut self, policy: ::models::NestedVulnerabilityPolicy) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.policy = Some(policy);
    self
  }

  pub fn policy(&self) -> Option<&::models::NestedVulnerabilityPolicy> {
    self.policy.as_ref()
  }

  pub fn reset_policy(&mut self) {
    self.policy = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_updated_at(&mut self, updated_at: String) {
    self.updated_at = Some(updated_at);
  }

  pub fn with_updated_at(mut self, updated_at: String) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.updated_at = Some(updated_at);
    self
  }

  pub fn updated_at(&self) -> Option<&String> {
    self.updated_at.as_ref()
  }

  pub fn reset_updated_at(&mut self) {
    self.updated_at = None;
  }

  pub fn set_violation_count(&mut self, violation_count: i32) {
    self.violation_count = Some(violation_count);
  }

  pub fn with_violation_count(mut self, violation_count: i32) -> PackageVulnerabilityPolicyEvaluationRequest {
    self.violation_count = Some(violation_count);
    self
  }

  pub fn violation_count(&self) -> Option<&i32> {
    self.violation_count.as_ref()
  }

  pub fn reset_violation_count(&mut self) {
    self.violation_count = None;
  }

}



