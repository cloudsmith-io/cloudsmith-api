/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProviderSettingsRequestPatch {
  /// The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.
  #[serde(rename = "claims")]
  claims: Option<Value>,
  /// Whether the provider settings should be used for incoming OIDC requests.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  /// The name of the provider settings are being configured for
  #[serde(rename = "name")]
  name: Option<String>,
  /// The URL from the provider that serves as the base for the OpenID configuration. For example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/
  #[serde(rename = "provider_url")]
  provider_url: Option<String>,
  /// The service accounts associated with these provider settings
  #[serde(rename = "service_accounts")]
  service_accounts: Option<Vec<String>>
}

impl ProviderSettingsRequestPatch {
  pub fn new() -> ProviderSettingsRequestPatch {
    ProviderSettingsRequestPatch {
      claims: None,
      enabled: None,
      name: None,
      provider_url: None,
      service_accounts: None
    }
  }

  pub fn set_claims(&mut self, claims: Value) {
    self.claims = Some(claims);
  }

  pub fn with_claims(mut self, claims: Value) -> ProviderSettingsRequestPatch {
    self.claims = Some(claims);
    self
  }

  pub fn claims(&self) -> Option<&Value> {
    self.claims.as_ref()
  }

  pub fn reset_claims(&mut self) {
    self.claims = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> ProviderSettingsRequestPatch {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ProviderSettingsRequestPatch {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_provider_url(&mut self, provider_url: String) {
    self.provider_url = Some(provider_url);
  }

  pub fn with_provider_url(mut self, provider_url: String) -> ProviderSettingsRequestPatch {
    self.provider_url = Some(provider_url);
    self
  }

  pub fn provider_url(&self) -> Option<&String> {
    self.provider_url.as_ref()
  }

  pub fn reset_provider_url(&mut self) {
    self.provider_url = None;
  }

  pub fn set_service_accounts(&mut self, service_accounts: Vec<String>) {
    self.service_accounts = Some(service_accounts);
  }

  pub fn with_service_accounts(mut self, service_accounts: Vec<String>) -> ProviderSettingsRequestPatch {
    self.service_accounts = Some(service_accounts);
    self
  }

  pub fn service_accounts(&self) -> Option<&Vec<String>> {
    self.service_accounts.as_ref()
  }

  pub fn reset_service_accounts(&mut self) {
    self.service_accounts = None;
  }

}



