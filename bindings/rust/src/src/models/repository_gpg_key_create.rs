/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryGpgKeyCreate {
  /// The GPG passphrase used for signing.
  #[serde(rename = "gpg_passphrase")]
  gpg_passphrase: Option<String>,
  /// The GPG private key.
  #[serde(rename = "gpg_private_key")]
  gpg_private_key: String
}

impl RepositoryGpgKeyCreate {
  pub fn new(gpg_private_key: String) -> RepositoryGpgKeyCreate {
    RepositoryGpgKeyCreate {
      gpg_passphrase: None,
      gpg_private_key: gpg_private_key
    }
  }

  pub fn set_gpg_passphrase(&mut self, gpg_passphrase: String) {
    self.gpg_passphrase = Some(gpg_passphrase);
  }

  pub fn with_gpg_passphrase(mut self, gpg_passphrase: String) -> RepositoryGpgKeyCreate {
    self.gpg_passphrase = Some(gpg_passphrase);
    self
  }

  pub fn gpg_passphrase(&self) -> Option<&String> {
    self.gpg_passphrase.as_ref()
  }

  pub fn reset_gpg_passphrase(&mut self) {
    self.gpg_passphrase = None;
  }

  pub fn set_gpg_private_key(&mut self, gpg_private_key: String) {
    self.gpg_private_key = gpg_private_key;
  }

  pub fn with_gpg_private_key(mut self, gpg_private_key: String) -> RepositoryGpgKeyCreate {
    self.gpg_private_key = gpg_private_key;
    self
  }

  pub fn gpg_private_key(&self) -> &String {
    &self.gpg_private_key
  }


}



