/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryX509EcdsaCertificate {
  /// If selected this is the active key for this repository.
  #[serde(rename = "active")]
  active: Option<bool>,
  /// The issued certificate.
  #[serde(rename = "certificate")]
  certificate: Option<String>,
  /// Base64 encoded CA certificate chain.
  #[serde(rename = "certificate_chain")]
  certificate_chain: Option<String>,
  #[serde(rename = "certificate_chain_fingerprint")]
  certificate_chain_fingerprint: Option<String>,
  #[serde(rename = "certificate_chain_fingerprint_short")]
  certificate_chain_fingerprint_short: Option<String>,
  /// The SHA-256 long identifier used
  #[serde(rename = "certificate_fingerprint")]
  certificate_fingerprint: Option<String>,
  #[serde(rename = "certificate_fingerprint_short")]
  certificate_fingerprint_short: Option<String>,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// If selected this is the default key for this repository.
  #[serde(rename = "default")]
  default: Option<bool>,
  #[serde(rename = "issuing_status")]
  issuing_status: Option<String>
}

impl RepositoryX509EcdsaCertificate {
  pub fn new() -> RepositoryX509EcdsaCertificate {
    RepositoryX509EcdsaCertificate {
      active: None,
      certificate: None,
      certificate_chain: None,
      certificate_chain_fingerprint: None,
      certificate_chain_fingerprint_short: None,
      certificate_fingerprint: None,
      certificate_fingerprint_short: None,
      created_at: None,
      default: None,
      issuing_status: None
    }
  }

  pub fn set_active(&mut self, active: bool) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: bool) -> RepositoryX509EcdsaCertificate {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&bool> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_certificate(&mut self, certificate: String) {
    self.certificate = Some(certificate);
  }

  pub fn with_certificate(mut self, certificate: String) -> RepositoryX509EcdsaCertificate {
    self.certificate = Some(certificate);
    self
  }

  pub fn certificate(&self) -> Option<&String> {
    self.certificate.as_ref()
  }

  pub fn reset_certificate(&mut self) {
    self.certificate = None;
  }

  pub fn set_certificate_chain(&mut self, certificate_chain: String) {
    self.certificate_chain = Some(certificate_chain);
  }

  pub fn with_certificate_chain(mut self, certificate_chain: String) -> RepositoryX509EcdsaCertificate {
    self.certificate_chain = Some(certificate_chain);
    self
  }

  pub fn certificate_chain(&self) -> Option<&String> {
    self.certificate_chain.as_ref()
  }

  pub fn reset_certificate_chain(&mut self) {
    self.certificate_chain = None;
  }

  pub fn set_certificate_chain_fingerprint(&mut self, certificate_chain_fingerprint: String) {
    self.certificate_chain_fingerprint = Some(certificate_chain_fingerprint);
  }

  pub fn with_certificate_chain_fingerprint(mut self, certificate_chain_fingerprint: String) -> RepositoryX509EcdsaCertificate {
    self.certificate_chain_fingerprint = Some(certificate_chain_fingerprint);
    self
  }

  pub fn certificate_chain_fingerprint(&self) -> Option<&String> {
    self.certificate_chain_fingerprint.as_ref()
  }

  pub fn reset_certificate_chain_fingerprint(&mut self) {
    self.certificate_chain_fingerprint = None;
  }

  pub fn set_certificate_chain_fingerprint_short(&mut self, certificate_chain_fingerprint_short: String) {
    self.certificate_chain_fingerprint_short = Some(certificate_chain_fingerprint_short);
  }

  pub fn with_certificate_chain_fingerprint_short(mut self, certificate_chain_fingerprint_short: String) -> RepositoryX509EcdsaCertificate {
    self.certificate_chain_fingerprint_short = Some(certificate_chain_fingerprint_short);
    self
  }

  pub fn certificate_chain_fingerprint_short(&self) -> Option<&String> {
    self.certificate_chain_fingerprint_short.as_ref()
  }

  pub fn reset_certificate_chain_fingerprint_short(&mut self) {
    self.certificate_chain_fingerprint_short = None;
  }

  pub fn set_certificate_fingerprint(&mut self, certificate_fingerprint: String) {
    self.certificate_fingerprint = Some(certificate_fingerprint);
  }

  pub fn with_certificate_fingerprint(mut self, certificate_fingerprint: String) -> RepositoryX509EcdsaCertificate {
    self.certificate_fingerprint = Some(certificate_fingerprint);
    self
  }

  pub fn certificate_fingerprint(&self) -> Option<&String> {
    self.certificate_fingerprint.as_ref()
  }

  pub fn reset_certificate_fingerprint(&mut self) {
    self.certificate_fingerprint = None;
  }

  pub fn set_certificate_fingerprint_short(&mut self, certificate_fingerprint_short: String) {
    self.certificate_fingerprint_short = Some(certificate_fingerprint_short);
  }

  pub fn with_certificate_fingerprint_short(mut self, certificate_fingerprint_short: String) -> RepositoryX509EcdsaCertificate {
    self.certificate_fingerprint_short = Some(certificate_fingerprint_short);
    self
  }

  pub fn certificate_fingerprint_short(&self) -> Option<&String> {
    self.certificate_fingerprint_short.as_ref()
  }

  pub fn reset_certificate_fingerprint_short(&mut self) {
    self.certificate_fingerprint_short = None;
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> RepositoryX509EcdsaCertificate {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_default(&mut self, default: bool) {
    self.default = Some(default);
  }

  pub fn with_default(mut self, default: bool) -> RepositoryX509EcdsaCertificate {
    self.default = Some(default);
    self
  }

  pub fn default(&self) -> Option<&bool> {
    self.default.as_ref()
  }

  pub fn reset_default(&mut self) {
    self.default = None;
  }

  pub fn set_issuing_status(&mut self, issuing_status: String) {
    self.issuing_status = Some(issuing_status);
  }

  pub fn with_issuing_status(mut self, issuing_status: String) -> RepositoryX509EcdsaCertificate {
    self.issuing_status = Some(issuing_status);
    self
  }

  pub fn issuing_status(&self) -> Option<&String> {
    self.issuing_status.as_ref()
  }

  pub fn reset_issuing_status(&mut self) {
    self.issuing_status = None;
  }

}



