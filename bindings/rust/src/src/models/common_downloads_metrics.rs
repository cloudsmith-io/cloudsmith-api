/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CommonDownloadsMetrics {
  #[serde(rename = "average")]
  average: ::models::CommonDownloadsMetricsValue,
  #[serde(rename = "highest")]
  highest: ::models::CommonDownloadsMetricsValue,
  #[serde(rename = "lowest")]
  lowest: ::models::CommonDownloadsMetricsValue,
  #[serde(rename = "total")]
  total: ::models::CommonDownloadsMetricsValue
}

impl CommonDownloadsMetrics {
  pub fn new(average: ::models::CommonDownloadsMetricsValue, highest: ::models::CommonDownloadsMetricsValue, lowest: ::models::CommonDownloadsMetricsValue, total: ::models::CommonDownloadsMetricsValue) -> CommonDownloadsMetrics {
    CommonDownloadsMetrics {
      average: average,
      highest: highest,
      lowest: lowest,
      total: total
    }
  }

  pub fn set_average(&mut self, average: ::models::CommonDownloadsMetricsValue) {
    self.average = average;
  }

  pub fn with_average(mut self, average: ::models::CommonDownloadsMetricsValue) -> CommonDownloadsMetrics {
    self.average = average;
    self
  }

  pub fn average(&self) -> &::models::CommonDownloadsMetricsValue {
    &self.average
  }


  pub fn set_highest(&mut self, highest: ::models::CommonDownloadsMetricsValue) {
    self.highest = highest;
  }

  pub fn with_highest(mut self, highest: ::models::CommonDownloadsMetricsValue) -> CommonDownloadsMetrics {
    self.highest = highest;
    self
  }

  pub fn highest(&self) -> &::models::CommonDownloadsMetricsValue {
    &self.highest
  }


  pub fn set_lowest(&mut self, lowest: ::models::CommonDownloadsMetricsValue) {
    self.lowest = lowest;
  }

  pub fn with_lowest(mut self, lowest: ::models::CommonDownloadsMetricsValue) -> CommonDownloadsMetrics {
    self.lowest = lowest;
    self
  }

  pub fn lowest(&self) -> &::models::CommonDownloadsMetricsValue {
    &self.lowest
  }


  pub fn set_total(&mut self, total: ::models::CommonDownloadsMetricsValue) {
    self.total = total;
  }

  pub fn with_total(mut self, total: ::models::CommonDownloadsMetricsValue) -> CommonDownloadsMetrics {
    self.total = total;
    self
  }

  pub fn total(&self) -> &::models::CommonDownloadsMetricsValue {
    &self.total
  }


}



