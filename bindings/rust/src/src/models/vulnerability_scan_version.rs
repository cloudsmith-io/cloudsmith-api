/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct VulnerabilityScanVersion {
  #[serde(rename = "major")]
  major: i32,
  #[serde(rename = "minor")]
  minor: i32,
  #[serde(rename = "operator")]
  operator: Option<String>,
  #[serde(rename = "patch")]
  patch: i32,
  #[serde(rename = "raw_version")]
  raw_version: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl VulnerabilityScanVersion {
  pub fn new(major: i32, minor: i32, patch: i32) -> VulnerabilityScanVersion {
    VulnerabilityScanVersion {
      major: major,
      minor: minor,
      operator: None,
      patch: patch,
      raw_version: None,
      version: None
    }
  }

  pub fn set_major(&mut self, major: i32) {
    self.major = major;
  }

  pub fn with_major(mut self, major: i32) -> VulnerabilityScanVersion {
    self.major = major;
    self
  }

  pub fn major(&self) -> &i32 {
    &self.major
  }


  pub fn set_minor(&mut self, minor: i32) {
    self.minor = minor;
  }

  pub fn with_minor(mut self, minor: i32) -> VulnerabilityScanVersion {
    self.minor = minor;
    self
  }

  pub fn minor(&self) -> &i32 {
    &self.minor
  }


  pub fn set_operator(&mut self, operator: String) {
    self.operator = Some(operator);
  }

  pub fn with_operator(mut self, operator: String) -> VulnerabilityScanVersion {
    self.operator = Some(operator);
    self
  }

  pub fn operator(&self) -> Option<&String> {
    self.operator.as_ref()
  }

  pub fn reset_operator(&mut self) {
    self.operator = None;
  }

  pub fn set_patch(&mut self, patch: i32) {
    self.patch = patch;
  }

  pub fn with_patch(mut self, patch: i32) -> VulnerabilityScanVersion {
    self.patch = patch;
    self
  }

  pub fn patch(&self) -> &i32 {
    &self.patch
  }


  pub fn set_raw_version(&mut self, raw_version: String) {
    self.raw_version = Some(raw_version);
  }

  pub fn with_raw_version(mut self, raw_version: String) -> VulnerabilityScanVersion {
    self.raw_version = Some(raw_version);
    self
  }

  pub fn raw_version(&self) -> Option<&String> {
    self.raw_version.as_ref()
  }

  pub fn reset_raw_version(&mut self) {
    self.raw_version = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> VulnerabilityScanVersion {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



