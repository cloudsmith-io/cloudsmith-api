/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UsageLimitsRaw {
  #[serde(rename = "bandwidth")]
  bandwidth: ::models::AllocatedLimitRaw,
  #[serde(rename = "storage")]
  storage: ::models::StorageAllocatedLimitRaw
}

impl UsageLimitsRaw {
  pub fn new(bandwidth: ::models::AllocatedLimitRaw, storage: ::models::StorageAllocatedLimitRaw) -> UsageLimitsRaw {
    UsageLimitsRaw {
      bandwidth: bandwidth,
      storage: storage
    }
  }

  pub fn set_bandwidth(&mut self, bandwidth: ::models::AllocatedLimitRaw) {
    self.bandwidth = bandwidth;
  }

  pub fn with_bandwidth(mut self, bandwidth: ::models::AllocatedLimitRaw) -> UsageLimitsRaw {
    self.bandwidth = bandwidth;
    self
  }

  pub fn bandwidth(&self) -> &::models::AllocatedLimitRaw {
    &self.bandwidth
  }


  pub fn set_storage(&mut self, storage: ::models::StorageAllocatedLimitRaw) {
    self.storage = storage;
  }

  pub fn with_storage(mut self, storage: ::models::StorageAllocatedLimitRaw) -> UsageLimitsRaw {
    self.storage = storage;
    self
  }

  pub fn storage(&self) -> &::models::StorageAllocatedLimitRaw {
    &self.storage
  }


}



