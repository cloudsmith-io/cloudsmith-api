/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryGpgKey {
  /// If selected this is the active key for this repository.
  #[serde(rename = "active")]
  active: Option<bool>,
  #[serde(rename = "comment")]
  comment: String,
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// If selected this is the default key for this repository.
  #[serde(rename = "default")]
  default: Option<bool>,
  /// The long identifier used by GPG for this key.
  #[serde(rename = "fingerprint")]
  fingerprint: Option<String>,
  #[serde(rename = "fingerprint_short")]
  fingerprint_short: Option<String>,
  /// The public key given to repository users.
  #[serde(rename = "public_key")]
  public_key: Option<String>
}

impl RepositoryGpgKey {
  pub fn new(comment: String) -> RepositoryGpgKey {
    RepositoryGpgKey {
      active: None,
      comment: comment,
      created_at: None,
      default: None,
      fingerprint: None,
      fingerprint_short: None,
      public_key: None
    }
  }

  pub fn set_active(&mut self, active: bool) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: bool) -> RepositoryGpgKey {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&bool> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_comment(&mut self, comment: String) {
    self.comment = comment;
  }

  pub fn with_comment(mut self, comment: String) -> RepositoryGpgKey {
    self.comment = comment;
    self
  }

  pub fn comment(&self) -> &String {
    &self.comment
  }


  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> RepositoryGpgKey {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_default(&mut self, default: bool) {
    self.default = Some(default);
  }

  pub fn with_default(mut self, default: bool) -> RepositoryGpgKey {
    self.default = Some(default);
    self
  }

  pub fn default(&self) -> Option<&bool> {
    self.default.as_ref()
  }

  pub fn reset_default(&mut self) {
    self.default = None;
  }

  pub fn set_fingerprint(&mut self, fingerprint: String) {
    self.fingerprint = Some(fingerprint);
  }

  pub fn with_fingerprint(mut self, fingerprint: String) -> RepositoryGpgKey {
    self.fingerprint = Some(fingerprint);
    self
  }

  pub fn fingerprint(&self) -> Option<&String> {
    self.fingerprint.as_ref()
  }

  pub fn reset_fingerprint(&mut self) {
    self.fingerprint = None;
  }

  pub fn set_fingerprint_short(&mut self, fingerprint_short: String) {
    self.fingerprint_short = Some(fingerprint_short);
  }

  pub fn with_fingerprint_short(mut self, fingerprint_short: String) -> RepositoryGpgKey {
    self.fingerprint_short = Some(fingerprint_short);
    self
  }

  pub fn fingerprint_short(&self) -> Option<&String> {
    self.fingerprint_short.as_ref()
  }

  pub fn reset_fingerprint_short(&mut self) {
    self.fingerprint_short = None;
  }

  pub fn set_public_key(&mut self, public_key: String) {
    self.public_key = Some(public_key);
  }

  pub fn with_public_key(mut self, public_key: String) -> RepositoryGpgKey {
    self.public_key = Some(public_key);
    self
  }

  pub fn public_key(&self) -> Option<&String> {
    self.public_key.as_ref()
  }

  pub fn reset_public_key(&mut self) {
    self.public_key = None;
  }

}



