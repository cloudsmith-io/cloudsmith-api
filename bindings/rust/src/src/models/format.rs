/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Format {
  /// Description of the package format
  #[serde(rename = "description")]
  description: String,
  /// The distributions supported by this package format
  #[serde(rename = "distributions")]
  distributions: Option<Vec<::models::Distribution>>,
  /// A non-exhaustive list of extensions supported
  #[serde(rename = "extensions")]
  extensions: Vec<String>,
  /// Name for the package format
  #[serde(rename = "name")]
  name: String,
  /// If true the package format is a premium-only feature
  #[serde(rename = "premium")]
  premium: bool,
  /// The minimum plan id required for this package format
  #[serde(rename = "premium_plan_id")]
  premium_plan_id: Option<String>,
  /// The minimum plan name required for this package format
  #[serde(rename = "premium_plan_name")]
  premium_plan_name: Option<String>,
  /// Slug for the package format
  #[serde(rename = "slug")]
  slug: String,
  #[serde(rename = "supports")]
  supports: ::models::FormatSupport
}

impl Format {
  pub fn new(description: String, extensions: Vec<String>, name: String, premium: bool, slug: String, supports: ::models::FormatSupport) -> Format {
    Format {
      description: description,
      distributions: None,
      extensions: extensions,
      name: name,
      premium: premium,
      premium_plan_id: None,
      premium_plan_name: None,
      slug: slug,
      supports: supports
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> Format {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_distributions(&mut self, distributions: Vec<::models::Distribution>) {
    self.distributions = Some(distributions);
  }

  pub fn with_distributions(mut self, distributions: Vec<::models::Distribution>) -> Format {
    self.distributions = Some(distributions);
    self
  }

  pub fn distributions(&self) -> Option<&Vec<::models::Distribution>> {
    self.distributions.as_ref()
  }

  pub fn reset_distributions(&mut self) {
    self.distributions = None;
  }

  pub fn set_extensions(&mut self, extensions: Vec<String>) {
    self.extensions = extensions;
  }

  pub fn with_extensions(mut self, extensions: Vec<String>) -> Format {
    self.extensions = extensions;
    self
  }

  pub fn extensions(&self) -> &Vec<String> {
    &self.extensions
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Format {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_premium(&mut self, premium: bool) {
    self.premium = premium;
  }

  pub fn with_premium(mut self, premium: bool) -> Format {
    self.premium = premium;
    self
  }

  pub fn premium(&self) -> &bool {
    &self.premium
  }


  pub fn set_premium_plan_id(&mut self, premium_plan_id: String) {
    self.premium_plan_id = Some(premium_plan_id);
  }

  pub fn with_premium_plan_id(mut self, premium_plan_id: String) -> Format {
    self.premium_plan_id = Some(premium_plan_id);
    self
  }

  pub fn premium_plan_id(&self) -> Option<&String> {
    self.premium_plan_id.as_ref()
  }

  pub fn reset_premium_plan_id(&mut self) {
    self.premium_plan_id = None;
  }

  pub fn set_premium_plan_name(&mut self, premium_plan_name: String) {
    self.premium_plan_name = Some(premium_plan_name);
  }

  pub fn with_premium_plan_name(mut self, premium_plan_name: String) -> Format {
    self.premium_plan_name = Some(premium_plan_name);
    self
  }

  pub fn premium_plan_name(&self) -> Option<&String> {
    self.premium_plan_name.as_ref()
  }

  pub fn reset_premium_plan_name(&mut self) {
    self.premium_plan_name = None;
  }

  pub fn set_slug(&mut self, slug: String) {
    self.slug = slug;
  }

  pub fn with_slug(mut self, slug: String) -> Format {
    self.slug = slug;
    self
  }

  pub fn slug(&self) -> &String {
    &self.slug
  }


  pub fn set_supports(&mut self, supports: ::models::FormatSupport) {
    self.supports = supports;
  }

  pub fn with_supports(mut self, supports: ::models::FormatSupport) -> Format {
    self.supports = supports;
    self
  }

  pub fn supports(&self) -> &::models::FormatSupport {
    &self.supports
  }


}



