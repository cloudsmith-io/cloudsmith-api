/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DebPackageUploadRequest {
  /// The changes archive containing the changes made to the source and debian packaging files
  #[serde(rename = "changes_file")]
  changes_file: Option<String>,
  /// The component (channel) for the package (e.g. 'main', 'unstable', etc.)
  #[serde(rename = "component")]
  component: Option<String>,
  /// The distribution to store the package for.
  #[serde(rename = "distribution")]
  distribution: String,
  /// The primary file for the package.
  #[serde(rename = "package_file")]
  package_file: String,
  /// If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  #[serde(rename = "republish")]
  republish: Option<bool>,
  /// The sources archive containing the source code for the binary
  #[serde(rename = "sources_file")]
  sources_file: Option<String>,
  /// A comma-separated values list of tags to add to the package.
  #[serde(rename = "tags")]
  tags: Option<String>
}

impl DebPackageUploadRequest {
  pub fn new(distribution: String, package_file: String) -> DebPackageUploadRequest {
    DebPackageUploadRequest {
      changes_file: None,
      component: None,
      distribution: distribution,
      package_file: package_file,
      republish: None,
      sources_file: None,
      tags: None
    }
  }

  pub fn set_changes_file(&mut self, changes_file: String) {
    self.changes_file = Some(changes_file);
  }

  pub fn with_changes_file(mut self, changes_file: String) -> DebPackageUploadRequest {
    self.changes_file = Some(changes_file);
    self
  }

  pub fn changes_file(&self) -> Option<&String> {
    self.changes_file.as_ref()
  }

  pub fn reset_changes_file(&mut self) {
    self.changes_file = None;
  }

  pub fn set_component(&mut self, component: String) {
    self.component = Some(component);
  }

  pub fn with_component(mut self, component: String) -> DebPackageUploadRequest {
    self.component = Some(component);
    self
  }

  pub fn component(&self) -> Option<&String> {
    self.component.as_ref()
  }

  pub fn reset_component(&mut self) {
    self.component = None;
  }

  pub fn set_distribution(&mut self, distribution: String) {
    self.distribution = distribution;
  }

  pub fn with_distribution(mut self, distribution: String) -> DebPackageUploadRequest {
    self.distribution = distribution;
    self
  }

  pub fn distribution(&self) -> &String {
    &self.distribution
  }


  pub fn set_package_file(&mut self, package_file: String) {
    self.package_file = package_file;
  }

  pub fn with_package_file(mut self, package_file: String) -> DebPackageUploadRequest {
    self.package_file = package_file;
    self
  }

  pub fn package_file(&self) -> &String {
    &self.package_file
  }


  pub fn set_republish(&mut self, republish: bool) {
    self.republish = Some(republish);
  }

  pub fn with_republish(mut self, republish: bool) -> DebPackageUploadRequest {
    self.republish = Some(republish);
    self
  }

  pub fn republish(&self) -> Option<&bool> {
    self.republish.as_ref()
  }

  pub fn reset_republish(&mut self) {
    self.republish = None;
  }

  pub fn set_sources_file(&mut self, sources_file: String) {
    self.sources_file = Some(sources_file);
  }

  pub fn with_sources_file(mut self, sources_file: String) -> DebPackageUploadRequest {
    self.sources_file = Some(sources_file);
    self
  }

  pub fn sources_file(&self) -> Option<&String> {
    self.sources_file.as_ref()
  }

  pub fn reset_sources_file(&mut self) {
    self.sources_file = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> DebPackageUploadRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

}



