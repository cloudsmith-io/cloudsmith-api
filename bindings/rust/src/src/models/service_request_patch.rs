/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceRequestPatch {
  /// The description of the service
  #[serde(rename = "description")]
  description: Option<String>,
  /// The name of the service
  #[serde(rename = "name")]
  name: Option<String>,
  /// The role of the service.
  #[serde(rename = "role")]
  role: Option<String>,
  #[serde(rename = "teams")]
  teams: Option<Vec<::models::ServiceTeams>>
}

impl ServiceRequestPatch {
  pub fn new() -> ServiceRequestPatch {
    ServiceRequestPatch {
      description: None,
      name: None,
      role: None,
      teams: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ServiceRequestPatch {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ServiceRequestPatch {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_role(&mut self, role: String) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: String) -> ServiceRequestPatch {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&String> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_teams(&mut self, teams: Vec<::models::ServiceTeams>) {
    self.teams = Some(teams);
  }

  pub fn with_teams(mut self, teams: Vec<::models::ServiceTeams>) -> ServiceRequestPatch {
    self.teams = Some(teams);
    self
  }

  pub fn teams(&self) -> Option<&Vec<::models::ServiceTeams>> {
    self.teams.as_ref()
  }

  pub fn reset_teams(&mut self) {
    self.teams = None;
  }

}



