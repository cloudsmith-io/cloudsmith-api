/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FormatSupportUpstream : The upstream support for the package format

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FormatSupportUpstream {
  /// The authentication modes supported by the upstream format
  #[serde(rename = "auth_modes")]
  auth_modes: Vec<String>,
  /// If true the upstream format supports caching
  #[serde(rename = "caching")]
  caching: bool,
  /// If true the upstream format supports indexing
  #[serde(rename = "indexing")]
  indexing: bool,
  /// The behavior of the upstream when indexing
  #[serde(rename = "indexing_behavior")]
  indexing_behavior: Option<String>,
  /// If true the upstream format supports proxying
  #[serde(rename = "proxying")]
  proxying: bool,
  /// The signature verification supported by the upstream format
  #[serde(rename = "signature_verification")]
  signature_verification: Option<String>
}

impl FormatSupportUpstream {
  /// The upstream support for the package format
  pub fn new(auth_modes: Vec<String>, caching: bool, indexing: bool, proxying: bool) -> FormatSupportUpstream {
    FormatSupportUpstream {
      auth_modes: auth_modes,
      caching: caching,
      indexing: indexing,
      indexing_behavior: None,
      proxying: proxying,
      signature_verification: None
    }
  }

  pub fn set_auth_modes(&mut self, auth_modes: Vec<String>) {
    self.auth_modes = auth_modes;
  }

  pub fn with_auth_modes(mut self, auth_modes: Vec<String>) -> FormatSupportUpstream {
    self.auth_modes = auth_modes;
    self
  }

  pub fn auth_modes(&self) -> &Vec<String> {
    &self.auth_modes
  }


  pub fn set_caching(&mut self, caching: bool) {
    self.caching = caching;
  }

  pub fn with_caching(mut self, caching: bool) -> FormatSupportUpstream {
    self.caching = caching;
    self
  }

  pub fn caching(&self) -> &bool {
    &self.caching
  }


  pub fn set_indexing(&mut self, indexing: bool) {
    self.indexing = indexing;
  }

  pub fn with_indexing(mut self, indexing: bool) -> FormatSupportUpstream {
    self.indexing = indexing;
    self
  }

  pub fn indexing(&self) -> &bool {
    &self.indexing
  }


  pub fn set_indexing_behavior(&mut self, indexing_behavior: String) {
    self.indexing_behavior = Some(indexing_behavior);
  }

  pub fn with_indexing_behavior(mut self, indexing_behavior: String) -> FormatSupportUpstream {
    self.indexing_behavior = Some(indexing_behavior);
    self
  }

  pub fn indexing_behavior(&self) -> Option<&String> {
    self.indexing_behavior.as_ref()
  }

  pub fn reset_indexing_behavior(&mut self) {
    self.indexing_behavior = None;
  }

  pub fn set_proxying(&mut self, proxying: bool) {
    self.proxying = proxying;
  }

  pub fn with_proxying(mut self, proxying: bool) -> FormatSupportUpstream {
    self.proxying = proxying;
    self
  }

  pub fn proxying(&self) -> &bool {
    &self.proxying
  }


  pub fn set_signature_verification(&mut self, signature_verification: String) {
    self.signature_verification = Some(signature_verification);
  }

  pub fn with_signature_verification(mut self, signature_verification: String) -> FormatSupportUpstream {
    self.signature_verification = Some(signature_verification);
    self
  }

  pub fn signature_verification(&self) -> Option<&String> {
    self.signature_verification.as_ref()
  }

  pub fn reset_signature_verification(&mut self) {
    self.signature_verification = None;
  }

}



