/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryGeoIpTestAddressResponseDict {
  /// The result of the IP test
  #[serde(rename = "allowed")]
  allowed: bool,
  /// The country code of the tested IP address
  #[serde(rename = "country_code")]
  country_code: String,
  /// The IP address that was tested
  #[serde(rename = "ip_address")]
  ip_address: String,
  /// The reason for the result
  #[serde(rename = "reason")]
  reason: String
}

impl RepositoryGeoIpTestAddressResponseDict {
  pub fn new(allowed: bool, country_code: String, ip_address: String, reason: String) -> RepositoryGeoIpTestAddressResponseDict {
    RepositoryGeoIpTestAddressResponseDict {
      allowed: allowed,
      country_code: country_code,
      ip_address: ip_address,
      reason: reason
    }
  }

  pub fn set_allowed(&mut self, allowed: bool) {
    self.allowed = allowed;
  }

  pub fn with_allowed(mut self, allowed: bool) -> RepositoryGeoIpTestAddressResponseDict {
    self.allowed = allowed;
    self
  }

  pub fn allowed(&self) -> &bool {
    &self.allowed
  }


  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = country_code;
  }

  pub fn with_country_code(mut self, country_code: String) -> RepositoryGeoIpTestAddressResponseDict {
    self.country_code = country_code;
    self
  }

  pub fn country_code(&self) -> &String {
    &self.country_code
  }


  pub fn set_ip_address(&mut self, ip_address: String) {
    self.ip_address = ip_address;
  }

  pub fn with_ip_address(mut self, ip_address: String) -> RepositoryGeoIpTestAddressResponseDict {
    self.ip_address = ip_address;
    self
  }

  pub fn ip_address(&self) -> &String {
    &self.ip_address
  }


  pub fn set_reason(&mut self, reason: String) {
    self.reason = reason;
  }

  pub fn with_reason(mut self, reason: String) -> RepositoryGeoIpTestAddressResponseDict {
    self.reason = reason;
    self
  }

  pub fn reason(&self) -> &String {
    &self.reason
  }


}



