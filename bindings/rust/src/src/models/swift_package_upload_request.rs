/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SwiftPackageUploadRequest {
  /// The name of the author of the package.
  #[serde(rename = "author_name")]
  author_name: Option<String>,
  /// The organization of the author.
  #[serde(rename = "author_org")]
  author_org: Option<String>,
  /// The license URL of this package.
  #[serde(rename = "license_url")]
  license_url: Option<String>,
  /// The name of this package.
  #[serde(rename = "name")]
  name: String,
  /// The primary file for the package.
  #[serde(rename = "package_file")]
  package_file: String,
  /// The URL of the readme for the package.
  #[serde(rename = "readme_url")]
  readme_url: Option<String>,
  /// The URL of the SCM repository for the package.
  #[serde(rename = "repository_url")]
  repository_url: Option<String>,
  /// If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  #[serde(rename = "republish")]
  republish: Option<bool>,
  /// A scope provides a namespace for related packages within the package registry.
  #[serde(rename = "scope")]
  scope: String,
  /// A comma-separated values list of tags to add to the package.
  #[serde(rename = "tags")]
  tags: Option<String>,
  /// The raw version for this package.
  #[serde(rename = "version")]
  version: String
}

impl SwiftPackageUploadRequest {
  pub fn new(name: String, package_file: String, scope: String, version: String) -> SwiftPackageUploadRequest {
    SwiftPackageUploadRequest {
      author_name: None,
      author_org: None,
      license_url: None,
      name: name,
      package_file: package_file,
      readme_url: None,
      repository_url: None,
      republish: None,
      scope: scope,
      tags: None,
      version: version
    }
  }

  pub fn set_author_name(&mut self, author_name: String) {
    self.author_name = Some(author_name);
  }

  pub fn with_author_name(mut self, author_name: String) -> SwiftPackageUploadRequest {
    self.author_name = Some(author_name);
    self
  }

  pub fn author_name(&self) -> Option<&String> {
    self.author_name.as_ref()
  }

  pub fn reset_author_name(&mut self) {
    self.author_name = None;
  }

  pub fn set_author_org(&mut self, author_org: String) {
    self.author_org = Some(author_org);
  }

  pub fn with_author_org(mut self, author_org: String) -> SwiftPackageUploadRequest {
    self.author_org = Some(author_org);
    self
  }

  pub fn author_org(&self) -> Option<&String> {
    self.author_org.as_ref()
  }

  pub fn reset_author_org(&mut self) {
    self.author_org = None;
  }

  pub fn set_license_url(&mut self, license_url: String) {
    self.license_url = Some(license_url);
  }

  pub fn with_license_url(mut self, license_url: String) -> SwiftPackageUploadRequest {
    self.license_url = Some(license_url);
    self
  }

  pub fn license_url(&self) -> Option<&String> {
    self.license_url.as_ref()
  }

  pub fn reset_license_url(&mut self) {
    self.license_url = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> SwiftPackageUploadRequest {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_package_file(&mut self, package_file: String) {
    self.package_file = package_file;
  }

  pub fn with_package_file(mut self, package_file: String) -> SwiftPackageUploadRequest {
    self.package_file = package_file;
    self
  }

  pub fn package_file(&self) -> &String {
    &self.package_file
  }


  pub fn set_readme_url(&mut self, readme_url: String) {
    self.readme_url = Some(readme_url);
  }

  pub fn with_readme_url(mut self, readme_url: String) -> SwiftPackageUploadRequest {
    self.readme_url = Some(readme_url);
    self
  }

  pub fn readme_url(&self) -> Option<&String> {
    self.readme_url.as_ref()
  }

  pub fn reset_readme_url(&mut self) {
    self.readme_url = None;
  }

  pub fn set_repository_url(&mut self, repository_url: String) {
    self.repository_url = Some(repository_url);
  }

  pub fn with_repository_url(mut self, repository_url: String) -> SwiftPackageUploadRequest {
    self.repository_url = Some(repository_url);
    self
  }

  pub fn repository_url(&self) -> Option<&String> {
    self.repository_url.as_ref()
  }

  pub fn reset_repository_url(&mut self) {
    self.repository_url = None;
  }

  pub fn set_republish(&mut self, republish: bool) {
    self.republish = Some(republish);
  }

  pub fn with_republish(mut self, republish: bool) -> SwiftPackageUploadRequest {
    self.republish = Some(republish);
    self
  }

  pub fn republish(&self) -> Option<&bool> {
    self.republish.as_ref()
  }

  pub fn reset_republish(&mut self) {
    self.republish = None;
  }

  pub fn set_scope(&mut self, scope: String) {
    self.scope = scope;
  }

  pub fn with_scope(mut self, scope: String) -> SwiftPackageUploadRequest {
    self.scope = scope;
    self
  }

  pub fn scope(&self) -> &String {
    &self.scope
  }


  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> SwiftPackageUploadRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = version;
  }

  pub fn with_version(mut self, version: String) -> SwiftPackageUploadRequest {
    self.version = version;
    self
  }

  pub fn version(&self) -> &String {
    &self.version
  }


}



