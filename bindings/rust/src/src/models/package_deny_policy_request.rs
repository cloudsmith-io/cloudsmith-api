/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageDenyPolicyRequest {
  #[serde(rename = "description")]
  description: Option<String>,
  /// Whether this rule is enabled or disabled.
  #[serde(rename = "enabled")]
  enabled: Option<bool>,
  #[serde(rename = "name")]
  name: Option<String>,
  /// Packages that match this query will trigger this deny rule.
  #[serde(rename = "package_query_string")]
  package_query_string: String
}

impl PackageDenyPolicyRequest {
  pub fn new(package_query_string: String) -> PackageDenyPolicyRequest {
    PackageDenyPolicyRequest {
      description: None,
      enabled: None,
      name: None,
      package_query_string: package_query_string
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> PackageDenyPolicyRequest {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_enabled(&mut self, enabled: bool) {
    self.enabled = Some(enabled);
  }

  pub fn with_enabled(mut self, enabled: bool) -> PackageDenyPolicyRequest {
    self.enabled = Some(enabled);
    self
  }

  pub fn enabled(&self) -> Option<&bool> {
    self.enabled.as_ref()
  }

  pub fn reset_enabled(&mut self) {
    self.enabled = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PackageDenyPolicyRequest {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_package_query_string(&mut self, package_query_string: String) {
    self.package_query_string = package_query_string;
  }

  pub fn with_package_query_string(mut self, package_query_string: String) -> PackageDenyPolicyRequest {
    self.package_query_string = package_query_string;
    self
  }

  pub fn package_query_string(&self) -> &String {
    &self.package_query_string
  }


}



