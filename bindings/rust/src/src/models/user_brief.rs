/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserBrief {
  /// If true then you're logged in as a user.
  #[serde(rename = "authenticated")]
  authenticated: Option<bool>,
  /// Your email address that we use to contact you. This is only visible to you.
  #[serde(rename = "email")]
  email: Option<String>,
  /// The full name of the user (if any).
  #[serde(rename = "name")]
  name: Option<String>,
  /// The URL for the full profile of the user.
  #[serde(rename = "profile_url")]
  profile_url: Option<String>,
  #[serde(rename = "self_url")]
  self_url: Option<String>,
  #[serde(rename = "slug")]
  slug: Option<String>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>
}

impl UserBrief {
  pub fn new() -> UserBrief {
    UserBrief {
      authenticated: None,
      email: None,
      name: None,
      profile_url: None,
      self_url: None,
      slug: None,
      slug_perm: None
    }
  }

  pub fn set_authenticated(&mut self, authenticated: bool) {
    self.authenticated = Some(authenticated);
  }

  pub fn with_authenticated(mut self, authenticated: bool) -> UserBrief {
    self.authenticated = Some(authenticated);
    self
  }

  pub fn authenticated(&self) -> Option<&bool> {
    self.authenticated.as_ref()
  }

  pub fn reset_authenticated(&mut self) {
    self.authenticated = None;
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> UserBrief {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UserBrief {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_profile_url(&mut self, profile_url: String) {
    self.profile_url = Some(profile_url);
  }

  pub fn with_profile_url(mut self, profile_url: String) -> UserBrief {
    self.profile_url = Some(profile_url);
    self
  }

  pub fn profile_url(&self) -> Option<&String> {
    self.profile_url.as_ref()
  }

  pub fn reset_profile_url(&mut self) {
    self.profile_url = None;
  }

  pub fn set_self_url(&mut self, self_url: String) {
    self.self_url = Some(self_url);
  }

  pub fn with_self_url(mut self, self_url: String) -> UserBrief {
    self.self_url = Some(self_url);
    self
  }

  pub fn self_url(&self) -> Option<&String> {
    self.self_url.as_ref()
  }

  pub fn reset_self_url(&mut self) {
    self.self_url = None;
  }

  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> UserBrief {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> UserBrief {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

}



