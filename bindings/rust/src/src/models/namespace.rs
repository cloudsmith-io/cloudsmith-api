/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Namespace {
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "slug")]
  slug: Option<String>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>,
  #[serde(rename = "type_name")]
  type_name: Option<String>
}

impl Namespace {
  pub fn new() -> Namespace {
    Namespace {
      name: None,
      slug: None,
      slug_perm: None,
      type_name: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Namespace {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> Namespace {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> Namespace {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

  pub fn set_type_name(&mut self, type_name: String) {
    self.type_name = Some(type_name);
  }

  pub fn with_type_name(mut self, type_name: String) -> Namespace {
    self.type_name = Some(type_name);
    self
  }

  pub fn type_name(&self) -> Option<&String> {
    self.type_name.as_ref()
  }

  pub fn reset_type_name(&mut self) {
    self.type_name = None;
  }

}



