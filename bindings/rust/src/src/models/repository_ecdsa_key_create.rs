/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryEcdsaKeyCreate {
  /// The ECDSA passphrase used for signing.
  #[serde(rename = "ecdsa_passphrase")]
  ecdsa_passphrase: Option<String>,
  /// The ECDSA private key.
  #[serde(rename = "ecdsa_private_key")]
  ecdsa_private_key: String
}

impl RepositoryEcdsaKeyCreate {
  pub fn new(ecdsa_private_key: String) -> RepositoryEcdsaKeyCreate {
    RepositoryEcdsaKeyCreate {
      ecdsa_passphrase: None,
      ecdsa_private_key: ecdsa_private_key
    }
  }

  pub fn set_ecdsa_passphrase(&mut self, ecdsa_passphrase: String) {
    self.ecdsa_passphrase = Some(ecdsa_passphrase);
  }

  pub fn with_ecdsa_passphrase(mut self, ecdsa_passphrase: String) -> RepositoryEcdsaKeyCreate {
    self.ecdsa_passphrase = Some(ecdsa_passphrase);
    self
  }

  pub fn ecdsa_passphrase(&self) -> Option<&String> {
    self.ecdsa_passphrase.as_ref()
  }

  pub fn reset_ecdsa_passphrase(&mut self) {
    self.ecdsa_passphrase = None;
  }

  pub fn set_ecdsa_private_key(&mut self, ecdsa_private_key: String) {
    self.ecdsa_private_key = ecdsa_private_key;
  }

  pub fn with_ecdsa_private_key(mut self, ecdsa_private_key: String) -> RepositoryEcdsaKeyCreate {
    self.ecdsa_private_key = ecdsa_private_key;
    self
  }

  pub fn ecdsa_private_key(&self) -> &String {
    &self.ecdsa_private_key
  }


}



