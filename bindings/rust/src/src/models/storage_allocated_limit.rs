/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StorageAllocatedLimit {
  #[serde(rename = "configured")]
  configured: Option<String>,
  #[serde(rename = "peak")]
  peak: Option<String>,
  #[serde(rename = "percentage_used")]
  percentage_used: Option<String>,
  #[serde(rename = "plan_limit")]
  plan_limit: Option<String>,
  #[serde(rename = "used")]
  used: Option<String>
}

impl StorageAllocatedLimit {
  pub fn new() -> StorageAllocatedLimit {
    StorageAllocatedLimit {
      configured: None,
      peak: None,
      percentage_used: None,
      plan_limit: None,
      used: None
    }
  }

  pub fn set_configured(&mut self, configured: String) {
    self.configured = Some(configured);
  }

  pub fn with_configured(mut self, configured: String) -> StorageAllocatedLimit {
    self.configured = Some(configured);
    self
  }

  pub fn configured(&self) -> Option<&String> {
    self.configured.as_ref()
  }

  pub fn reset_configured(&mut self) {
    self.configured = None;
  }

  pub fn set_peak(&mut self, peak: String) {
    self.peak = Some(peak);
  }

  pub fn with_peak(mut self, peak: String) -> StorageAllocatedLimit {
    self.peak = Some(peak);
    self
  }

  pub fn peak(&self) -> Option<&String> {
    self.peak.as_ref()
  }

  pub fn reset_peak(&mut self) {
    self.peak = None;
  }

  pub fn set_percentage_used(&mut self, percentage_used: String) {
    self.percentage_used = Some(percentage_used);
  }

  pub fn with_percentage_used(mut self, percentage_used: String) -> StorageAllocatedLimit {
    self.percentage_used = Some(percentage_used);
    self
  }

  pub fn percentage_used(&self) -> Option<&String> {
    self.percentage_used.as_ref()
  }

  pub fn reset_percentage_used(&mut self) {
    self.percentage_used = None;
  }

  pub fn set_plan_limit(&mut self, plan_limit: String) {
    self.plan_limit = Some(plan_limit);
  }

  pub fn with_plan_limit(mut self, plan_limit: String) -> StorageAllocatedLimit {
    self.plan_limit = Some(plan_limit);
    self
  }

  pub fn plan_limit(&self) -> Option<&String> {
    self.plan_limit.as_ref()
  }

  pub fn reset_plan_limit(&mut self) {
    self.plan_limit = None;
  }

  pub fn set_used(&mut self, used: String) {
    self.used = Some(used);
  }

  pub fn with_used(mut self, used: String) -> StorageAllocatedLimit {
    self.used = Some(used);
    self
  }

  pub fn used(&self) -> Option<&String> {
    self.used.as_ref()
  }

  pub fn reset_used(&mut self) {
    self.used = None;
  }

}



