/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CommonMetrics {
  /// Number of packages with at least 1 download
  #[serde(rename = "active")]
  active: Option<i32>,
  #[serde(rename = "bandwidth")]
  bandwidth: ::models::CommonBandwidthMetrics,
  #[serde(rename = "downloads")]
  downloads: ::models::CommonDownloadsMetrics,
  /// Packages with zero downloads
  #[serde(rename = "inactive")]
  inactive: Option<i32>,
  /// Total number of packages in repo
  #[serde(rename = "total")]
  total: Option<i32>
}

impl CommonMetrics {
  pub fn new(bandwidth: ::models::CommonBandwidthMetrics, downloads: ::models::CommonDownloadsMetrics) -> CommonMetrics {
    CommonMetrics {
      active: None,
      bandwidth: bandwidth,
      downloads: downloads,
      inactive: None,
      total: None
    }
  }

  pub fn set_active(&mut self, active: i32) {
    self.active = Some(active);
  }

  pub fn with_active(mut self, active: i32) -> CommonMetrics {
    self.active = Some(active);
    self
  }

  pub fn active(&self) -> Option<&i32> {
    self.active.as_ref()
  }

  pub fn reset_active(&mut self) {
    self.active = None;
  }

  pub fn set_bandwidth(&mut self, bandwidth: ::models::CommonBandwidthMetrics) {
    self.bandwidth = bandwidth;
  }

  pub fn with_bandwidth(mut self, bandwidth: ::models::CommonBandwidthMetrics) -> CommonMetrics {
    self.bandwidth = bandwidth;
    self
  }

  pub fn bandwidth(&self) -> &::models::CommonBandwidthMetrics {
    &self.bandwidth
  }


  pub fn set_downloads(&mut self, downloads: ::models::CommonDownloadsMetrics) {
    self.downloads = downloads;
  }

  pub fn with_downloads(mut self, downloads: ::models::CommonDownloadsMetrics) -> CommonMetrics {
    self.downloads = downloads;
    self
  }

  pub fn downloads(&self) -> &::models::CommonDownloadsMetrics {
    &self.downloads
  }


  pub fn set_inactive(&mut self, inactive: i32) {
    self.inactive = Some(inactive);
  }

  pub fn with_inactive(mut self, inactive: i32) -> CommonMetrics {
    self.inactive = Some(inactive);
    self
  }

  pub fn inactive(&self) -> Option<&i32> {
    self.inactive.as_ref()
  }

  pub fn reset_inactive(&mut self) {
    self.inactive = None;
  }

  pub fn set_total(&mut self, total: i32) {
    self.total = Some(total);
  }

  pub fn with_total(mut self, total: i32) -> CommonMetrics {
    self.total = Some(total);
    self
  }

  pub fn total(&self) -> Option<&i32> {
    self.total.as_ref()
  }

  pub fn reset_total(&mut self) {
    self.total = None;
  }

}



