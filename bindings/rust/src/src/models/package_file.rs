/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageFile {
  #[serde(rename = "cdn_url")]
  cdn_url: Option<String>,
  #[serde(rename = "checksum_md5")]
  checksum_md5: Option<String>,
  #[serde(rename = "checksum_sha1")]
  checksum_sha1: Option<String>,
  #[serde(rename = "checksum_sha256")]
  checksum_sha256: Option<String>,
  #[serde(rename = "checksum_sha512")]
  checksum_sha512: Option<String>,
  #[serde(rename = "downloads")]
  downloads: Option<i32>,
  #[serde(rename = "filename")]
  filename: Option<String>,
  #[serde(rename = "is_downloadable")]
  is_downloadable: Option<bool>,
  #[serde(rename = "is_primary")]
  is_primary: Option<bool>,
  #[serde(rename = "is_synchronised")]
  is_synchronised: Option<bool>,
  #[serde(rename = "signature_url")]
  signature_url: Option<String>,
  /// The calculated size of the file.
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>,
  /// Freeform descriptor that describes what the file is.
  #[serde(rename = "tag")]
  tag: Option<String>
}

impl PackageFile {
  pub fn new() -> PackageFile {
    PackageFile {
      cdn_url: None,
      checksum_md5: None,
      checksum_sha1: None,
      checksum_sha256: None,
      checksum_sha512: None,
      downloads: None,
      filename: None,
      is_downloadable: None,
      is_primary: None,
      is_synchronised: None,
      signature_url: None,
      size: None,
      slug_perm: None,
      tag: None
    }
  }

  pub fn set_cdn_url(&mut self, cdn_url: String) {
    self.cdn_url = Some(cdn_url);
  }

  pub fn with_cdn_url(mut self, cdn_url: String) -> PackageFile {
    self.cdn_url = Some(cdn_url);
    self
  }

  pub fn cdn_url(&self) -> Option<&String> {
    self.cdn_url.as_ref()
  }

  pub fn reset_cdn_url(&mut self) {
    self.cdn_url = None;
  }

  pub fn set_checksum_md5(&mut self, checksum_md5: String) {
    self.checksum_md5 = Some(checksum_md5);
  }

  pub fn with_checksum_md5(mut self, checksum_md5: String) -> PackageFile {
    self.checksum_md5 = Some(checksum_md5);
    self
  }

  pub fn checksum_md5(&self) -> Option<&String> {
    self.checksum_md5.as_ref()
  }

  pub fn reset_checksum_md5(&mut self) {
    self.checksum_md5 = None;
  }

  pub fn set_checksum_sha1(&mut self, checksum_sha1: String) {
    self.checksum_sha1 = Some(checksum_sha1);
  }

  pub fn with_checksum_sha1(mut self, checksum_sha1: String) -> PackageFile {
    self.checksum_sha1 = Some(checksum_sha1);
    self
  }

  pub fn checksum_sha1(&self) -> Option<&String> {
    self.checksum_sha1.as_ref()
  }

  pub fn reset_checksum_sha1(&mut self) {
    self.checksum_sha1 = None;
  }

  pub fn set_checksum_sha256(&mut self, checksum_sha256: String) {
    self.checksum_sha256 = Some(checksum_sha256);
  }

  pub fn with_checksum_sha256(mut self, checksum_sha256: String) -> PackageFile {
    self.checksum_sha256 = Some(checksum_sha256);
    self
  }

  pub fn checksum_sha256(&self) -> Option<&String> {
    self.checksum_sha256.as_ref()
  }

  pub fn reset_checksum_sha256(&mut self) {
    self.checksum_sha256 = None;
  }

  pub fn set_checksum_sha512(&mut self, checksum_sha512: String) {
    self.checksum_sha512 = Some(checksum_sha512);
  }

  pub fn with_checksum_sha512(mut self, checksum_sha512: String) -> PackageFile {
    self.checksum_sha512 = Some(checksum_sha512);
    self
  }

  pub fn checksum_sha512(&self) -> Option<&String> {
    self.checksum_sha512.as_ref()
  }

  pub fn reset_checksum_sha512(&mut self) {
    self.checksum_sha512 = None;
  }

  pub fn set_downloads(&mut self, downloads: i32) {
    self.downloads = Some(downloads);
  }

  pub fn with_downloads(mut self, downloads: i32) -> PackageFile {
    self.downloads = Some(downloads);
    self
  }

  pub fn downloads(&self) -> Option<&i32> {
    self.downloads.as_ref()
  }

  pub fn reset_downloads(&mut self) {
    self.downloads = None;
  }

  pub fn set_filename(&mut self, filename: String) {
    self.filename = Some(filename);
  }

  pub fn with_filename(mut self, filename: String) -> PackageFile {
    self.filename = Some(filename);
    self
  }

  pub fn filename(&self) -> Option<&String> {
    self.filename.as_ref()
  }

  pub fn reset_filename(&mut self) {
    self.filename = None;
  }

  pub fn set_is_downloadable(&mut self, is_downloadable: bool) {
    self.is_downloadable = Some(is_downloadable);
  }

  pub fn with_is_downloadable(mut self, is_downloadable: bool) -> PackageFile {
    self.is_downloadable = Some(is_downloadable);
    self
  }

  pub fn is_downloadable(&self) -> Option<&bool> {
    self.is_downloadable.as_ref()
  }

  pub fn reset_is_downloadable(&mut self) {
    self.is_downloadable = None;
  }

  pub fn set_is_primary(&mut self, is_primary: bool) {
    self.is_primary = Some(is_primary);
  }

  pub fn with_is_primary(mut self, is_primary: bool) -> PackageFile {
    self.is_primary = Some(is_primary);
    self
  }

  pub fn is_primary(&self) -> Option<&bool> {
    self.is_primary.as_ref()
  }

  pub fn reset_is_primary(&mut self) {
    self.is_primary = None;
  }

  pub fn set_is_synchronised(&mut self, is_synchronised: bool) {
    self.is_synchronised = Some(is_synchronised);
  }

  pub fn with_is_synchronised(mut self, is_synchronised: bool) -> PackageFile {
    self.is_synchronised = Some(is_synchronised);
    self
  }

  pub fn is_synchronised(&self) -> Option<&bool> {
    self.is_synchronised.as_ref()
  }

  pub fn reset_is_synchronised(&mut self) {
    self.is_synchronised = None;
  }

  pub fn set_signature_url(&mut self, signature_url: String) {
    self.signature_url = Some(signature_url);
  }

  pub fn with_signature_url(mut self, signature_url: String) -> PackageFile {
    self.signature_url = Some(signature_url);
    self
  }

  pub fn signature_url(&self) -> Option<&String> {
    self.signature_url.as_ref()
  }

  pub fn reset_signature_url(&mut self) {
    self.signature_url = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> PackageFile {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> PackageFile {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

  pub fn set_tag(&mut self, tag: String) {
    self.tag = Some(tag);
  }

  pub fn with_tag(mut self, tag: String) -> PackageFile {
    self.tag = Some(tag);
    self
  }

  pub fn tag(&self) -> Option<&String> {
    self.tag.as_ref()
  }

  pub fn reset_tag(&mut self) {
    self.tag = None;
  }

}



