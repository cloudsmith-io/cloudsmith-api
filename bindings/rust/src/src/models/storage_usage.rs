/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StorageUsage {
  #[serde(rename = "limit")]
  limit: Option<String>,
  #[serde(rename = "peak")]
  peak: Option<String>,
  #[serde(rename = "percentage")]
  percentage: Option<String>,
  #[serde(rename = "used")]
  used: Option<String>
}

impl StorageUsage {
  pub fn new() -> StorageUsage {
    StorageUsage {
      limit: None,
      peak: None,
      percentage: None,
      used: None
    }
  }

  pub fn set_limit(&mut self, limit: String) {
    self.limit = Some(limit);
  }

  pub fn with_limit(mut self, limit: String) -> StorageUsage {
    self.limit = Some(limit);
    self
  }

  pub fn limit(&self) -> Option<&String> {
    self.limit.as_ref()
  }

  pub fn reset_limit(&mut self) {
    self.limit = None;
  }

  pub fn set_peak(&mut self, peak: String) {
    self.peak = Some(peak);
  }

  pub fn with_peak(mut self, peak: String) -> StorageUsage {
    self.peak = Some(peak);
    self
  }

  pub fn peak(&self) -> Option<&String> {
    self.peak.as_ref()
  }

  pub fn reset_peak(&mut self) {
    self.peak = None;
  }

  pub fn set_percentage(&mut self, percentage: String) {
    self.percentage = Some(percentage);
  }

  pub fn with_percentage(mut self, percentage: String) -> StorageUsage {
    self.percentage = Some(percentage);
    self
  }

  pub fn percentage(&self) -> Option<&String> {
    self.percentage.as_ref()
  }

  pub fn reset_percentage(&mut self) {
    self.percentage = None;
  }

  pub fn set_used(&mut self, used: String) {
    self.used = Some(used);
  }

  pub fn with_used(mut self, used: String) -> StorageUsage {
    self.used = Some(used);
    self
  }

  pub fn used(&self) -> Option<&String> {
    self.used.as_ref()
  }

  pub fn reset_used(&mut self) {
    self.used = None;
  }

}



