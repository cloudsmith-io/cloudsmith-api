/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CranPackageUploadRequest {
  /// Binary package uploads for macOS should specify the architecture they were built for.
  #[serde(rename = "architecture")]
  architecture: Option<String>,
  /// The primary file for the package.
  #[serde(rename = "package_file")]
  package_file: String,
  /// Binary package uploads should specify the version of R they were built for.
  #[serde(rename = "r_version")]
  r_version: Option<String>,
  /// If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  #[serde(rename = "republish")]
  republish: Option<bool>,
  /// A comma-separated values list of tags to add to the package.
  #[serde(rename = "tags")]
  tags: Option<String>
}

impl CranPackageUploadRequest {
  pub fn new(package_file: String) -> CranPackageUploadRequest {
    CranPackageUploadRequest {
      architecture: None,
      package_file: package_file,
      r_version: None,
      republish: None,
      tags: None
    }
  }

  pub fn set_architecture(&mut self, architecture: String) {
    self.architecture = Some(architecture);
  }

  pub fn with_architecture(mut self, architecture: String) -> CranPackageUploadRequest {
    self.architecture = Some(architecture);
    self
  }

  pub fn architecture(&self) -> Option<&String> {
    self.architecture.as_ref()
  }

  pub fn reset_architecture(&mut self) {
    self.architecture = None;
  }

  pub fn set_package_file(&mut self, package_file: String) {
    self.package_file = package_file;
  }

  pub fn with_package_file(mut self, package_file: String) -> CranPackageUploadRequest {
    self.package_file = package_file;
    self
  }

  pub fn package_file(&self) -> &String {
    &self.package_file
  }


  pub fn set_r_version(&mut self, r_version: String) {
    self.r_version = Some(r_version);
  }

  pub fn with_r_version(mut self, r_version: String) -> CranPackageUploadRequest {
    self.r_version = Some(r_version);
    self
  }

  pub fn r_version(&self) -> Option<&String> {
    self.r_version.as_ref()
  }

  pub fn reset_r_version(&mut self) {
    self.r_version = None;
  }

  pub fn set_republish(&mut self, republish: bool) {
    self.republish = Some(republish);
  }

  pub fn with_republish(mut self, republish: bool) -> CranPackageUploadRequest {
    self.republish = Some(republish);
    self
  }

  pub fn republish(&self) -> Option<&bool> {
    self.republish.as_ref()
  }

  pub fn reset_republish(&mut self) {
    self.republish = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> CranPackageUploadRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

}



