/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RawPackageUploadRequest {
  /// A custom content/media (also known as MIME) type to be sent when downloading this file. By default Cloudsmith will attempt to detect the type, but if you need to override it, you can specify it here.
  #[serde(rename = "content_type")]
  content_type: Option<String>,
  /// A textual description of this package.
  #[serde(rename = "description")]
  description: Option<String>,
  /// The name of this package.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The primary file for the package.
  #[serde(rename = "package_file")]
  package_file: String,
  /// If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  #[serde(rename = "republish")]
  republish: Option<bool>,
  /// A one-liner synopsis of this package.
  #[serde(rename = "summary")]
  summary: Option<String>,
  /// A comma-separated values list of tags to add to the package.
  #[serde(rename = "tags")]
  tags: Option<String>,
  /// The raw version for this package.
  #[serde(rename = "version")]
  version: Option<String>
}

impl RawPackageUploadRequest {
  pub fn new(package_file: String) -> RawPackageUploadRequest {
    RawPackageUploadRequest {
      content_type: None,
      description: None,
      name: None,
      package_file: package_file,
      republish: None,
      summary: None,
      tags: None,
      version: None
    }
  }

  pub fn set_content_type(&mut self, content_type: String) {
    self.content_type = Some(content_type);
  }

  pub fn with_content_type(mut self, content_type: String) -> RawPackageUploadRequest {
    self.content_type = Some(content_type);
    self
  }

  pub fn content_type(&self) -> Option<&String> {
    self.content_type.as_ref()
  }

  pub fn reset_content_type(&mut self) {
    self.content_type = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> RawPackageUploadRequest {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> RawPackageUploadRequest {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_package_file(&mut self, package_file: String) {
    self.package_file = package_file;
  }

  pub fn with_package_file(mut self, package_file: String) -> RawPackageUploadRequest {
    self.package_file = package_file;
    self
  }

  pub fn package_file(&self) -> &String {
    &self.package_file
  }


  pub fn set_republish(&mut self, republish: bool) {
    self.republish = Some(republish);
  }

  pub fn with_republish(mut self, republish: bool) -> RawPackageUploadRequest {
    self.republish = Some(republish);
    self
  }

  pub fn republish(&self) -> Option<&bool> {
    self.republish.as_ref()
  }

  pub fn reset_republish(&mut self) {
    self.republish = None;
  }

  pub fn set_summary(&mut self, summary: String) {
    self.summary = Some(summary);
  }

  pub fn with_summary(mut self, summary: String) -> RawPackageUploadRequest {
    self.summary = Some(summary);
    self
  }

  pub fn summary(&self) -> Option<&String> {
    self.summary.as_ref()
  }

  pub fn reset_summary(&mut self) {
    self.summary = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> RawPackageUploadRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> RawPackageUploadRequest {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



