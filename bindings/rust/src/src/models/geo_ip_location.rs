/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GeoIpLocation {
  #[serde(rename = "city")]
  city: String,
  #[serde(rename = "continent")]
  continent: String,
  #[serde(rename = "country")]
  country: String,
  #[serde(rename = "country_code")]
  country_code: Option<String>,
  #[serde(rename = "latitude")]
  latitude: Option<String>,
  #[serde(rename = "longitude")]
  longitude: Option<String>,
  #[serde(rename = "postal_code")]
  postal_code: String
}

impl GeoIpLocation {
  pub fn new(city: String, continent: String, country: String, postal_code: String) -> GeoIpLocation {
    GeoIpLocation {
      city: city,
      continent: continent,
      country: country,
      country_code: None,
      latitude: None,
      longitude: None,
      postal_code: postal_code
    }
  }

  pub fn set_city(&mut self, city: String) {
    self.city = city;
  }

  pub fn with_city(mut self, city: String) -> GeoIpLocation {
    self.city = city;
    self
  }

  pub fn city(&self) -> &String {
    &self.city
  }


  pub fn set_continent(&mut self, continent: String) {
    self.continent = continent;
  }

  pub fn with_continent(mut self, continent: String) -> GeoIpLocation {
    self.continent = continent;
    self
  }

  pub fn continent(&self) -> &String {
    &self.continent
  }


  pub fn set_country(&mut self, country: String) {
    self.country = country;
  }

  pub fn with_country(mut self, country: String) -> GeoIpLocation {
    self.country = country;
    self
  }

  pub fn country(&self) -> &String {
    &self.country
  }


  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> GeoIpLocation {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_latitude(&mut self, latitude: String) {
    self.latitude = Some(latitude);
  }

  pub fn with_latitude(mut self, latitude: String) -> GeoIpLocation {
    self.latitude = Some(latitude);
    self
  }

  pub fn latitude(&self) -> Option<&String> {
    self.latitude.as_ref()
  }

  pub fn reset_latitude(&mut self) {
    self.latitude = None;
  }

  pub fn set_longitude(&mut self, longitude: String) {
    self.longitude = Some(longitude);
  }

  pub fn with_longitude(mut self, longitude: String) -> GeoIpLocation {
    self.longitude = Some(longitude);
    self
  }

  pub fn longitude(&self) -> Option<&String> {
    self.longitude.as_ref()
  }

  pub fn reset_longitude(&mut self) {
    self.longitude = None;
  }

  pub fn set_postal_code(&mut self, postal_code: String) {
    self.postal_code = postal_code;
  }

  pub fn with_postal_code(mut self, postal_code: String) -> GeoIpLocation {
    self.postal_code = postal_code;
    self
  }

  pub fn postal_code(&self) -> &String {
    &self.postal_code
  }


}



