/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Service {
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  #[serde(rename = "created_by")]
  created_by: Option<String>,
  #[serde(rename = "created_by_url")]
  created_by_url: Option<String>,
  /// The description of the service
  #[serde(rename = "description")]
  description: Option<String>,
  /// The API key of the service
  #[serde(rename = "key")]
  key: Option<String>,
  /// The time at which the API key will expire. This will only be populated if the Organization has an active API Key Policy.
  #[serde(rename = "key_expires_at")]
  key_expires_at: Option<String>,
  /// The name of the service
  #[serde(rename = "name")]
  name: String,
  /// The role of the service.
  #[serde(rename = "role")]
  role: Option<String>,
  /// The slug of the service
  #[serde(rename = "slug")]
  slug: Option<String>,
  #[serde(rename = "teams")]
  teams: Option<Vec<::models::ServiceTeams>>
}

impl Service {
  pub fn new(name: String) -> Service {
    Service {
      created_at: None,
      created_by: None,
      created_by_url: None,
      description: None,
      key: None,
      key_expires_at: None,
      name: name,
      role: None,
      slug: None,
      teams: None
    }
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> Service {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_created_by(&mut self, created_by: String) {
    self.created_by = Some(created_by);
  }

  pub fn with_created_by(mut self, created_by: String) -> Service {
    self.created_by = Some(created_by);
    self
  }

  pub fn created_by(&self) -> Option<&String> {
    self.created_by.as_ref()
  }

  pub fn reset_created_by(&mut self) {
    self.created_by = None;
  }

  pub fn set_created_by_url(&mut self, created_by_url: String) {
    self.created_by_url = Some(created_by_url);
  }

  pub fn with_created_by_url(mut self, created_by_url: String) -> Service {
    self.created_by_url = Some(created_by_url);
    self
  }

  pub fn created_by_url(&self) -> Option<&String> {
    self.created_by_url.as_ref()
  }

  pub fn reset_created_by_url(&mut self) {
    self.created_by_url = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Service {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> Service {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> Option<&String> {
    self.key.as_ref()
  }

  pub fn reset_key(&mut self) {
    self.key = None;
  }

  pub fn set_key_expires_at(&mut self, key_expires_at: String) {
    self.key_expires_at = Some(key_expires_at);
  }

  pub fn with_key_expires_at(mut self, key_expires_at: String) -> Service {
    self.key_expires_at = Some(key_expires_at);
    self
  }

  pub fn key_expires_at(&self) -> Option<&String> {
    self.key_expires_at.as_ref()
  }

  pub fn reset_key_expires_at(&mut self) {
    self.key_expires_at = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Service {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_role(&mut self, role: String) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: String) -> Service {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&String> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> Service {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_teams(&mut self, teams: Vec<::models::ServiceTeams>) {
    self.teams = Some(teams);
  }

  pub fn with_teams(mut self, teams: Vec<::models::ServiceTeams>) -> Service {
    self.teams = Some(teams);
    self
  }

  pub fn teams(&self) -> Option<&Vec<::models::ServiceTeams>> {
    self.teams.as_ref()
  }

  pub fn reset_teams(&mut self) {
    self.teams = None;
  }

}



