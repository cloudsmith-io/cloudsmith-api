/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageFilePartsUpload {
  /// The identifier for the file to use uploading parts.
  #[serde(rename = "identifier")]
  identifier: Option<String>,
  /// The querystring to use for the next-step PUT upload.
  #[serde(rename = "upload_querystring")]
  upload_querystring: Option<String>,
  /// The URL to use for the next-step PUT upload
  #[serde(rename = "upload_url")]
  upload_url: Option<String>
}

impl PackageFilePartsUpload {
  pub fn new() -> PackageFilePartsUpload {
    PackageFilePartsUpload {
      identifier: None,
      upload_querystring: None,
      upload_url: None
    }
  }

  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = Some(identifier);
  }

  pub fn with_identifier(mut self, identifier: String) -> PackageFilePartsUpload {
    self.identifier = Some(identifier);
    self
  }

  pub fn identifier(&self) -> Option<&String> {
    self.identifier.as_ref()
  }

  pub fn reset_identifier(&mut self) {
    self.identifier = None;
  }

  pub fn set_upload_querystring(&mut self, upload_querystring: String) {
    self.upload_querystring = Some(upload_querystring);
  }

  pub fn with_upload_querystring(mut self, upload_querystring: String) -> PackageFilePartsUpload {
    self.upload_querystring = Some(upload_querystring);
    self
  }

  pub fn upload_querystring(&self) -> Option<&String> {
    self.upload_querystring.as_ref()
  }

  pub fn reset_upload_querystring(&mut self) {
    self.upload_querystring = None;
  }

  pub fn set_upload_url(&mut self, upload_url: String) {
    self.upload_url = Some(upload_url);
  }

  pub fn with_upload_url(mut self, upload_url: String) -> PackageFilePartsUpload {
    self.upload_url = Some(upload_url);
    self
  }

  pub fn upload_url(&self) -> Option<&String> {
    self.upload_url.as_ref()
  }

  pub fn reset_upload_url(&mut self) {
    self.upload_url = None;
  }

}



