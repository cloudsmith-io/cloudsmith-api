/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationInvite {
  /// The email of the user to be invited.
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "expires_at")]
  expires_at: Option<String>,
  #[serde(rename = "inviter")]
  inviter: Option<String>,
  #[serde(rename = "inviter_url")]
  inviter_url: Option<String>,
  #[serde(rename = "org")]
  org: Option<String>,
  /// The role to be assigned to the invited user.
  #[serde(rename = "role")]
  role: Option<String>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>,
  #[serde(rename = "teams")]
  teams: Option<Vec<::models::OrganizationTeamInvite>>,
  /// The slug of the user to be invited.
  #[serde(rename = "user")]
  user: Option<String>,
  #[serde(rename = "user_url")]
  user_url: Option<String>
}

impl OrganizationInvite {
  pub fn new() -> OrganizationInvite {
    OrganizationInvite {
      email: None,
      expires_at: None,
      inviter: None,
      inviter_url: None,
      org: None,
      role: None,
      slug_perm: None,
      teams: None,
      user: None,
      user_url: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> OrganizationInvite {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_expires_at(&mut self, expires_at: String) {
    self.expires_at = Some(expires_at);
  }

  pub fn with_expires_at(mut self, expires_at: String) -> OrganizationInvite {
    self.expires_at = Some(expires_at);
    self
  }

  pub fn expires_at(&self) -> Option<&String> {
    self.expires_at.as_ref()
  }

  pub fn reset_expires_at(&mut self) {
    self.expires_at = None;
  }

  pub fn set_inviter(&mut self, inviter: String) {
    self.inviter = Some(inviter);
  }

  pub fn with_inviter(mut self, inviter: String) -> OrganizationInvite {
    self.inviter = Some(inviter);
    self
  }

  pub fn inviter(&self) -> Option<&String> {
    self.inviter.as_ref()
  }

  pub fn reset_inviter(&mut self) {
    self.inviter = None;
  }

  pub fn set_inviter_url(&mut self, inviter_url: String) {
    self.inviter_url = Some(inviter_url);
  }

  pub fn with_inviter_url(mut self, inviter_url: String) -> OrganizationInvite {
    self.inviter_url = Some(inviter_url);
    self
  }

  pub fn inviter_url(&self) -> Option<&String> {
    self.inviter_url.as_ref()
  }

  pub fn reset_inviter_url(&mut self) {
    self.inviter_url = None;
  }

  pub fn set_org(&mut self, org: String) {
    self.org = Some(org);
  }

  pub fn with_org(mut self, org: String) -> OrganizationInvite {
    self.org = Some(org);
    self
  }

  pub fn org(&self) -> Option<&String> {
    self.org.as_ref()
  }

  pub fn reset_org(&mut self) {
    self.org = None;
  }

  pub fn set_role(&mut self, role: String) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: String) -> OrganizationInvite {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&String> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> OrganizationInvite {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

  pub fn set_teams(&mut self, teams: Vec<::models::OrganizationTeamInvite>) {
    self.teams = Some(teams);
  }

  pub fn with_teams(mut self, teams: Vec<::models::OrganizationTeamInvite>) -> OrganizationInvite {
    self.teams = Some(teams);
    self
  }

  pub fn teams(&self) -> Option<&Vec<::models::OrganizationTeamInvite>> {
    self.teams.as_ref()
  }

  pub fn reset_teams(&mut self) {
    self.teams = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> OrganizationInvite {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_user_url(&mut self, user_url: String) {
    self.user_url = Some(user_url);
  }

  pub fn with_user_url(mut self, user_url: String) -> OrganizationInvite {
    self.user_url = Some(user_url);
    self
  }

  pub fn user_url(&self) -> Option<&String> {
    self.user_url.as_ref()
  }

  pub fn reset_user_url(&mut self) {
    self.user_url = None;
  }

}



