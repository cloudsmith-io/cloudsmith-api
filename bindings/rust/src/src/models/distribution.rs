/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Distribution : The distributions supported by this package format

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Distribution {
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "self_url")]
  self_url: Option<String>,
  /// The slug identifier for this distribution
  #[serde(rename = "slug")]
  slug: Option<String>,
  #[serde(rename = "variants")]
  variants: Option<String>
}

impl Distribution {
  /// The distributions supported by this package format
  pub fn new(name: String) -> Distribution {
    Distribution {
      name: name,
      self_url: None,
      slug: None,
      variants: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Distribution {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_self_url(&mut self, self_url: String) {
    self.self_url = Some(self_url);
  }

  pub fn with_self_url(mut self, self_url: String) -> Distribution {
    self.self_url = Some(self_url);
    self
  }

  pub fn self_url(&self) -> Option<&String> {
    self.self_url.as_ref()
  }

  pub fn reset_self_url(&mut self) {
    self.self_url = None;
  }

  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> Distribution {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_variants(&mut self, variants: String) {
    self.variants = Some(variants);
  }

  pub fn with_variants(mut self, variants: String) -> Distribution {
    self.variants = Some(variants);
    self
  }

  pub fn variants(&self) -> Option<&String> {
    self.variants.as_ref()
  }

  pub fn reset_variants(&mut self) {
    self.variants = None;
  }

}



