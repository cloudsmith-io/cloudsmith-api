/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryRsaKeyCreate {
  /// The RSA passphrase used for signing.
  #[serde(rename = "rsa_passphrase")]
  rsa_passphrase: Option<String>,
  /// The RSA private key.
  #[serde(rename = "rsa_private_key")]
  rsa_private_key: String
}

impl RepositoryRsaKeyCreate {
  pub fn new(rsa_private_key: String) -> RepositoryRsaKeyCreate {
    RepositoryRsaKeyCreate {
      rsa_passphrase: None,
      rsa_private_key: rsa_private_key
    }
  }

  pub fn set_rsa_passphrase(&mut self, rsa_passphrase: String) {
    self.rsa_passphrase = Some(rsa_passphrase);
  }

  pub fn with_rsa_passphrase(mut self, rsa_passphrase: String) -> RepositoryRsaKeyCreate {
    self.rsa_passphrase = Some(rsa_passphrase);
    self
  }

  pub fn rsa_passphrase(&self) -> Option<&String> {
    self.rsa_passphrase.as_ref()
  }

  pub fn reset_rsa_passphrase(&mut self) {
    self.rsa_passphrase = None;
  }

  pub fn set_rsa_private_key(&mut self, rsa_private_key: String) {
    self.rsa_private_key = rsa_private_key;
  }

  pub fn with_rsa_private_key(mut self, rsa_private_key: String) -> RepositoryRsaKeyCreate {
    self.rsa_private_key = rsa_private_key;
    self
  }

  pub fn rsa_private_key(&self) -> &String {
    &self.rsa_private_key
  }


}



