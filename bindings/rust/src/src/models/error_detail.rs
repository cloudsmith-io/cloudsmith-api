/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ErrorDetail {
  /// An extended message for the response.
  #[serde(rename = "detail")]
  detail: String,
  /// A Dictionary of related errors where key: Field and value: Array of Errors related to that field
  #[serde(rename = "fields")]
  fields: Option<::std::collections::HashMap<String, Vec<String>>>
}

impl ErrorDetail {
  pub fn new(detail: String) -> ErrorDetail {
    ErrorDetail {
      detail: detail,
      fields: None
    }
  }

  pub fn set_detail(&mut self, detail: String) {
    self.detail = detail;
  }

  pub fn with_detail(mut self, detail: String) -> ErrorDetail {
    self.detail = detail;
    self
  }

  pub fn detail(&self) -> &String {
    &self.detail
  }


  pub fn set_fields(&mut self, fields: ::std::collections::HashMap<String, Vec<String>>) {
    self.fields = Some(fields);
  }

  pub fn with_fields(mut self, fields: ::std::collections::HashMap<String, Vec<String>>) -> ErrorDetail {
    self.fields = Some(fields);
    self
  }

  pub fn fields(&self) -> Option<&::std::collections::HashMap<String, Vec<String>>> {
    self.fields.as_ref()
  }

  pub fn reset_fields(&mut self) {
    self.fields = None;
  }

}



