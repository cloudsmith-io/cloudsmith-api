/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MavenPackageUploadRequest {
  /// The ID of the artifact.
  #[serde(rename = "artifact_id")]
  artifact_id: Option<String>,
  /// Artifact's group ID.
  #[serde(rename = "group_id")]
  group_id: Option<String>,
  /// The ivy file is an XML file describing the dependencies of the project.
  #[serde(rename = "ivy_file")]
  ivy_file: Option<String>,
  /// Adds bundled Java documentation to the Maven package
  #[serde(rename = "javadoc_file")]
  javadoc_file: Option<String>,
  /// The primary file for the package.
  #[serde(rename = "package_file")]
  package_file: String,
  /// Artifact's Maven packaging type.
  #[serde(rename = "packaging")]
  packaging: Option<String>,
  /// The POM file is an XML file containing the Maven coordinates.
  #[serde(rename = "pom_file")]
  pom_file: Option<String>,
  /// If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  #[serde(rename = "republish")]
  republish: Option<bool>,
  #[serde(rename = "sbt_version")]
  sbt_version: Option<String>,
  #[serde(rename = "scala_version")]
  scala_version: Option<String>,
  /// Adds bundled Java source code to the Maven package.
  #[serde(rename = "sources_file")]
  sources_file: Option<String>,
  /// A comma-separated values list of tags to add to the package.
  #[serde(rename = "tags")]
  tags: Option<String>,
  /// Adds bundled Java tests to the Maven package.
  #[serde(rename = "tests_file")]
  tests_file: Option<String>,
  /// The raw version for this package.
  #[serde(rename = "version")]
  version: Option<String>
}

impl MavenPackageUploadRequest {
  pub fn new(package_file: String) -> MavenPackageUploadRequest {
    MavenPackageUploadRequest {
      artifact_id: None,
      group_id: None,
      ivy_file: None,
      javadoc_file: None,
      package_file: package_file,
      packaging: None,
      pom_file: None,
      republish: None,
      sbt_version: None,
      scala_version: None,
      sources_file: None,
      tags: None,
      tests_file: None,
      version: None
    }
  }

  pub fn set_artifact_id(&mut self, artifact_id: String) {
    self.artifact_id = Some(artifact_id);
  }

  pub fn with_artifact_id(mut self, artifact_id: String) -> MavenPackageUploadRequest {
    self.artifact_id = Some(artifact_id);
    self
  }

  pub fn artifact_id(&self) -> Option<&String> {
    self.artifact_id.as_ref()
  }

  pub fn reset_artifact_id(&mut self) {
    self.artifact_id = None;
  }

  pub fn set_group_id(&mut self, group_id: String) {
    self.group_id = Some(group_id);
  }

  pub fn with_group_id(mut self, group_id: String) -> MavenPackageUploadRequest {
    self.group_id = Some(group_id);
    self
  }

  pub fn group_id(&self) -> Option<&String> {
    self.group_id.as_ref()
  }

  pub fn reset_group_id(&mut self) {
    self.group_id = None;
  }

  pub fn set_ivy_file(&mut self, ivy_file: String) {
    self.ivy_file = Some(ivy_file);
  }

  pub fn with_ivy_file(mut self, ivy_file: String) -> MavenPackageUploadRequest {
    self.ivy_file = Some(ivy_file);
    self
  }

  pub fn ivy_file(&self) -> Option<&String> {
    self.ivy_file.as_ref()
  }

  pub fn reset_ivy_file(&mut self) {
    self.ivy_file = None;
  }

  pub fn set_javadoc_file(&mut self, javadoc_file: String) {
    self.javadoc_file = Some(javadoc_file);
  }

  pub fn with_javadoc_file(mut self, javadoc_file: String) -> MavenPackageUploadRequest {
    self.javadoc_file = Some(javadoc_file);
    self
  }

  pub fn javadoc_file(&self) -> Option<&String> {
    self.javadoc_file.as_ref()
  }

  pub fn reset_javadoc_file(&mut self) {
    self.javadoc_file = None;
  }

  pub fn set_package_file(&mut self, package_file: String) {
    self.package_file = package_file;
  }

  pub fn with_package_file(mut self, package_file: String) -> MavenPackageUploadRequest {
    self.package_file = package_file;
    self
  }

  pub fn package_file(&self) -> &String {
    &self.package_file
  }


  pub fn set_packaging(&mut self, packaging: String) {
    self.packaging = Some(packaging);
  }

  pub fn with_packaging(mut self, packaging: String) -> MavenPackageUploadRequest {
    self.packaging = Some(packaging);
    self
  }

  pub fn packaging(&self) -> Option<&String> {
    self.packaging.as_ref()
  }

  pub fn reset_packaging(&mut self) {
    self.packaging = None;
  }

  pub fn set_pom_file(&mut self, pom_file: String) {
    self.pom_file = Some(pom_file);
  }

  pub fn with_pom_file(mut self, pom_file: String) -> MavenPackageUploadRequest {
    self.pom_file = Some(pom_file);
    self
  }

  pub fn pom_file(&self) -> Option<&String> {
    self.pom_file.as_ref()
  }

  pub fn reset_pom_file(&mut self) {
    self.pom_file = None;
  }

  pub fn set_republish(&mut self, republish: bool) {
    self.republish = Some(republish);
  }

  pub fn with_republish(mut self, republish: bool) -> MavenPackageUploadRequest {
    self.republish = Some(republish);
    self
  }

  pub fn republish(&self) -> Option<&bool> {
    self.republish.as_ref()
  }

  pub fn reset_republish(&mut self) {
    self.republish = None;
  }

  pub fn set_sbt_version(&mut self, sbt_version: String) {
    self.sbt_version = Some(sbt_version);
  }

  pub fn with_sbt_version(mut self, sbt_version: String) -> MavenPackageUploadRequest {
    self.sbt_version = Some(sbt_version);
    self
  }

  pub fn sbt_version(&self) -> Option<&String> {
    self.sbt_version.as_ref()
  }

  pub fn reset_sbt_version(&mut self) {
    self.sbt_version = None;
  }

  pub fn set_scala_version(&mut self, scala_version: String) {
    self.scala_version = Some(scala_version);
  }

  pub fn with_scala_version(mut self, scala_version: String) -> MavenPackageUploadRequest {
    self.scala_version = Some(scala_version);
    self
  }

  pub fn scala_version(&self) -> Option<&String> {
    self.scala_version.as_ref()
  }

  pub fn reset_scala_version(&mut self) {
    self.scala_version = None;
  }

  pub fn set_sources_file(&mut self, sources_file: String) {
    self.sources_file = Some(sources_file);
  }

  pub fn with_sources_file(mut self, sources_file: String) -> MavenPackageUploadRequest {
    self.sources_file = Some(sources_file);
    self
  }

  pub fn sources_file(&self) -> Option<&String> {
    self.sources_file.as_ref()
  }

  pub fn reset_sources_file(&mut self) {
    self.sources_file = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> MavenPackageUploadRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_tests_file(&mut self, tests_file: String) {
    self.tests_file = Some(tests_file);
  }

  pub fn with_tests_file(mut self, tests_file: String) -> MavenPackageUploadRequest {
    self.tests_file = Some(tests_file);
    self
  }

  pub fn tests_file(&self) -> Option<&String> {
    self.tests_file.as_ref()
  }

  pub fn reset_tests_file(&mut self) {
    self.tests_file = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> MavenPackageUploadRequest {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



