/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationMembership {
  #[serde(rename = "email")]
  email: Option<String>,
  #[serde(rename = "has_two_factor")]
  has_two_factor: Option<bool>,
  #[serde(rename = "is_active")]
  is_active: Option<bool>,
  #[serde(rename = "joined_at")]
  joined_at: Option<String>,
  #[serde(rename = "last_login_at")]
  last_login_at: Option<String>,
  #[serde(rename = "last_login_method")]
  last_login_method: Option<String>,
  #[serde(rename = "role")]
  role: Option<String>,
  #[serde(rename = "user")]
  user: Option<String>,
  #[serde(rename = "user_id")]
  user_id: Option<String>,
  #[serde(rename = "user_name")]
  user_name: Option<String>,
  #[serde(rename = "user_url")]
  user_url: Option<String>,
  #[serde(rename = "visibility")]
  visibility: Option<String>
}

impl OrganizationMembership {
  pub fn new() -> OrganizationMembership {
    OrganizationMembership {
      email: None,
      has_two_factor: None,
      is_active: None,
      joined_at: None,
      last_login_at: None,
      last_login_method: None,
      role: None,
      user: None,
      user_id: None,
      user_name: None,
      user_url: None,
      visibility: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> OrganizationMembership {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_has_two_factor(&mut self, has_two_factor: bool) {
    self.has_two_factor = Some(has_two_factor);
  }

  pub fn with_has_two_factor(mut self, has_two_factor: bool) -> OrganizationMembership {
    self.has_two_factor = Some(has_two_factor);
    self
  }

  pub fn has_two_factor(&self) -> Option<&bool> {
    self.has_two_factor.as_ref()
  }

  pub fn reset_has_two_factor(&mut self) {
    self.has_two_factor = None;
  }

  pub fn set_is_active(&mut self, is_active: bool) {
    self.is_active = Some(is_active);
  }

  pub fn with_is_active(mut self, is_active: bool) -> OrganizationMembership {
    self.is_active = Some(is_active);
    self
  }

  pub fn is_active(&self) -> Option<&bool> {
    self.is_active.as_ref()
  }

  pub fn reset_is_active(&mut self) {
    self.is_active = None;
  }

  pub fn set_joined_at(&mut self, joined_at: String) {
    self.joined_at = Some(joined_at);
  }

  pub fn with_joined_at(mut self, joined_at: String) -> OrganizationMembership {
    self.joined_at = Some(joined_at);
    self
  }

  pub fn joined_at(&self) -> Option<&String> {
    self.joined_at.as_ref()
  }

  pub fn reset_joined_at(&mut self) {
    self.joined_at = None;
  }

  pub fn set_last_login_at(&mut self, last_login_at: String) {
    self.last_login_at = Some(last_login_at);
  }

  pub fn with_last_login_at(mut self, last_login_at: String) -> OrganizationMembership {
    self.last_login_at = Some(last_login_at);
    self
  }

  pub fn last_login_at(&self) -> Option<&String> {
    self.last_login_at.as_ref()
  }

  pub fn reset_last_login_at(&mut self) {
    self.last_login_at = None;
  }

  pub fn set_last_login_method(&mut self, last_login_method: String) {
    self.last_login_method = Some(last_login_method);
  }

  pub fn with_last_login_method(mut self, last_login_method: String) -> OrganizationMembership {
    self.last_login_method = Some(last_login_method);
    self
  }

  pub fn last_login_method(&self) -> Option<&String> {
    self.last_login_method.as_ref()
  }

  pub fn reset_last_login_method(&mut self) {
    self.last_login_method = None;
  }

  pub fn set_role(&mut self, role: String) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: String) -> OrganizationMembership {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&String> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> OrganizationMembership {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

  pub fn set_user_id(&mut self, user_id: String) {
    self.user_id = Some(user_id);
  }

  pub fn with_user_id(mut self, user_id: String) -> OrganizationMembership {
    self.user_id = Some(user_id);
    self
  }

  pub fn user_id(&self) -> Option<&String> {
    self.user_id.as_ref()
  }

  pub fn reset_user_id(&mut self) {
    self.user_id = None;
  }

  pub fn set_user_name(&mut self, user_name: String) {
    self.user_name = Some(user_name);
  }

  pub fn with_user_name(mut self, user_name: String) -> OrganizationMembership {
    self.user_name = Some(user_name);
    self
  }

  pub fn user_name(&self) -> Option<&String> {
    self.user_name.as_ref()
  }

  pub fn reset_user_name(&mut self) {
    self.user_name = None;
  }

  pub fn set_user_url(&mut self, user_url: String) {
    self.user_url = Some(user_url);
  }

  pub fn with_user_url(mut self, user_url: String) -> OrganizationMembership {
    self.user_url = Some(user_url);
    self
  }

  pub fn user_url(&self) -> Option<&String> {
    self.user_url.as_ref()
  }

  pub fn reset_user_url(&mut self) {
    self.user_url = None;
  }

  pub fn set_visibility(&mut self, visibility: String) {
    self.visibility = Some(visibility);
  }

  pub fn with_visibility(mut self, visibility: String) -> OrganizationMembership {
    self.visibility = Some(visibility);
    self
  }

  pub fn visibility(&self) -> Option<&String> {
    self.visibility.as_ref()
  }

  pub fn reset_visibility(&mut self) {
    self.visibility = None;
  }

}



