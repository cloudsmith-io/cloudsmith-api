/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageVulnerability {
  #[serde(rename = "identifier")]
  identifier: String,
  /// The name of this package.
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>,
  /// The raw version for this package.
  #[serde(rename = "version")]
  version: Option<String>
}

impl PackageVulnerability {
  pub fn new(identifier: String) -> PackageVulnerability {
    PackageVulnerability {
      identifier: identifier,
      name: None,
      url: None,
      version: None
    }
  }

  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = identifier;
  }

  pub fn with_identifier(mut self, identifier: String) -> PackageVulnerability {
    self.identifier = identifier;
    self
  }

  pub fn identifier(&self) -> &String {
    &self.identifier
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PackageVulnerability {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> PackageVulnerability {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> PackageVulnerability {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



