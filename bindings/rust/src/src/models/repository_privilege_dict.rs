/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryPrivilegeDict {
  /// The level of privilege that the user or team should be granted to the specified repository.
  #[serde(rename = "privilege")]
  privilege: String,
  /// The service identifier (slug).
  #[serde(rename = "service")]
  service: Option<String>,
  /// The team identifier (slug).
  #[serde(rename = "team")]
  team: Option<String>,
  /// The user identifier (slug).
  #[serde(rename = "user")]
  user: Option<String>
}

impl RepositoryPrivilegeDict {
  pub fn new(privilege: String) -> RepositoryPrivilegeDict {
    RepositoryPrivilegeDict {
      privilege: privilege,
      service: None,
      team: None,
      user: None
    }
  }

  pub fn set_privilege(&mut self, privilege: String) {
    self.privilege = privilege;
  }

  pub fn with_privilege(mut self, privilege: String) -> RepositoryPrivilegeDict {
    self.privilege = privilege;
    self
  }

  pub fn privilege(&self) -> &String {
    &self.privilege
  }


  pub fn set_service(&mut self, service: String) {
    self.service = Some(service);
  }

  pub fn with_service(mut self, service: String) -> RepositoryPrivilegeDict {
    self.service = Some(service);
    self
  }

  pub fn service(&self) -> Option<&String> {
    self.service.as_ref()
  }

  pub fn reset_service(&mut self) {
    self.service = None;
  }

  pub fn set_team(&mut self, team: String) {
    self.team = Some(team);
  }

  pub fn with_team(mut self, team: String) -> RepositoryPrivilegeDict {
    self.team = Some(team);
    self
  }

  pub fn team(&self) -> Option<&String> {
    self.team.as_ref()
  }

  pub fn reset_team(&mut self) {
    self.team = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> RepositoryPrivilegeDict {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



