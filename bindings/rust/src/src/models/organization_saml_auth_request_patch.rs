/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationSamlAuthRequestPatch {
  #[serde(rename = "saml_auth_enabled")]
  saml_auth_enabled: Option<bool>,
  #[serde(rename = "saml_auth_enforced")]
  saml_auth_enforced: Option<bool>,
  /// If configured, SAML metadata will be used as entered instead of retrieved from a remote URL.
  #[serde(rename = "saml_metadata_inline")]
  saml_metadata_inline: Option<String>,
  /// If configured, SAML metadata be retrieved from a remote URL.
  #[serde(rename = "saml_metadata_url")]
  saml_metadata_url: Option<String>
}

impl OrganizationSamlAuthRequestPatch {
  pub fn new() -> OrganizationSamlAuthRequestPatch {
    OrganizationSamlAuthRequestPatch {
      saml_auth_enabled: None,
      saml_auth_enforced: None,
      saml_metadata_inline: None,
      saml_metadata_url: None
    }
  }

  pub fn set_saml_auth_enabled(&mut self, saml_auth_enabled: bool) {
    self.saml_auth_enabled = Some(saml_auth_enabled);
  }

  pub fn with_saml_auth_enabled(mut self, saml_auth_enabled: bool) -> OrganizationSamlAuthRequestPatch {
    self.saml_auth_enabled = Some(saml_auth_enabled);
    self
  }

  pub fn saml_auth_enabled(&self) -> Option<&bool> {
    self.saml_auth_enabled.as_ref()
  }

  pub fn reset_saml_auth_enabled(&mut self) {
    self.saml_auth_enabled = None;
  }

  pub fn set_saml_auth_enforced(&mut self, saml_auth_enforced: bool) {
    self.saml_auth_enforced = Some(saml_auth_enforced);
  }

  pub fn with_saml_auth_enforced(mut self, saml_auth_enforced: bool) -> OrganizationSamlAuthRequestPatch {
    self.saml_auth_enforced = Some(saml_auth_enforced);
    self
  }

  pub fn saml_auth_enforced(&self) -> Option<&bool> {
    self.saml_auth_enforced.as_ref()
  }

  pub fn reset_saml_auth_enforced(&mut self) {
    self.saml_auth_enforced = None;
  }

  pub fn set_saml_metadata_inline(&mut self, saml_metadata_inline: String) {
    self.saml_metadata_inline = Some(saml_metadata_inline);
  }

  pub fn with_saml_metadata_inline(mut self, saml_metadata_inline: String) -> OrganizationSamlAuthRequestPatch {
    self.saml_metadata_inline = Some(saml_metadata_inline);
    self
  }

  pub fn saml_metadata_inline(&self) -> Option<&String> {
    self.saml_metadata_inline.as_ref()
  }

  pub fn reset_saml_metadata_inline(&mut self) {
    self.saml_metadata_inline = None;
  }

  pub fn set_saml_metadata_url(&mut self, saml_metadata_url: String) {
    self.saml_metadata_url = Some(saml_metadata_url);
  }

  pub fn with_saml_metadata_url(mut self, saml_metadata_url: String) -> OrganizationSamlAuthRequestPatch {
    self.saml_metadata_url = Some(saml_metadata_url);
    self
  }

  pub fn saml_metadata_url(&self) -> Option<&String> {
    self.saml_metadata_url.as_ref()
  }

  pub fn reset_saml_metadata_url(&mut self) {
    self.saml_metadata_url = None;
  }

}



