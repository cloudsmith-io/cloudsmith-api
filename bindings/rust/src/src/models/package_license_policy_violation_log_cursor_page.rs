/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageLicensePolicyViolationLogCursorPage {
  #[serde(rename = "next")]
  next: Option<String>,
  #[serde(rename = "previous")]
  previous: Option<String>,
  #[serde(rename = "results")]
  results: Vec<::models::PackageLicensePolicyViolationLog>
}

impl PackageLicensePolicyViolationLogCursorPage {
  pub fn new(results: Vec<::models::PackageLicensePolicyViolationLog>) -> PackageLicensePolicyViolationLogCursorPage {
    PackageLicensePolicyViolationLogCursorPage {
      next: None,
      previous: None,
      results: results
    }
  }

  pub fn set_next(&mut self, next: String) {
    self.next = Some(next);
  }

  pub fn with_next(mut self, next: String) -> PackageLicensePolicyViolationLogCursorPage {
    self.next = Some(next);
    self
  }

  pub fn next(&self) -> Option<&String> {
    self.next.as_ref()
  }

  pub fn reset_next(&mut self) {
    self.next = None;
  }

  pub fn set_previous(&mut self, previous: String) {
    self.previous = Some(previous);
  }

  pub fn with_previous(mut self, previous: String) -> PackageLicensePolicyViolationLogCursorPage {
    self.previous = Some(previous);
    self
  }

  pub fn previous(&self) -> Option<&String> {
    self.previous.as_ref()
  }

  pub fn reset_previous(&mut self) {
    self.previous = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::PackageLicensePolicyViolationLog>) {
    self.results = results;
  }

  pub fn with_results(mut self, results: Vec<::models::PackageLicensePolicyViolationLog>) -> PackageLicensePolicyViolationLogCursorPage {
    self.results = results;
    self
  }

  pub fn results(&self) -> &Vec<::models::PackageLicensePolicyViolationLog> {
    &self.results
  }


}



