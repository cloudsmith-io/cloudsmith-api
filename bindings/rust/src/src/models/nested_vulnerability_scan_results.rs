/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NestedVulnerabilityScanResults {
  /// The time this scan result was stored.
  #[serde(rename = "created_at")]
  created_at: Option<String>,
  /// Do the results contain any known vulnerabilities?
  #[serde(rename = "has_vulnerabilities")]
  has_vulnerabilities: Option<bool>,
  #[serde(rename = "identifier")]
  identifier: String,
  #[serde(rename = "max_severity")]
  max_severity: Option<String>,
  #[serde(rename = "num_vulnerabilities")]
  num_vulnerabilities: Option<i32>,
  /// Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.
  #[serde(rename = "scan_id")]
  scan_id: i32,
  #[serde(rename = "url")]
  url: Option<String>
}

impl NestedVulnerabilityScanResults {
  pub fn new(identifier: String, scan_id: i32) -> NestedVulnerabilityScanResults {
    NestedVulnerabilityScanResults {
      created_at: None,
      has_vulnerabilities: None,
      identifier: identifier,
      max_severity: None,
      num_vulnerabilities: None,
      scan_id: scan_id,
      url: None
    }
  }

  pub fn set_created_at(&mut self, created_at: String) {
    self.created_at = Some(created_at);
  }

  pub fn with_created_at(mut self, created_at: String) -> NestedVulnerabilityScanResults {
    self.created_at = Some(created_at);
    self
  }

  pub fn created_at(&self) -> Option<&String> {
    self.created_at.as_ref()
  }

  pub fn reset_created_at(&mut self) {
    self.created_at = None;
  }

  pub fn set_has_vulnerabilities(&mut self, has_vulnerabilities: bool) {
    self.has_vulnerabilities = Some(has_vulnerabilities);
  }

  pub fn with_has_vulnerabilities(mut self, has_vulnerabilities: bool) -> NestedVulnerabilityScanResults {
    self.has_vulnerabilities = Some(has_vulnerabilities);
    self
  }

  pub fn has_vulnerabilities(&self) -> Option<&bool> {
    self.has_vulnerabilities.as_ref()
  }

  pub fn reset_has_vulnerabilities(&mut self) {
    self.has_vulnerabilities = None;
  }

  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = identifier;
  }

  pub fn with_identifier(mut self, identifier: String) -> NestedVulnerabilityScanResults {
    self.identifier = identifier;
    self
  }

  pub fn identifier(&self) -> &String {
    &self.identifier
  }


  pub fn set_max_severity(&mut self, max_severity: String) {
    self.max_severity = Some(max_severity);
  }

  pub fn with_max_severity(mut self, max_severity: String) -> NestedVulnerabilityScanResults {
    self.max_severity = Some(max_severity);
    self
  }

  pub fn max_severity(&self) -> Option<&String> {
    self.max_severity.as_ref()
  }

  pub fn reset_max_severity(&mut self) {
    self.max_severity = None;
  }

  pub fn set_num_vulnerabilities(&mut self, num_vulnerabilities: i32) {
    self.num_vulnerabilities = Some(num_vulnerabilities);
  }

  pub fn with_num_vulnerabilities(mut self, num_vulnerabilities: i32) -> NestedVulnerabilityScanResults {
    self.num_vulnerabilities = Some(num_vulnerabilities);
    self
  }

  pub fn num_vulnerabilities(&self) -> Option<&i32> {
    self.num_vulnerabilities.as_ref()
  }

  pub fn reset_num_vulnerabilities(&mut self) {
    self.num_vulnerabilities = None;
  }

  pub fn set_scan_id(&mut self, scan_id: i32) {
    self.scan_id = scan_id;
  }

  pub fn with_scan_id(mut self, scan_id: i32) -> NestedVulnerabilityScanResults {
    self.scan_id = scan_id;
    self
  }

  pub fn scan_id(&self) -> &i32 {
    &self.scan_id
  }


  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> NestedVulnerabilityScanResults {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



