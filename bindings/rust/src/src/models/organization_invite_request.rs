/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrganizationInviteRequest {
  /// The email of the user to be invited.
  #[serde(rename = "email")]
  email: Option<String>,
  /// The role to be assigned to the invited user.
  #[serde(rename = "role")]
  role: Option<String>,
  #[serde(rename = "teams")]
  teams: Option<Vec<::models::OrganizationTeamInvite>>,
  /// The slug of the user to be invited.
  #[serde(rename = "user")]
  user: Option<String>
}

impl OrganizationInviteRequest {
  pub fn new() -> OrganizationInviteRequest {
    OrganizationInviteRequest {
      email: None,
      role: None,
      teams: None,
      user: None
    }
  }

  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> OrganizationInviteRequest {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_role(&mut self, role: String) {
    self.role = Some(role);
  }

  pub fn with_role(mut self, role: String) -> OrganizationInviteRequest {
    self.role = Some(role);
    self
  }

  pub fn role(&self) -> Option<&String> {
    self.role.as_ref()
  }

  pub fn reset_role(&mut self) {
    self.role = None;
  }

  pub fn set_teams(&mut self, teams: Vec<::models::OrganizationTeamInvite>) {
    self.teams = Some(teams);
  }

  pub fn with_teams(mut self, teams: Vec<::models::OrganizationTeamInvite>) -> OrganizationInviteRequest {
    self.teams = Some(teams);
    self
  }

  pub fn teams(&self) -> Option<&Vec<::models::OrganizationTeamInvite>> {
    self.teams.as_ref()
  }

  pub fn reset_teams(&mut self) {
    self.teams = None;
  }

  pub fn set_user(&mut self, user: String) {
    self.user = Some(user);
  }

  pub fn with_user(mut self, user: String) -> OrganizationInviteRequest {
    self.user = Some(user);
    self
  }

  pub fn user(&self) -> Option<&String> {
    self.user.as_ref()
  }

  pub fn reset_user(&mut self) {
    self.user = None;
  }

}



