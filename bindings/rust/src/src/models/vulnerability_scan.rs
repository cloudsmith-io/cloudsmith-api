/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct VulnerabilityScan {
  #[serde(rename = "results")]
  results: Vec<::models::Vulnerability>,
  #[serde(rename = "target")]
  target: String,
  #[serde(rename = "type")]
  _type: String
}

impl VulnerabilityScan {
  pub fn new(results: Vec<::models::Vulnerability>, target: String, _type: String) -> VulnerabilityScan {
    VulnerabilityScan {
      results: results,
      target: target,
      _type: _type
    }
  }

  pub fn set_results(&mut self, results: Vec<::models::Vulnerability>) {
    self.results = results;
  }

  pub fn with_results(mut self, results: Vec<::models::Vulnerability>) -> VulnerabilityScan {
    self.results = results;
    self
  }

  pub fn results(&self) -> &Vec<::models::Vulnerability> {
    &self.results
  }


  pub fn set_target(&mut self, target: String) {
    self.target = target;
  }

  pub fn with_target(mut self, target: String) -> VulnerabilityScan {
    self.target = target;
    self
  }

  pub fn target(&self) -> &String {
    &self.target
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> VulnerabilityScan {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


}



