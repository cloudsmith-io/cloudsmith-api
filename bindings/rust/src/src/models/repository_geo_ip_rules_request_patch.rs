/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RepositoryGeoIpRulesRequestPatch {
  #[serde(rename = "cidr")]
  cidr: Option<::models::RepositoryGeoIpCidr>,
  #[serde(rename = "country_code")]
  country_code: Option<::models::RepositoryGeoIpCountryCode>
}

impl RepositoryGeoIpRulesRequestPatch {
  pub fn new() -> RepositoryGeoIpRulesRequestPatch {
    RepositoryGeoIpRulesRequestPatch {
      cidr: None,
      country_code: None
    }
  }

  pub fn set_cidr(&mut self, cidr: ::models::RepositoryGeoIpCidr) {
    self.cidr = Some(cidr);
  }

  pub fn with_cidr(mut self, cidr: ::models::RepositoryGeoIpCidr) -> RepositoryGeoIpRulesRequestPatch {
    self.cidr = Some(cidr);
    self
  }

  pub fn cidr(&self) -> Option<&::models::RepositoryGeoIpCidr> {
    self.cidr.as_ref()
  }

  pub fn reset_cidr(&mut self) {
    self.cidr = None;
  }

  pub fn set_country_code(&mut self, country_code: ::models::RepositoryGeoIpCountryCode) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: ::models::RepositoryGeoIpCountryCode) -> RepositoryGeoIpRulesRequestPatch {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&::models::RepositoryGeoIpCountryCode> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

}



