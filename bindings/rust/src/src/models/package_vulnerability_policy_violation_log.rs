/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageVulnerabilityPolicyViolationLog {
  #[serde(rename = "event_at")]
  event_at: Option<String>,
  #[serde(rename = "package")]
  package: ::models::PackageVulnerability,
  #[serde(rename = "policy")]
  policy: ::models::NestedVulnerabilityPolicy,
  #[serde(rename = "reasons")]
  reasons: Vec<String>,
  #[serde(rename = "vulnerability_scan_results")]
  vulnerability_scan_results: ::models::NestedVulnerabilityScanResults
}

impl PackageVulnerabilityPolicyViolationLog {
  pub fn new(package: ::models::PackageVulnerability, policy: ::models::NestedVulnerabilityPolicy, reasons: Vec<String>, vulnerability_scan_results: ::models::NestedVulnerabilityScanResults) -> PackageVulnerabilityPolicyViolationLog {
    PackageVulnerabilityPolicyViolationLog {
      event_at: None,
      package: package,
      policy: policy,
      reasons: reasons,
      vulnerability_scan_results: vulnerability_scan_results
    }
  }

  pub fn set_event_at(&mut self, event_at: String) {
    self.event_at = Some(event_at);
  }

  pub fn with_event_at(mut self, event_at: String) -> PackageVulnerabilityPolicyViolationLog {
    self.event_at = Some(event_at);
    self
  }

  pub fn event_at(&self) -> Option<&String> {
    self.event_at.as_ref()
  }

  pub fn reset_event_at(&mut self) {
    self.event_at = None;
  }

  pub fn set_package(&mut self, package: ::models::PackageVulnerability) {
    self.package = package;
  }

  pub fn with_package(mut self, package: ::models::PackageVulnerability) -> PackageVulnerabilityPolicyViolationLog {
    self.package = package;
    self
  }

  pub fn package(&self) -> &::models::PackageVulnerability {
    &self.package
  }


  pub fn set_policy(&mut self, policy: ::models::NestedVulnerabilityPolicy) {
    self.policy = policy;
  }

  pub fn with_policy(mut self, policy: ::models::NestedVulnerabilityPolicy) -> PackageVulnerabilityPolicyViolationLog {
    self.policy = policy;
    self
  }

  pub fn policy(&self) -> &::models::NestedVulnerabilityPolicy {
    &self.policy
  }


  pub fn set_reasons(&mut self, reasons: Vec<String>) {
    self.reasons = reasons;
  }

  pub fn with_reasons(mut self, reasons: Vec<String>) -> PackageVulnerabilityPolicyViolationLog {
    self.reasons = reasons;
    self
  }

  pub fn reasons(&self) -> &Vec<String> {
    &self.reasons
  }


  pub fn set_vulnerability_scan_results(&mut self, vulnerability_scan_results: ::models::NestedVulnerabilityScanResults) {
    self.vulnerability_scan_results = vulnerability_scan_results;
  }

  pub fn with_vulnerability_scan_results(mut self, vulnerability_scan_results: ::models::NestedVulnerabilityScanResults) -> PackageVulnerabilityPolicyViolationLog {
    self.vulnerability_scan_results = vulnerability_scan_results;
    self
  }

  pub fn vulnerability_scan_results(&self) -> &::models::NestedVulnerabilityScanResults {
    &self.vulnerability_scan_results
  }


}



