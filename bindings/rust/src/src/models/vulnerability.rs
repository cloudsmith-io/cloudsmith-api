/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Vulnerability {
  #[serde(rename = "affected_version")]
  affected_version: ::models::VulnerabilityScanVersion,
  #[serde(rename = "description")]
  description: String,
  #[serde(rename = "fixed_version")]
  fixed_version: ::models::VulnerabilityScanVersion,
  #[serde(rename = "package_name")]
  package_name: String,
  #[serde(rename = "references")]
  references: Vec<String>,
  #[serde(rename = "severity")]
  severity: Option<String>,
  #[serde(rename = "severity_source")]
  severity_source: String,
  #[serde(rename = "title")]
  title: String,
  #[serde(rename = "vulnerability_id")]
  vulnerability_id: String
}

impl Vulnerability {
  pub fn new(affected_version: ::models::VulnerabilityScanVersion, description: String, fixed_version: ::models::VulnerabilityScanVersion, package_name: String, references: Vec<String>, severity_source: String, title: String, vulnerability_id: String) -> Vulnerability {
    Vulnerability {
      affected_version: affected_version,
      description: description,
      fixed_version: fixed_version,
      package_name: package_name,
      references: references,
      severity: None,
      severity_source: severity_source,
      title: title,
      vulnerability_id: vulnerability_id
    }
  }

  pub fn set_affected_version(&mut self, affected_version: ::models::VulnerabilityScanVersion) {
    self.affected_version = affected_version;
  }

  pub fn with_affected_version(mut self, affected_version: ::models::VulnerabilityScanVersion) -> Vulnerability {
    self.affected_version = affected_version;
    self
  }

  pub fn affected_version(&self) -> &::models::VulnerabilityScanVersion {
    &self.affected_version
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> Vulnerability {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_fixed_version(&mut self, fixed_version: ::models::VulnerabilityScanVersion) {
    self.fixed_version = fixed_version;
  }

  pub fn with_fixed_version(mut self, fixed_version: ::models::VulnerabilityScanVersion) -> Vulnerability {
    self.fixed_version = fixed_version;
    self
  }

  pub fn fixed_version(&self) -> &::models::VulnerabilityScanVersion {
    &self.fixed_version
  }


  pub fn set_package_name(&mut self, package_name: String) {
    self.package_name = package_name;
  }

  pub fn with_package_name(mut self, package_name: String) -> Vulnerability {
    self.package_name = package_name;
    self
  }

  pub fn package_name(&self) -> &String {
    &self.package_name
  }


  pub fn set_references(&mut self, references: Vec<String>) {
    self.references = references;
  }

  pub fn with_references(mut self, references: Vec<String>) -> Vulnerability {
    self.references = references;
    self
  }

  pub fn references(&self) -> &Vec<String> {
    &self.references
  }


  pub fn set_severity(&mut self, severity: String) {
    self.severity = Some(severity);
  }

  pub fn with_severity(mut self, severity: String) -> Vulnerability {
    self.severity = Some(severity);
    self
  }

  pub fn severity(&self) -> Option<&String> {
    self.severity.as_ref()
  }

  pub fn reset_severity(&mut self) {
    self.severity = None;
  }

  pub fn set_severity_source(&mut self, severity_source: String) {
    self.severity_source = severity_source;
  }

  pub fn with_severity_source(mut self, severity_source: String) -> Vulnerability {
    self.severity_source = severity_source;
    self
  }

  pub fn severity_source(&self) -> &String {
    &self.severity_source
  }


  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> Vulnerability {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


  pub fn set_vulnerability_id(&mut self, vulnerability_id: String) {
    self.vulnerability_id = vulnerability_id;
  }

  pub fn with_vulnerability_id(mut self, vulnerability_id: String) -> Vulnerability {
    self.vulnerability_id = vulnerability_id;
    self
  }

  pub fn vulnerability_id(&self) -> &String {
    &self.vulnerability_id
  }


}



