/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UserProfile {
  #[serde(rename = "company")]
  company: Option<String>,
  #[serde(rename = "first_name")]
  first_name: String,
  #[serde(rename = "job_title")]
  job_title: Option<String>,
  #[serde(rename = "joined_at")]
  joined_at: Option<String>,
  #[serde(rename = "last_name")]
  last_name: String,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "slug")]
  slug: Option<String>,
  #[serde(rename = "slug_perm")]
  slug_perm: Option<String>,
  /// Your tagline is a sentence about you. Make it funny. Make it professional. Either way, it's public and it represents who you are.
  #[serde(rename = "tagline")]
  tagline: Option<String>,
  #[serde(rename = "url")]
  url: Option<String>
}

impl UserProfile {
  pub fn new(first_name: String, last_name: String) -> UserProfile {
    UserProfile {
      company: None,
      first_name: first_name,
      job_title: None,
      joined_at: None,
      last_name: last_name,
      name: None,
      slug: None,
      slug_perm: None,
      tagline: None,
      url: None
    }
  }

  pub fn set_company(&mut self, company: String) {
    self.company = Some(company);
  }

  pub fn with_company(mut self, company: String) -> UserProfile {
    self.company = Some(company);
    self
  }

  pub fn company(&self) -> Option<&String> {
    self.company.as_ref()
  }

  pub fn reset_company(&mut self) {
    self.company = None;
  }

  pub fn set_first_name(&mut self, first_name: String) {
    self.first_name = first_name;
  }

  pub fn with_first_name(mut self, first_name: String) -> UserProfile {
    self.first_name = first_name;
    self
  }

  pub fn first_name(&self) -> &String {
    &self.first_name
  }


  pub fn set_job_title(&mut self, job_title: String) {
    self.job_title = Some(job_title);
  }

  pub fn with_job_title(mut self, job_title: String) -> UserProfile {
    self.job_title = Some(job_title);
    self
  }

  pub fn job_title(&self) -> Option<&String> {
    self.job_title.as_ref()
  }

  pub fn reset_job_title(&mut self) {
    self.job_title = None;
  }

  pub fn set_joined_at(&mut self, joined_at: String) {
    self.joined_at = Some(joined_at);
  }

  pub fn with_joined_at(mut self, joined_at: String) -> UserProfile {
    self.joined_at = Some(joined_at);
    self
  }

  pub fn joined_at(&self) -> Option<&String> {
    self.joined_at.as_ref()
  }

  pub fn reset_joined_at(&mut self) {
    self.joined_at = None;
  }

  pub fn set_last_name(&mut self, last_name: String) {
    self.last_name = last_name;
  }

  pub fn with_last_name(mut self, last_name: String) -> UserProfile {
    self.last_name = last_name;
    self
  }

  pub fn last_name(&self) -> &String {
    &self.last_name
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UserProfile {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_slug(&mut self, slug: String) {
    self.slug = Some(slug);
  }

  pub fn with_slug(mut self, slug: String) -> UserProfile {
    self.slug = Some(slug);
    self
  }

  pub fn slug(&self) -> Option<&String> {
    self.slug.as_ref()
  }

  pub fn reset_slug(&mut self) {
    self.slug = None;
  }

  pub fn set_slug_perm(&mut self, slug_perm: String) {
    self.slug_perm = Some(slug_perm);
  }

  pub fn with_slug_perm(mut self, slug_perm: String) -> UserProfile {
    self.slug_perm = Some(slug_perm);
    self
  }

  pub fn slug_perm(&self) -> Option<&String> {
    self.slug_perm.as_ref()
  }

  pub fn reset_slug_perm(&mut self) {
    self.slug_perm = None;
  }

  pub fn set_tagline(&mut self, tagline: String) {
    self.tagline = Some(tagline);
  }

  pub fn with_tagline(mut self, tagline: String) -> UserProfile {
    self.tagline = Some(tagline);
    self
  }

  pub fn tagline(&self) -> Option<&String> {
    self.tagline.as_ref()
  }

  pub fn reset_tagline(&mut self) {
    self.tagline = None;
  }

  pub fn set_url(&mut self, url: String) {
    self.url = Some(url);
  }

  pub fn with_url(mut self, url: String) -> UserProfile {
    self.url = Some(url);
    self
  }

  pub fn url(&self) -> Option<&String> {
    self.url.as_ref()
  }

  pub fn reset_url(&mut self) {
    self.url = None;
  }

}



