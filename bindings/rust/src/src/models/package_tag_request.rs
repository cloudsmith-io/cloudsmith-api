/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageTagRequest {
  #[serde(rename = "action")]
  action: Option<String>,
  /// If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.
  #[serde(rename = "is_immutable")]
  is_immutable: Option<bool>,
  /// A list of tags to apply the action to. Not required for clears.
  #[serde(rename = "tags")]
  tags: Option<Vec<String>>
}

impl PackageTagRequest {
  pub fn new() -> PackageTagRequest {
    PackageTagRequest {
      action: None,
      is_immutable: None,
      tags: None
    }
  }

  pub fn set_action(&mut self, action: String) {
    self.action = Some(action);
  }

  pub fn with_action(mut self, action: String) -> PackageTagRequest {
    self.action = Some(action);
    self
  }

  pub fn action(&self) -> Option<&String> {
    self.action.as_ref()
  }

  pub fn reset_action(&mut self) {
    self.action = None;
  }

  pub fn set_is_immutable(&mut self, is_immutable: bool) {
    self.is_immutable = Some(is_immutable);
  }

  pub fn with_is_immutable(mut self, is_immutable: bool) -> PackageTagRequest {
    self.is_immutable = Some(is_immutable);
    self
  }

  pub fn is_immutable(&self) -> Option<&bool> {
    self.is_immutable.as_ref()
  }

  pub fn reset_is_immutable(&mut self) {
    self.is_immutable = None;
  }

  pub fn set_tags(&mut self, tags: Vec<String>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<String>) -> PackageTagRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&Vec<String>> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

}



