/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConanPackageUploadRequest {
  /// Conan channel.
  #[serde(rename = "conan_channel")]
  conan_channel: Option<String>,
  /// Conan prefix (User).
  #[serde(rename = "conan_prefix")]
  conan_prefix: Option<String>,
  /// The info file is an python file containing the package metadata.
  #[serde(rename = "info_file")]
  info_file: String,
  /// The info file is an python file containing the package metadata.
  #[serde(rename = "manifest_file")]
  manifest_file: String,
  /// The conan file is an python file containing the package metadata.
  #[serde(rename = "metadata_file")]
  metadata_file: String,
  /// The name of this package.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The primary file for the package.
  #[serde(rename = "package_file")]
  package_file: String,
  /// If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
  #[serde(rename = "republish")]
  republish: Option<bool>,
  /// A comma-separated values list of tags to add to the package.
  #[serde(rename = "tags")]
  tags: Option<String>,
  /// The raw version for this package.
  #[serde(rename = "version")]
  version: Option<String>
}

impl ConanPackageUploadRequest {
  pub fn new(info_file: String, manifest_file: String, metadata_file: String, package_file: String) -> ConanPackageUploadRequest {
    ConanPackageUploadRequest {
      conan_channel: None,
      conan_prefix: None,
      info_file: info_file,
      manifest_file: manifest_file,
      metadata_file: metadata_file,
      name: None,
      package_file: package_file,
      republish: None,
      tags: None,
      version: None
    }
  }

  pub fn set_conan_channel(&mut self, conan_channel: String) {
    self.conan_channel = Some(conan_channel);
  }

  pub fn with_conan_channel(mut self, conan_channel: String) -> ConanPackageUploadRequest {
    self.conan_channel = Some(conan_channel);
    self
  }

  pub fn conan_channel(&self) -> Option<&String> {
    self.conan_channel.as_ref()
  }

  pub fn reset_conan_channel(&mut self) {
    self.conan_channel = None;
  }

  pub fn set_conan_prefix(&mut self, conan_prefix: String) {
    self.conan_prefix = Some(conan_prefix);
  }

  pub fn with_conan_prefix(mut self, conan_prefix: String) -> ConanPackageUploadRequest {
    self.conan_prefix = Some(conan_prefix);
    self
  }

  pub fn conan_prefix(&self) -> Option<&String> {
    self.conan_prefix.as_ref()
  }

  pub fn reset_conan_prefix(&mut self) {
    self.conan_prefix = None;
  }

  pub fn set_info_file(&mut self, info_file: String) {
    self.info_file = info_file;
  }

  pub fn with_info_file(mut self, info_file: String) -> ConanPackageUploadRequest {
    self.info_file = info_file;
    self
  }

  pub fn info_file(&self) -> &String {
    &self.info_file
  }


  pub fn set_manifest_file(&mut self, manifest_file: String) {
    self.manifest_file = manifest_file;
  }

  pub fn with_manifest_file(mut self, manifest_file: String) -> ConanPackageUploadRequest {
    self.manifest_file = manifest_file;
    self
  }

  pub fn manifest_file(&self) -> &String {
    &self.manifest_file
  }


  pub fn set_metadata_file(&mut self, metadata_file: String) {
    self.metadata_file = metadata_file;
  }

  pub fn with_metadata_file(mut self, metadata_file: String) -> ConanPackageUploadRequest {
    self.metadata_file = metadata_file;
    self
  }

  pub fn metadata_file(&self) -> &String {
    &self.metadata_file
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ConanPackageUploadRequest {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_package_file(&mut self, package_file: String) {
    self.package_file = package_file;
  }

  pub fn with_package_file(mut self, package_file: String) -> ConanPackageUploadRequest {
    self.package_file = package_file;
    self
  }

  pub fn package_file(&self) -> &String {
    &self.package_file
  }


  pub fn set_republish(&mut self, republish: bool) {
    self.republish = Some(republish);
  }

  pub fn with_republish(mut self, republish: bool) -> ConanPackageUploadRequest {
    self.republish = Some(republish);
    self
  }

  pub fn republish(&self) -> Option<&bool> {
    self.republish.as_ref()
  }

  pub fn reset_republish(&mut self) {
    self.republish = None;
  }

  pub fn set_tags(&mut self, tags: String) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: String) -> ConanPackageUploadRequest {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> Option<&String> {
    self.tags.as_ref()
  }

  pub fn reset_tags(&mut self) {
    self.tags = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> ConanPackageUploadRequest {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



