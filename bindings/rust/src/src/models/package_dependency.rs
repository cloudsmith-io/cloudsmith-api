/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageDependency {
  #[serde(rename = "dep_type")]
  dep_type: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "operator")]
  operator: Option<String>,
  #[serde(rename = "version")]
  version: Option<String>
}

impl PackageDependency {
  pub fn new() -> PackageDependency {
    PackageDependency {
      dep_type: None,
      name: None,
      operator: None,
      version: None
    }
  }

  pub fn set_dep_type(&mut self, dep_type: String) {
    self.dep_type = Some(dep_type);
  }

  pub fn with_dep_type(mut self, dep_type: String) -> PackageDependency {
    self.dep_type = Some(dep_type);
    self
  }

  pub fn dep_type(&self) -> Option<&String> {
    self.dep_type.as_ref()
  }

  pub fn reset_dep_type(&mut self) {
    self.dep_type = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> PackageDependency {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_operator(&mut self, operator: String) {
    self.operator = Some(operator);
  }

  pub fn with_operator(mut self, operator: String) -> PackageDependency {
    self.operator = Some(operator);
    self
  }

  pub fn operator(&self) -> Option<&String> {
    self.operator.as_ref()
  }

  pub fn reset_operator(&mut self) {
    self.operator = None;
  }

  pub fn set_version(&mut self, version: String) {
    self.version = Some(version);
  }

  pub fn with_version(mut self, version: String) -> PackageDependency {
    self.version = Some(version);
    self
  }

  pub fn version(&self) -> Option<&String> {
    self.version.as_ref()
  }

  pub fn reset_version(&mut self) {
    self.version = None;
  }

}



