/* 
 * Cloudsmith API (v1)
 *
 * The API to the Cloudsmith Service
 *
 * OpenAPI spec version: v1
 * Contact: support@cloudsmith.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct BadgesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BadgesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BadgesApiClient<C> {
        BadgesApiClient {
            configuration: configuration,
        }
    }
}

pub trait BadgesApi {
    fn badges_version_list(&self, owner: &str, repo: &str, package_format: &str, package_name: &str, package_version: &str, package_identifiers: &str, badge_token: &str, cache_seconds: &str, color: &str, label: &str, label_color: &str, logo_color: &str, logo_width: &str, render: bool, shields: bool, show_latest: bool, style: &str) -> Box<Future<Item = ::models::PackageVersionBadge, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>BadgesApi for BadgesApiClient<C> {
    fn badges_version_list(&self, owner: &str, repo: &str, package_format: &str, package_name: &str, package_version: &str, package_identifiers: &str, badge_token: &str, cache_seconds: &str, color: &str, label: &str, label_color: &str, logo_color: &str, logo_width: &str, render: bool, shields: bool, show_latest: bool, style: &str) -> Box<Future<Item = ::models::PackageVersionBadge, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let mut auth_headers = HashMap::<String, String>::new();
        let mut auth_query = HashMap::<String, String>::new();
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            auth_headers.insert("X-Api-Key".to_owned(), val);
        };
        if let Some(ref auth_conf) = configuration.basic_auth {
            let auth = hyper::header::Authorization(
                hyper::header::Basic {
                    username: auth_conf.0.to_owned(),
                    password: auth_conf.1.to_owned(),
                }
            );
            auth_headers.insert("Authorization".to_owned(), auth.to_string());
        };
        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("badge_token", &badge_token.to_string());
            query.append_pair("cacheSeconds", &cache_seconds.to_string());
            query.append_pair("color", &color.to_string());
            query.append_pair("label", &label.to_string());
            query.append_pair("labelColor", &label_color.to_string());
            query.append_pair("logoColor", &logo_color.to_string());
            query.append_pair("logoWidth", &logo_width.to_string());
            query.append_pair("render", &render.to_string());
            query.append_pair("shields", &shields.to_string());
            query.append_pair("show_latest", &show_latest.to_string());
            query.append_pair("style", &style.to_string());
            for (key, val) in &auth_query {
                query.append_pair(key, val);
            }
            query.finish()
        };
        let uri_str = format!("{}/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/?{}", configuration.base_path, query_string, owner=owner, repo=repo, package_format=package_format, package_name=package_name, package_version=package_version, package_identifiers=package_identifiers);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }


        for (key, val) in auth_headers {
            req.headers_mut().set_raw(key, val);
        }


        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::PackageVersionBadge, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
