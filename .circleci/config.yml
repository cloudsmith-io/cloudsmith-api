version: 2.1

parameters:
  run-workflow:
    type: boolean
    default: true
  release-version:
    type: string
    default: ""
    description: "Version to release (e.g., 1.2.3)"
  dry-run:
    type: boolean
    default: false
    description: "If true, show what would happen but don't make actual changes"

commands:
  test_bindings:
    description: "Test the bindings for a language"
    parameters:
      language:
        type: string
    steps:
      - run: ./scripts/test.sh <<parameters.language>>
  prepare_deploy_environment:
    description: "Prepare the environment used to deploy the API bindings"
    steps:
      - run:
          command: |
            sudo apt update
            sudo apt-get install --no-upgrade -y gettext python3 python3-pip
            pip3 install --no-cache --upgrade --user cloudsmith-cli
  deploy_bindings:
    description: "Deploy the bindings for a language"
    parameters:
      language:
        type: string
    steps:
      - run: ./scripts/deploy.sh <<parameters.language>>

jobs:
  test:
    description: "Tests the bindings for a language"
    parameters:
      docker_image:
        type: string
      language:
        type: string
      extra_env:
        type: string
        default: "EXAMPLE_KEY=EXAMPLE_VALUE"
    docker:
      - image: <<parameters.docker_image>>
    steps:
      - checkout
      - run:
          name: "Injecting additional environment variables"
          command: |
            [ -n "<<parameters.extra_env>>" ] && echo "export <<parameters.extra_env>>" >> $BASH_ENV
      - test_bindings:
          language: <<parameters.language>>
  deploy_bindings:
    description: "Deploys the bindings for a language"
    parameters:
      docker_image:
        type: string
      language:
        type: string
    docker:
      - image: <<parameters.docker_image>>
    steps:
      - checkout
      - prepare_deploy_environment
      - deploy_bindings:
          language: <<parameters.language>>
  pre_commit:
    description: "Run pre-commit hooks"
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            python3 -m pip install --upgrade pip
            pip install pre-commit
      - run:
          name: "Run pre-commit"
          command: pre-commit run --all-files
  update_version:
    description: "Update the API version in configuration files"
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - checkout
      - run:
          name: Update Version
          command: |
            if [ -z "<< pipeline.parameters.release-version >>" ]; then
              echo "Error: release-version parameter is required"
              exit 1
            fi
            
            sed -i "s/package_version=.*/package_version=\"<< pipeline.parameters.release-version >>\"/" scripts/common.sh
            
            echo "Updated package_version to << pipeline.parameters.release-version >> in scripts/common.sh"
      - persist_to_workspace:
          root: .
          paths:
            - .
  generate_bindings:
    description: "Generate bindings with the updated version"
    machine:
      image: ubuntu-2004:current
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Generate Bindings
          command: |
            ./scripts/build.sh
      - persist_to_workspace:
          root: .
          paths:
            - .
  create_pr:
    description: "Create a PR with the updated bindings"
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
      - run:
          name: Extract Package Version and Create PR
          command: |
            set -x
            
            # Get API version from common.sh using a more compatible method
            echo "Extracting package_version from scripts/common.sh"
            # Method 1: Using sed
            PACKAGE_VERSION=$(sed -n 's/package_version="\(.*\)"/\1/p' scripts/common.sh)
            
            # If sed fails, try method 2: Using cut and grep
            if [ -z "$PACKAGE_VERSION" ]; then
              echo "Sed extraction failed, trying alternative method"
              PACKAGE_VERSION=$(grep "package_version=" scripts/common.sh | cut -d'"' -f2)
            fi
            
            # Verify we got the version
            if [ -z "$PACKAGE_VERSION" ]; then
              echo "Failed to extract package_version from scripts/common.sh"
              echo "Content of scripts/common.sh:"
              cat scripts/common.sh
              exit 1
            fi
            
            echo "Found package_version: $PACKAGE_VERSION"
            
            # Set up git config
            git config --global user.email "${GH_USER_EMAIL}"
            git config --global user.name "${GH_USER}"
            
            # Check for dry run mode
            if [ "${DRY_RUN}" == "true" ]; then
              echo "üîç DRY RUN MODE: Would perform the following actions:"
              echo "- Create branch: update-api-bindings-v${PACKAGE_VERSION}"
              echo "- Commit and push changes"
              echo "- Create PR with title: Update API bindings to version ${PACKAGE_VERSION}"
              echo "- PR body: This PR updates the API bindings to version ${PACKAGE_VERSION}."
              echo "- Target repo: https://github.com/cloudsmith-io/cloudsmith-api"
              echo "‚ö†Ô∏è No actual changes will be made in dry run mode"
              exit 0
            fi
            
            # Create branch
            BRANCH_NAME="update-api-bindings-v${PACKAGE_VERSION}"
            echo "Creating branch: $BRANCH_NAME"
            git checkout -b ${BRANCH_NAME}
            
            # Check if there are changes to commit
            echo "Checking for changes"
            git status
            
            if git diff --quiet; then
              echo "No changes detected. Skipping PR creation."
              exit 0
            fi
            
            # Commit changes
            echo "Committing changes"
            git add .
            git commit -m "Update API bindings to version ${PACKAGE_VERSION}"
            
            # Push to remote
            echo "Pushing to remote"
            git push origin ${BRANCH_NAME}
            
            # Create PR
            echo "Creating PR"
            gh pr create --title "Update API bindings to version ${PACKAGE_VERSION}" --body "This PR updates the API bindings to version ${PACKAGE_VERSION}." --repo https://github.com/cloudsmith-io/cloudsmith-api
          environment:
            GH_TOKEN: ${GH_TOKEN}
            DRY_RUN: << pipeline.parameters.dry-run >>

workflows:
  version: 2
  test_and_deploy:
    when: << pipeline.parameters.run-workflow >>
    jobs:
      - pre_commit
      - test:
          name: "Test Java"
          language: java
          docker_image: cimg/openjdk:8.0
      - deploy_bindings:
          requires:
            - "Test Java"
          filters:
            branches:
              only:
                - master
          name: "Deploy Java"
          language: java
          docker_image: cimg/openjdk:8.0
      - test:
          name: "Test Ruby"
          language: ruby
          docker_image: cimg/ruby:2.6
      - deploy_bindings:
          requires:
            - "Test Ruby"
          filters:
            branches:
             only:
               - master
          name: "Deploy Ruby"
          language: ruby
          docker_image: cimg/ruby:2.6
      - test:
          name: "Test Python 2.7"
          language: python
          extra_env: TOXENV=py27
          docker_image: cimg/python:2.7
      - test:
          name: "Test Python 3.7"
          language: python
          extra_env: TOXENV=py3
          docker_image: cimg/python:3.7
      - deploy_bindings:
          requires:
            - "Test Python 2.7"
            - "Test Python 3.7"
          filters:
            branches:
             only:
               - master
          name: "Deploy Python"
          language: python
          docker_image: cimg/python:3.7
  
  release_api_bindings:
    when:
      and:
        - << pipeline.parameters.run-workflow >>
        - not:
            equal: [ "", << pipeline.parameters.release-version >> ]
    jobs:
      - update_version
      - generate_bindings:
          requires:
            - update_version
      - create_pr:
          requires:
            - generate_bindings